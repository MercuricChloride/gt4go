Class {
	#name : #GoParser,
	#superclass : #SmaCCGLRParser,
	#category : #'Gt4go-Parser'
}

{ #category : #generated }
GoParser class >> ambiguousTransitions [
^#(
#[ 0 106 0 245] 
#[ 0 106 0 249] 
#[ 0 106 0 253] 
#[ 0 106 1 1] 
#[ 0 106 1 5] 
#[ 0 106 1 105] 
#[ 0 106 1 13] 
#[ 0 106 1 21] 
#[ 0 106 1 29] 
#[ 0 106 1 33] 
#[ 0 150 0 245] 
#[ 0 150 0 249] 
#[ 0 150 0 253] 
#[ 0 150 1 1] 
#[ 0 150 1 5] 
#[ 0 150 1 105] 
#[ 0 150 1 181] 
#[ 0 150 1 21] 
#[ 0 150 1 29] 
#[ 0 150 1 33] 
#[ 0 94 0 154] 
#[ 0 166 2 157] 
#[ 0 154 1 225] 
#[ 0 6 3 21] 
#[ 0 6 1 233] 
#[ 0 6 0 249] 
#[ 0 6 3 25] 
#[ 0 6 3 29] 
#[ 0 6 3 33] 
#[ 0 6 0 253] 
#[ 0 6 1 1] 
#[ 0 6 1 5] 
#[ 0 6 3 37] 
#[ 0 6 3 41] 
#[ 0 6 0 93] 
#[ 0 6 3 45] 
#[ 0 6 3 49] 
#[ 0 6 0 97] 
#[ 0 6 3 53] 
#[ 0 6 3 57] 
#[ 0 6 3 61] 
#[ 0 6 0 101] 
#[ 0 6 1 237] 
#[ 0 6 3 65] 
#[ 0 6 1 245] 
#[ 0 6 1 173] 
#[ 0 6 1 249] 
#[ 0 6 2 1] 
#[ 0 6 2 5] 
#[ 0 6 2 9] 
#[ 0 6 2 13] 
#[ 0 6 2 17] 
#[ 0 6 2 21] 
#[ 0 6 2 25] 
#[ 0 6 2 29] 
#[ 0 6 2 33] 
#[ 0 6 2 37] 
#[ 0 6 2 41] 
#[ 0 6 2 45] 
#[ 0 6 2 49] 
#[ 0 6 2 53] 
#[ 0 6 0 69] 
#[ 0 6 0 73] 
#[ 0 154 1 26] 
#[ 0 154 1 26 1 225] 
#[ 1 78 4 117] 
#[ 1 78 4 121] 
#[ 1 102 2 157] 
#[ 1 162 4 97] 
#[ 1 162 4 101] 
#[ 1 162 4 105] 
#[ 1 162 4 109] 
#[ 1 162 4 113] 
#[ 0 94 1 26] 
#[ 0 94 0 154 1 26] 
#[ 1 214 4 241] 
#[ 0 6 5 5] 
#[ 0 6 5 9] 
#[ 0 6 2 205] 
#[ 1 222 5 45] 
#[ 0 6 0 25] 
#[ 0 6 0 29] 
#[ 1 226 1 233] 
#[ 0 249 1 226] 
#[ 0 253 1 226] 
#[ 1 1 1 226] 
#[ 1 5 1 226] 
#[ 1 226 1 237] 
#[ 1 226 1 241] 
#[ 1 226 1 245] 
#[ 1 226 1 249] 
#[ 1 226 2 1] 
#[ 1 226 2 5] 
#[ 1 226 2 9] 
#[ 1 226 2 13] 
#[ 1 226 2 17] 
#[ 1 226 2 21] 
#[ 1 226 2 25] 
#[ 1 226 2 29] 
#[ 1 226 2 33] 
#[ 1 226 2 37] 
#[ 1 226 2 41] 
#[ 1 226 2 45] 
#[ 1 226 2 49] 
#[ 1 226 2 53] 
#[ 0 69 1 226] 
#[ 0 73 1 226] 
#[ 0 14 3 21] 
#[ 0 14 1 233] 
#[ 0 14 0 249] 
#[ 0 14 3 25] 
#[ 0 14 3 29] 
#[ 0 14 3 33] 
#[ 0 14 0 253] 
#[ 0 14 1 1] 
#[ 0 14 1 5] 
#[ 0 14 3 37] 
#[ 0 14 3 41] 
#[ 0 14 0 93] 
#[ 0 14 3 45] 
#[ 0 14 3 49] 
#[ 0 14 0 97] 
#[ 0 14 3 53] 
#[ 0 14 3 57] 
#[ 0 14 3 61] 
#[ 0 14 0 101] 
#[ 0 14 1 237] 
#[ 0 14 3 65] 
#[ 0 14 1 245] 
#[ 0 14 1 173] 
#[ 0 14 1 249] 
#[ 0 14 2 1] 
#[ 0 14 2 5] 
#[ 0 14 2 9] 
#[ 0 14 2 13] 
#[ 0 14 2 17] 
#[ 0 14 2 21] 
#[ 0 14 2 25] 
#[ 0 14 2 29] 
#[ 0 14 2 33] 
#[ 0 14 2 37] 
#[ 0 14 2 41] 
#[ 0 14 2 45] 
#[ 0 14 2 49] 
#[ 0 14 2 53] 
#[ 0 14 0 69] 
#[ 0 14 0 73] 
#[ 1 162 4 73] 
#[ 1 162 4 77] 
#[ 1 162 4 81] 
#[ 1 162 4 85] 
#[ 1 162 4 89] 
#[ 1 162 4 93] 
#[ 1 162 2 74 4 97] 
#[ 1 162 2 74 4 101] 
#[ 1 162 2 74 4 105] 
#[ 1 162 2 74 4 109] 
#[ 1 162 2 74 4 113] 
#[ 2 74 5 173] 
#[ 0 162 3 225] 
#[ 2 94 4 41] 
#[ 2 94 4 45] 
#[ 2 94 4 49] 
#[ 2 94 4 53] 
#[ 2 94 4 57] 
#[ 2 94 4 61] 
#[ 2 94 4 65] 
#[ 2 94 4 69] 
#[ 2 94 4 73] 
#[ 2 94 4 77] 
#[ 2 94 4 81] 
#[ 2 94 4 85] 
#[ 2 94 4 89] 
#[ 2 94 4 93] 
#[ 2 94 4 97] 
#[ 2 94 4 101] 
#[ 2 94 4 105] 
#[ 2 94 4 109] 
#[ 2 94 4 113] 
#[ 2 98 4 41] 
#[ 2 98 4 45] 
#[ 2 98 4 49] 
#[ 2 98 4 53] 
#[ 2 98 4 57] 
#[ 2 98 4 61] 
#[ 2 98 4 65] 
#[ 2 98 4 69] 
#[ 2 98 4 73] 
#[ 2 98 4 77] 
#[ 2 98 4 81] 
#[ 2 98 4 85] 
#[ 2 98 4 89] 
#[ 2 98 4 93] 
#[ 2 98 4 97] 
#[ 2 98 4 101] 
#[ 2 98 4 105] 
#[ 2 98 4 109] 
#[ 2 98 4 113] 
#[ 2 102 4 41] 
#[ 2 102 4 45] 
#[ 2 102 4 49] 
#[ 2 102 4 53] 
#[ 2 102 4 57] 
#[ 2 102 4 61] 
#[ 2 102 4 65] 
#[ 2 102 4 69] 
#[ 2 102 4 73] 
#[ 2 102 4 77] 
#[ 2 102 4 81] 
#[ 2 102 4 85] 
#[ 2 102 4 89] 
#[ 2 102 4 93] 
#[ 2 102 4 97] 
#[ 2 102 4 101] 
#[ 2 102 4 105] 
#[ 2 102 4 109] 
#[ 2 102 4 113] 
#[ 2 106 4 41] 
#[ 2 106 4 45] 
#[ 2 106 4 49] 
#[ 2 106 4 53] 
#[ 2 106 4 57] 
#[ 2 106 4 61] 
#[ 2 106 4 65] 
#[ 2 106 4 69] 
#[ 2 106 4 73] 
#[ 2 106 4 77] 
#[ 2 106 4 81] 
#[ 2 106 4 85] 
#[ 2 106 4 89] 
#[ 2 106 4 93] 
#[ 2 106 4 97] 
#[ 2 106 4 101] 
#[ 2 106 4 105] 
#[ 2 106 4 109] 
#[ 2 106 4 113] 
#[ 1 130 4 25] 
#[ 1 130 4 29] 
#[ 2 110 4 41] 
#[ 2 110 4 45] 
#[ 2 110 4 49] 
#[ 2 110 4 53] 
#[ 2 110 4 57] 
#[ 2 110 4 61] 
#[ 2 110 4 65] 
#[ 2 110 4 69] 
#[ 2 110 4 73] 
#[ 2 110 4 77] 
#[ 2 110 4 81] 
#[ 2 110 4 85] 
#[ 2 110 4 89] 
#[ 2 110 4 93] 
#[ 2 110 4 97] 
#[ 2 110 4 101] 
#[ 2 110 4 105] 
#[ 2 110 4 109] 
#[ 2 110 4 113] 
#[ 2 114 4 41] 
#[ 2 114 4 45] 
#[ 2 114 4 49] 
#[ 2 114 4 53] 
#[ 2 114 4 57] 
#[ 2 114 4 61] 
#[ 2 114 4 65] 
#[ 2 114 4 69] 
#[ 2 114 4 73] 
#[ 2 114 4 77] 
#[ 2 114 4 81] 
#[ 2 114 4 85] 
#[ 2 114 4 89] 
#[ 2 114 4 93] 
#[ 2 114 4 97] 
#[ 2 114 4 101] 
#[ 2 114 4 105] 
#[ 2 114 4 109] 
#[ 2 114 4 113] 
#[ 2 118 4 41] 
#[ 2 118 4 45] 
#[ 2 118 4 49] 
#[ 2 118 4 53] 
#[ 2 118 4 57] 
#[ 2 118 4 61] 
#[ 2 118 4 65] 
#[ 2 118 4 69] 
#[ 2 118 4 73] 
#[ 2 118 4 77] 
#[ 2 118 4 81] 
#[ 2 118 4 85] 
#[ 2 118 4 89] 
#[ 2 118 4 93] 
#[ 2 118 4 97] 
#[ 2 118 4 101] 
#[ 2 118 4 105] 
#[ 2 118 4 109] 
#[ 2 118 4 113] 
#[ 2 182 6 165] 
#[ 2 226 4 97] 
#[ 2 226 4 101] 
#[ 2 226 4 105] 
#[ 2 226 4 109] 
#[ 2 226 4 113] 
#[ 2 230 4 97] 
#[ 2 230 4 101] 
#[ 2 230 4 105] 
#[ 2 230 4 109] 
#[ 2 230 4 113] 
#[ 0 94 6 189] 
#[ 2 74 6 205] 
#[ 1 173 2 74] 
#[ 0 6 1 241] 
#[ 2 254 3 21] 
#[ 1 233 2 254] 
#[ 0 249 2 254] 
#[ 2 254 3 25] 
#[ 2 254 3 29] 
#[ 2 254 3 33] 
#[ 0 253 2 254] 
#[ 1 1 2 254] 
#[ 1 5 2 254] 
#[ 2 254 3 37] 
#[ 2 254 3 41] 
#[ 0 93 2 254] 
#[ 2 254 3 45] 
#[ 2 254 3 49] 
#[ 0 97 2 254] 
#[ 2 254 3 53] 
#[ 2 254 3 57] 
#[ 2 254 3 61] 
#[ 0 101 2 254] 
#[ 1 237 2 254] 
#[ 2 254 3 65] 
#[ 1 245 2 254] 
#[ 1 173 2 254] 
#[ 1 249 2 254] 
#[ 2 1 2 254] 
#[ 2 5 2 254] 
#[ 2 9 2 254] 
#[ 2 13 2 254] 
#[ 2 17 2 254] 
#[ 2 21 2 254] 
#[ 2 25 2 254] 
#[ 2 29 2 254] 
#[ 2 33 2 254] 
#[ 2 37 2 254] 
#[ 2 41 2 254] 
#[ 2 45 2 254] 
#[ 2 49 2 254] 
#[ 2 53 2 254] 
#[ 0 69 2 254] 
#[ 0 73 2 254] 
#[ 0 153 0 154] 
#[ 1 18 2 150] 
#[ 3 66 4 41] 
#[ 3 66 4 45] 
#[ 3 66 4 49] 
#[ 3 66 4 53] 
#[ 3 66 4 57] 
#[ 3 66 4 61] 
#[ 3 66 4 65] 
#[ 3 66 4 69] 
#[ 3 66 4 73] 
#[ 3 66 4 77] 
#[ 3 66 4 81] 
#[ 3 66 4 85] 
#[ 3 66 4 89] 
#[ 3 66 4 93] 
#[ 3 66 4 97] 
#[ 3 66 4 101] 
#[ 3 66 4 105] 
#[ 3 66 4 109] 
#[ 3 66 4 113] 
#[ 3 70 4 41] 
#[ 3 70 4 45] 
#[ 3 70 4 49] 
#[ 3 70 4 53] 
#[ 3 70 4 57] 
#[ 3 70 4 61] 
#[ 3 70 4 65] 
#[ 3 70 4 69] 
#[ 3 70 4 73] 
#[ 3 70 4 77] 
#[ 3 70 4 81] 
#[ 3 70 4 85] 
#[ 3 70 4 89] 
#[ 3 70 4 93] 
#[ 3 70 4 97] 
#[ 3 70 4 101] 
#[ 3 70 4 105] 
#[ 3 70 4 109] 
#[ 3 70 4 113] 
#[ 3 74 4 41] 
#[ 3 74 4 45] 
#[ 3 74 4 49] 
#[ 3 74 4 53] 
#[ 3 74 4 57] 
#[ 3 74 4 61] 
#[ 3 74 4 65] 
#[ 3 74 4 69] 
#[ 3 74 4 73] 
#[ 3 74 4 77] 
#[ 3 74 4 81] 
#[ 3 74 4 85] 
#[ 3 74 4 89] 
#[ 3 74 4 93] 
#[ 3 74 4 97] 
#[ 3 74 4 101] 
#[ 3 74 4 105] 
#[ 3 74 4 109] 
#[ 3 74 4 113] 
#[ 3 78 4 41] 
#[ 3 78 4 45] 
#[ 3 78 4 49] 
#[ 3 78 4 53] 
#[ 3 78 4 57] 
#[ 3 78 4 61] 
#[ 3 78 4 65] 
#[ 3 78 4 69] 
#[ 3 78 4 73] 
#[ 3 78 4 77] 
#[ 3 78 4 81] 
#[ 3 78 4 85] 
#[ 3 78 4 89] 
#[ 3 78 4 93] 
#[ 3 78 4 97] 
#[ 3 78 4 101] 
#[ 3 78 4 105] 
#[ 3 78 4 109] 
#[ 3 78 4 113] 
#[ 3 82 4 41] 
#[ 3 82 4 45] 
#[ 3 82 4 49] 
#[ 3 82 4 53] 
#[ 3 82 4 57] 
#[ 3 82 4 61] 
#[ 3 82 4 65] 
#[ 3 82 4 69] 
#[ 3 82 4 73] 
#[ 3 82 4 77] 
#[ 3 82 4 81] 
#[ 3 82 4 85] 
#[ 3 82 4 89] 
#[ 3 82 4 93] 
#[ 3 82 4 97] 
#[ 3 82 4 101] 
#[ 3 82 4 105] 
#[ 3 82 4 109] 
#[ 3 82 4 113] 
#[ 3 86 4 41] 
#[ 3 86 4 45] 
#[ 3 86 4 49] 
#[ 3 86 4 53] 
#[ 3 86 4 57] 
#[ 3 86 4 61] 
#[ 3 86 4 65] 
#[ 3 86 4 69] 
#[ 3 86 4 73] 
#[ 3 86 4 77] 
#[ 3 86 4 81] 
#[ 3 86 4 85] 
#[ 3 86 4 89] 
#[ 3 86 4 93] 
#[ 3 86 4 97] 
#[ 3 86 4 101] 
#[ 3 86 4 105] 
#[ 3 86 4 109] 
#[ 3 86 4 113] 
#[ 3 90 4 41] 
#[ 3 90 4 45] 
#[ 3 90 4 49] 
#[ 3 90 4 53] 
#[ 3 90 4 57] 
#[ 3 90 4 61] 
#[ 3 90 4 65] 
#[ 3 90 4 69] 
#[ 3 90 4 73] 
#[ 3 90 4 77] 
#[ 3 90 4 81] 
#[ 3 90 4 85] 
#[ 3 90 4 89] 
#[ 3 90 4 93] 
#[ 3 90 4 97] 
#[ 3 90 4 101] 
#[ 3 90 4 105] 
#[ 3 90 4 109] 
#[ 3 90 4 113] 
#[ 3 94 4 41] 
#[ 3 94 4 45] 
#[ 3 94 4 49] 
#[ 3 94 4 53] 
#[ 3 94 4 57] 
#[ 3 94 4 61] 
#[ 3 94 4 65] 
#[ 3 94 4 69] 
#[ 3 94 4 73] 
#[ 3 94 4 77] 
#[ 3 94 4 81] 
#[ 3 94 4 85] 
#[ 3 94 4 89] 
#[ 3 94 4 93] 
#[ 3 94 4 97] 
#[ 3 94 4 101] 
#[ 3 94 4 105] 
#[ 3 94 4 109] 
#[ 3 94 4 113] 
#[ 3 98 4 41] 
#[ 3 98 4 45] 
#[ 3 98 4 49] 
#[ 3 98 4 53] 
#[ 3 98 4 57] 
#[ 3 98 4 61] 
#[ 3 98 4 65] 
#[ 3 98 4 69] 
#[ 3 98 4 73] 
#[ 3 98 4 77] 
#[ 3 98 4 81] 
#[ 3 98 4 85] 
#[ 3 98 4 89] 
#[ 3 98 4 93] 
#[ 3 98 4 97] 
#[ 3 98 4 101] 
#[ 3 98 4 105] 
#[ 3 98 4 109] 
#[ 3 98 4 113] 
#[ 3 102 4 41] 
#[ 3 102 4 45] 
#[ 3 102 4 49] 
#[ 3 102 4 53] 
#[ 3 102 4 57] 
#[ 3 102 4 61] 
#[ 3 102 4 65] 
#[ 3 102 4 69] 
#[ 3 102 4 73] 
#[ 3 102 4 77] 
#[ 3 102 4 81] 
#[ 3 102 4 85] 
#[ 3 102 4 89] 
#[ 3 102 4 93] 
#[ 3 102 4 97] 
#[ 3 102 4 101] 
#[ 3 102 4 105] 
#[ 3 102 4 109] 
#[ 3 102 4 113] 
#[ 3 106 4 41] 
#[ 3 106 4 45] 
#[ 3 106 4 49] 
#[ 3 106 4 53] 
#[ 3 106 4 57] 
#[ 3 106 4 61] 
#[ 3 106 4 65] 
#[ 3 106 4 69] 
#[ 3 106 4 73] 
#[ 3 106 4 77] 
#[ 3 106 4 81] 
#[ 3 106 4 85] 
#[ 3 106 4 89] 
#[ 3 106 4 93] 
#[ 3 106 4 97] 
#[ 3 106 4 101] 
#[ 3 106 4 105] 
#[ 3 106 4 109] 
#[ 3 106 4 113] 
#[ 3 110 4 41] 
#[ 3 110 4 45] 
#[ 3 110 4 49] 
#[ 3 110 4 53] 
#[ 3 110 4 57] 
#[ 3 110 4 61] 
#[ 3 110 4 65] 
#[ 3 110 4 69] 
#[ 3 110 4 73] 
#[ 3 110 4 77] 
#[ 3 110 4 81] 
#[ 3 110 4 85] 
#[ 3 110 4 89] 
#[ 3 110 4 93] 
#[ 3 110 4 97] 
#[ 3 110 4 101] 
#[ 3 110 4 105] 
#[ 3 110 4 109] 
#[ 3 110 4 113] 
#[ 3 114 4 41] 
#[ 3 114 4 45] 
#[ 3 114 4 49] 
#[ 3 114 4 53] 
#[ 3 114 4 57] 
#[ 3 114 4 61] 
#[ 3 114 4 65] 
#[ 3 114 4 69] 
#[ 3 114 4 73] 
#[ 3 114 4 77] 
#[ 3 114 4 81] 
#[ 3 114 4 85] 
#[ 3 114 4 89] 
#[ 3 114 4 93] 
#[ 3 114 4 97] 
#[ 3 114 4 101] 
#[ 3 114 4 105] 
#[ 3 114 4 109] 
#[ 3 114 4 113] 
#[ 3 118 4 41] 
#[ 3 118 4 45] 
#[ 3 118 4 49] 
#[ 3 118 4 53] 
#[ 3 118 4 57] 
#[ 3 118 4 61] 
#[ 3 118 4 65] 
#[ 3 118 4 69] 
#[ 3 118 4 73] 
#[ 3 118 4 77] 
#[ 3 118 4 81] 
#[ 3 118 4 85] 
#[ 3 118 4 89] 
#[ 3 118 4 93] 
#[ 3 118 4 97] 
#[ 3 118 4 101] 
#[ 3 118 4 105] 
#[ 3 118 4 109] 
#[ 3 118 4 113] 
#[ 3 122 4 41] 
#[ 3 122 4 45] 
#[ 3 122 4 49] 
#[ 3 122 4 53] 
#[ 3 122 4 57] 
#[ 3 122 4 61] 
#[ 3 122 4 65] 
#[ 3 122 4 69] 
#[ 3 122 4 73] 
#[ 3 122 4 77] 
#[ 3 122 4 81] 
#[ 3 122 4 85] 
#[ 3 122 4 89] 
#[ 3 122 4 93] 
#[ 3 122 4 97] 
#[ 3 122 4 101] 
#[ 3 122 4 105] 
#[ 3 122 4 109] 
#[ 3 122 4 113] 
#[ 3 126 4 41] 
#[ 3 126 4 45] 
#[ 3 126 4 49] 
#[ 3 126 4 53] 
#[ 3 126 4 57] 
#[ 3 126 4 61] 
#[ 3 126 4 65] 
#[ 3 126 4 69] 
#[ 3 126 4 73] 
#[ 3 126 4 77] 
#[ 3 126 4 81] 
#[ 3 126 4 85] 
#[ 3 126 4 89] 
#[ 3 126 4 93] 
#[ 3 126 4 97] 
#[ 3 126 4 101] 
#[ 3 126 4 105] 
#[ 3 126 4 109] 
#[ 3 126 4 113] 
#[ 3 130 4 41] 
#[ 3 130 4 45] 
#[ 3 130 4 49] 
#[ 3 130 4 53] 
#[ 3 130 4 57] 
#[ 3 130 4 61] 
#[ 3 130 4 65] 
#[ 3 130 4 69] 
#[ 3 130 4 73] 
#[ 3 130 4 77] 
#[ 3 130 4 81] 
#[ 3 130 4 85] 
#[ 3 130 4 89] 
#[ 3 130 4 93] 
#[ 3 130 4 97] 
#[ 3 130 4 101] 
#[ 3 130 4 105] 
#[ 3 130 4 109] 
#[ 3 130 4 113] 
#[ 3 134 4 41] 
#[ 3 134 4 45] 
#[ 3 134 4 49] 
#[ 3 134 4 53] 
#[ 3 134 4 57] 
#[ 3 134 4 61] 
#[ 3 134 4 65] 
#[ 3 134 4 69] 
#[ 3 134 4 73] 
#[ 3 134 4 77] 
#[ 3 134 4 81] 
#[ 3 134 4 85] 
#[ 3 134 4 89] 
#[ 3 134 4 93] 
#[ 3 134 4 97] 
#[ 3 134 4 101] 
#[ 3 134 4 105] 
#[ 3 134 4 109] 
#[ 3 134 4 113] 
#[ 3 138 4 41] 
#[ 3 138 4 45] 
#[ 3 138 4 49] 
#[ 3 138 4 53] 
#[ 3 138 4 57] 
#[ 3 138 4 61] 
#[ 3 138 4 65] 
#[ 3 138 4 69] 
#[ 3 138 4 73] 
#[ 3 138 4 77] 
#[ 3 138 4 81] 
#[ 3 138 4 85] 
#[ 3 138 4 89] 
#[ 3 138 4 93] 
#[ 3 138 4 97] 
#[ 3 138 4 101] 
#[ 3 138 4 105] 
#[ 3 138 4 109] 
#[ 3 138 4 113] 
#[ 3 182 7 209] 
#[ 3 190 7 209] 
#[ 0 6 4 97] 
#[ 0 6 4 101] 
#[ 0 6 4 105] 
#[ 0 6 4 109] 
#[ 0 6 4 113] 
#[ 4 46 4 97] 
#[ 4 46 4 101] 
#[ 4 46 4 105] 
#[ 4 46 4 109] 
#[ 4 46 4 113] 
#[ 0 245 4 54] 
#[ 0 249 4 54] 
#[ 0 253 4 54] 
#[ 1 1 4 54] 
#[ 1 5 4 54] 
#[ 1 105 4 54] 
#[ 1 181 4 54] 
#[ 1 21 4 54] 
#[ 1 29 4 54] 
#[ 1 33 4 54] 
#[ 4 118 8 169] 
#[ 4 73 4 130] 
#[ 4 77 4 130] 
#[ 4 81 4 130] 
#[ 4 85 4 130] 
#[ 4 89 4 130] 
#[ 4 93 4 130] 
#[ 4 97 4 130] 
#[ 4 101 4 130] 
#[ 4 105 4 130] 
#[ 4 109 4 130] 
#[ 4 113 4 130]
	).
]

{ #category : #'generated-accessing' }
GoParser class >> cacheId [
	^'2024-10-13T20:54:14.223546-07:00'
]

{ #category : #generated }
GoParser class >> definitionComment [
"/*
 [The ""BSD licence""] Copyright (c) 2017 Sasa Coh, Michal Blotniak
 Copyright (c) 2019 Ivan Kochurkin, kvanttt@gmail.com, Positive Technologies 
 Copyright (c) 2019 Dmitry Rassadin, flipparassa@gmail.com,Positive Technologies All rights reserved. 
 Copyright (c) 2021 Martin Mirchev, mirchevmartin2203@gmail.com
 Copyright (c) 2023 Dmitry Litovchenko, i@dlitovchenko.ru

 Redistribution and use in source and binary forms, with or without modification, are permitted
 provided that the following conditions are met: 1. Redistributions of source code must retain the
 above copyright notice, this list of conditions and the following disclaimer. 2. Redistributions in
 binary form must reproduce the above copyright notice, this list of conditions and the following
 disclaimer in the documentation and/or other materials provided with the distribution. 3. The name
 of the author may not be used to endorse or promote products derived from this software without
 specific prior written permission.

 THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,
 BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * A Go grammar for ANTLR 4 derived from the Go Language Specification https://golang.org/ref/spec
 */

# $antlr-format alignTrailingComments true, columnLimit 150, minEmptyLines 1, maxEmptyLinesToKeep 1, reflowComments false, useTab false
# $antlr-format allowShortRulesOnASingleLine false, allowShortBlocksOnASingleLine true, alignSemicolons hanging, alignColons hanging

%glr;
#%annotate_tokens;
%root Program;
%prefix Go;
%suffix Node;
%start sourceFile;

<BREAK>       : break /*-> mode(NLSEMI);*/;
<DEFAULT>     : default;
<FUNC>        : func;
<INTERFACE>   : interface;
<SELECT>      : select;
<CASE>        : case;
<DEFER>       : defer;
<GO>          : go;
<MAP>         : map;
<STRUCT>      : struct;
<CHAN>        : chan;
<ELSE>        : else;
<GOTO>        : goto;
<PACKAGE>     : package;
<SWITCH>      : switch;
<CONST>       : const;
<FALLTHROUGH> : fallthrough /*-> mode(NLSEMI);*/;
<IF>          : if;
<RANGE>       : range;
<TYPE>        : type;
<CONTINUE>    : continue /*-> mode(NLSEMI);*/;
<FOR>         : for;
<IMPORT>      : import;
<RETURN>      : return /*-> mode(NLSEMI);*/;
<VAR>         : var;

<NIL_LIT>: nil /*-> mode(NLSEMI);*/;

<IDENTIFIER>: <LETTER> (<LETTER> | <UNICODE_DIGIT>)*;

# Punctuation

<L_PAREN>        : \(;
<R_PAREN>        : \) /*-> mode(NLSEMI);*/;
<L_CURLY>        : \{;
<R_CURLY>        : \} /*-> mode(NLSEMI);*/;
<L_BRACKET>      : \[;
<R_BRACKET>      : \] /*-> mode(NLSEMI);*/;
<ASSIGN>         : \=;
<COMMA>          : \,;
<SEMI>           : \;;
<COLON>          : \:;
<DOT>            : \.;
<PLUS_PLUS>      : \+\+ /*-> mode(NLSEMI);*/;
<MINUS_MINUS>    : \-\- /*-> mode(NLSEMI);*/;
<DECLARE_ASSIGN> : \:\=;
<ELLIPSIS>       : \.\.\.;

# Logical

<LOGICAL_OR>  : \|\|;
<LOGICAL_AND> : \&\&;

# Relation operators

<EQUALS>            : \=\=;
<NOT_EQUALS>        : \!\=;
<LESS>              : \<;
<LESS_OR_EQUALS>    : \<\=;
<GREATER>           : \>;
<GREATER_OR_EQUALS> : \>\=;

# Arithmetic operators

<OR>         : \|;
<DIV>        : \/;
<MOD>        : \%;
<LSHIFT>     : \<\<;
<RSHIFT>     : \>\>;
<BIT_CLEAR>  : \&\^;
<UNDERLYING> : \~;

# Unary operators

<EXCLAMATION>: \!;

# Mixed operators

<PLUS>      : \+;
<MINUS>     : \-;
<CARET>     : \^;
<STAR>      : \*;
<AMPERSAND> : \&;
<RECEIVE>   : \<\-;

# Number literals

<DECIMAL_LIT> : (0 | [1-9] (_? [0-9])*)   /*-> mode(NLSEMI);*/;
<BINARY_LIT>  : 0 [bB] (_? <BIN_DIGIT>)+    /*-> mode(NLSEMI);*/;
<OCTAL_LIT>   : 0 [oO]? (_? <OCTAL_DIGIT>)+ /*-> mode(NLSEMI);*/;
<HEX_LIT>     : 0 [xX] (_? <HEX_DIGIT>)+    /*-> mode(NLSEMI);*/;

<FLOAT_LIT>: (<DECIMAL_FLOAT_LIT> | <HEX_FLOAT_LIT>) /*-> mode(NLSEMI);*/;

<DECIMAL_FLOAT_LIT>: <DECIMALS> (\. <DECIMALS>? <EXPONENT>? | <EXPONENT>) | \. <DECIMALS> <EXPONENT>?;

<HEX_FLOAT_LIT>: 0 [xX] <HEX_MANTISSA> <HEX_EXPONENT>;

<HEX_MANTISSA>:
    (_? <HEX_DIGIT>)+ (\. ( _? <HEX_DIGIT>)*)?
    | \. <HEX_DIGIT> (_? <HEX_DIGIT>)*
;

<HEX_EXPONENT>: [pP] [\+\-]? <DECIMALS>;

<IMAGINARY_LIT>: (<DECIMAL_LIT> | <BINARY_LIT> | <OCTAL_LIT> | <HEX_LIT> | <FLOAT_LIT>) i /*-> mode(NLSEMI);*/;

# Rune literals

<RUNE>: \' (<UNICODE_VALUE> | <BYTE_VALUE>) \'; #: '\'' (~[\n\\] | ESCAPED_VALUE) '\'';

<RUNE_LIT>: <RUNE> /*-> mode(NLSEMI);*/;

<BYTE_VALUE>: <OCTAL_BYTE_VALUE> | <HEX_BYTE_VALUE>;

<OCTAL_BYTE_VALUE>: \\ <OCTAL_DIGIT> <OCTAL_DIGIT> <OCTAL_DIGIT>;

<HEX_BYTE_VALUE>: \\ x <HEX_DIGIT> <HEX_DIGIT>;

<LITTLE_U_VALUE>: \\ u <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT>;

<BIG_U_VALUE>:
    \\ U <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT>
;

# String literals

<RAW_STRING_LIT>         : \` [^\`]* \`                     /*-> mode(NLSEMI);*/;
<INTERPRETED_STRING_LIT> : \"" ([^\""\\] | <ESCAPED_VALUE>)* \"" /*-> mode(NLSEMI);*/;

# Hidden tokens

<whitespace>: [ \t]+;
<COMMENT>      : \/\* .*/* TODO: ? */ \*\/ /*-> channel(HIDDEN);*/;
<TERMINATOR>   : [\r\n]+       /*-> channel(HIDDEN);*/;
<LINE_COMMENT> : \/\/ [^\r\n]* /*-> channel(HIDDEN);*/;

<UNICODE_VALUE>: [^\r\n\'] | <LITTLE_U_VALUE> | <BIG_U_VALUE> | <ESCAPED_VALUE>;

# Fragments

<ESCAPED_VALUE>:
    \\ (
        u <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT>
        | U <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT>
        | [abfnrtv\\\'\""]
        | <OCTAL_DIGIT> <OCTAL_DIGIT> <OCTAL_DIGIT>
        | x <HEX_DIGIT> <HEX_DIGIT>
    )
;

<DECIMALS>: [0-9] (_? [0-9])*;

<OCTAL_DIGIT>: [0-7];

<HEX_DIGIT>: [0-9a-fA-F];

<BIN_DIGIT>: [01];

<EXPONENT>: (e | E) [+\-]? <DECIMALS>;

<LETTER>: \w;

#[\p{Nd}] matches a digit zero through nine in any script except ideographic scripts
<UNICODE_DIGIT>: \d;
#[\p{L}] matches any kind of letter from any language
<UNICODE_LETTER>: [\p\{L\}];
<BLOCK_COMMENT>
	: (\/\* [^\*]* \*+ ([^\/\*] [^\*]* \*+)* \/)
	;
<comment>
	: <BLOCK_COMMENT> | <LINE_COMMENT>
	;
<NEWLINE>
	: [\n\r]+
	;


#
# Treat whitespace as normal
#NLSEMI <WS_NLSEMI>: [\ \t]+ /*-> channel(HIDDEN);*/;
# Ignore any comments that only span one line
#NLSEMI <COMMENT_NLSEMI>      : \/\* [^\r\n]*/* TODO: ? */ \*\/ /*-> channel(HIDDEN);*/;
#NLSEMI <LINE_COMMENT_NLSEMI> : \/\/ [^\r\n]*       /*-> channel(HIDDEN);*/;
# Emit an EOS token for any newlines, semicolon, multiline comments or the EOF and 
#return to normal lexing
#NLSEMI <EOS>: ([\r\n]+ | \; | \/\* .*/* TODO: ? */ \*\/ | ) /*-> mode(DEFAULT_MODE);*/;

# Did not find an EOS, so go back to normal lexing
# OTHER: /*-> mode(DEFAULT_MODE), channel(HIDDEN);? '*/' | EOF) /*-> mode(DEFAULT_MODE);*/;*/;
# Did not find an EOS, so go back to normal lexing
# OTHER: /*/*-> mode(DEFAULT_MODE), channel(HIDDEN);? '*/' | EOF) /*-> mode(DEFAULT_MODE);*/;*/;*/;
# Did not find an EOS, so go back to normal lexing
# OTHER: /*-> mode(DEFAULT_MODE), channel(HIDDEN)/;*' ~[\r\n]*? '*/' /*/*/*/*-> // channel(HIDDEN);*/;*/;*/;*/;*/;*/;

#LINE_COMMENT_NLSEMI : '//' ~[\r\n]*       /*/*/*/*/*/*-> channel(HIDDEN);*/;*/;*/;*/;*/;*/;
# Emit an EOS token for any newlines, semicolon, multiline comments or the EOF and 
#return to normal lexing
#NLSEMI <EOS>: ([\r\n]+ | \; | \/\* .*/* TODO: ? */ \*\/ | ) /*-> mode(DEFAULT_MODE); */;
# Did not find an EOS, so go back to normal lexing
#NLSEMI <OTHER>: /*-> mode(DEFAULT_MODE), channel(HIDDEN); */;
/*
interfaceType
    : INTERFACE L_CURLY ((methodSpec | typeElement) eos)* R_CURLY
    ;

sliceType
    : L_BRACKET R_BRACKET elementType
    ;

// It's possible to replace `type` with more restricted typeLit list and also pay attention to nil maps
mapType
    : MAP L_BRACKET type_ R_BRACKET elementType
    ;

channelType
    : (CHAN | CHAN RECEIVE | RECEIVE CHAN) elementType
    ;

methodSpec
    : IDENTIFIER parameters result
    | IDENTIFIER parameters
    ;

functionType
    : FUNC signature
    ;

signature
    : parameters result?
    ;

result
    : parameters
    | type_
    ;

parameters
    : L_PAREN (parameterDecl (COMMA parameterDecl)* COMMA?)? R_PAREN
    ;

parameterDecl
    : identifierList? ELLIPSIS? type_
    ;

expression
    : primaryExpr
    | unary_op = (PLUS | MINUS | EXCLAMATION | CARET | STAR | AMPERSAND | RECEIVE) expression
    | expression mul_op = (STAR | DIV | MOD | LSHIFT | RSHIFT | AMPERSAND | BIT_CLEAR) expression
    | expression add_op = (PLUS | MINUS | OR | CARET) expression
    | expression rel_op = (
        EQUALS
        | NOT_EQUALS
        | LESS
        | LESS_OR_EQUALS
        | GREATER
        | GREATER_OR_EQUALS
    ) expression
    | expression LOGICAL_AND expression
    | expression LOGICAL_OR expression
    ;

primaryExpr
    : operand
    | conversion
    | methodExpr
    | primaryExpr ( DOT IDENTIFIER | index | slice_ | typeAssertion | arguments)
    ;

conversion
    : type_ L_PAREN expression COMMA? R_PAREN
    ;

operand
    : literal
    | operandName typeArgs?
    | L_PAREN expression R_PAREN
    ;

literal
    : basicLit
    | compositeLit
    | functionLit
    ;

basicLit
    : NIL_LIT
    | integer
    | string_
    | FLOAT_LIT
    ;

integer
    : DECIMAL_LIT
    | BINARY_LIT
    | OCTAL_LIT
    | HEX_LIT
    | IMAGINARY_LIT
    | RUNE_LIT
    ;

operandName
    : IDENTIFIER
    ;

qualifiedIdent
    : IDENTIFIER DOT IDENTIFIER
    ;

compositeLit
    : literalType literalValue
    ;

literalType
    : structType
    | arrayType
    | L_BRACKET ELLIPSIS R_BRACKET elementType
    | sliceType
    | mapType
    | typeName typeArgs?
    ;

literalValue
    : L_CURLY (elementList COMMA?)? R_CURLY
    ;

elementList
    : keyedElement (COMMA keyedElement)*
    ;

keyedElement
    : (key COLON)? element
    ;

key
    : expression
    | literalValue
    ;

element
    : expression
    | literalValue
    ;

structType
    : STRUCT L_CURLY (fieldDecl eos)* R_CURLY
    ;

fieldDecl
    : (identifierList type_ | embeddedField) tag = string_?
    ;

string_
    : RAW_STRING_LIT
    | INTERPRETED_STRING_LIT
    ;

embeddedField
    : STAR? typeName typeArgs?
    ;

functionLit
    : FUNC signature block
    ; // function

index
    : L_BRACKET expression R_BRACKET
    ;

slice_
    : L_BRACKET (expression? COLON expression? | expression? COLON expression COLON expression) R_BRACKET
    ;

typeAssertion
    : DOT L_PAREN type_ R_PAREN
    ;

arguments
    : L_PAREN ((expressionList | type_ (COMMA expressionList)?) ELLIPSIS? COMMA?)? R_PAREN
    ;

methodExpr
    : type_ DOT IDENTIFIER
    ;
*/
/* 
eos
    : SEMI
    | EOF
    | EOS
    | {this.closingBracket()}?
    ;
    */


sourceFile
    : packageClause 'package' eos (importDecl 'import' eos)* ((functionDecl 'functionDeclaration' | methodDecl 'methodDeclaration' | declaration) eos)* {{}}
    ;

packageClause
    : <PACKAGE> 'packageName' <IDENTIFIER> {{}}
    ;

importDecl
    : <IMPORT> (importSpec 'import' | (<L_PAREN> eos (importSpec 'import' eos)* <R_PAREN>)) {{}}
    ;

importSpec
    : (<DOT> 'name' | <IDENTIFIER> 'name')?  importPath 'path' {{}}
    ;

importPath
    : string_ 'string' {{}}
    ;

declaration
    : constDecl
    | typeDecl
    | varDecl
    ;

constDecl
    : <CONST> (constSpec | <L_PAREN> (constSpec eos)* <R_PAREN>)
    ;

constSpec
    : identifierList (type_? <ASSIGN> expressionList)?
    ;

identifierList
    : <IDENTIFIER> 'ident' (<COMMA> <IDENTIFIER> 'ident')* {{}}
    ;

expressionList
    : expression (<COMMA> expression)*
    ;

typeDecl
    : <TYPE> (typeSpec | <L_PAREN> (typeSpec eos)* <R_PAREN>)
    ;

typeSpec
    : aliasDecl
    | typeDef
    ;

aliasDecl
    : <IDENTIFIER> <ASSIGN> type_
    ;

typeDef
    : <IDENTIFIER> typeParameters? type_
    ;

typeParameters
    : <L_BRACKET> typeParameterDecl (<COMMA> typeParameterDecl)* <R_BRACKET>
    ;

typeParameterDecl
    : identifierList typeElement
    ;

typeElement
    : typeTerm (<OR> typeTerm)*
    ;

typeTerm
    : <UNDERLYING>? type_
    ;

# Function declarations

functionDecl
    : <FUNC> <IDENTIFIER> 'name' typeParameters? signature block? {{}}
    ;

methodDecl
    : <FUNC> receiver 'receiver' <IDENTIFIER> 'name' signature 'signature' block? {{}}
    ;

receiver
    : parameters
    ;

varDecl
    : <VAR> (varSpec | <L_PAREN> (varSpec eos)* <R_PAREN>)
    ;

varSpec
    : identifierList (type_ (<ASSIGN> expressionList)? | <ASSIGN> expressionList)
    ;

block
    : <L_CURLY> statementList? <R_CURLY>
    ;

statementList
    : ((<SEMI>? | eos?) statement eos)+
    ;

statement
    : declaration
    | labeledStmt
    | simpleStmt
    | goStmt
    | returnStmt
    | breakStmt
    | continueStmt
    | gotoStmt
    | fallthroughStmt
    | block
    | ifStmt
    | switchStmt
    | selectStmt
    | forStmt
    | deferStmt
    ;

simpleStmt
    : sendStmt
    | incDecStmt
    | assignment
    | expressionStmt
    | shortVarDecl
    ;

expressionStmt
    : expression
    ;

sendStmt
    : expression 'channel' <RECEIVE> expression
    ;

incDecStmt
    : expression (<PLUS_PLUS> | <MINUS_MINUS>)
    ;

assignment
    : expressionList assign_op expressionList
    ;

assign_op
    : (<PLUS> | <MINUS> | <OR> | <CARET> | <STAR> | <DIV> | <MOD> | <LSHIFT> | <RSHIFT> | <AMPERSAND> | <BIT_CLEAR>)? <ASSIGN>
    ;

shortVarDecl
    : identifierList <DECLARE_ASSIGN> expressionList
    ;

labeledStmt
    : <IDENTIFIER> <COLON> statement?
    ;

returnStmt
    : <RETURN> expressionList?
    ;

breakStmt
    : <BREAK> <IDENTIFIER>?
    ;

continueStmt
    : <CONTINUE> <IDENTIFIER>?
    ;

gotoStmt
    : <GOTO> <IDENTIFIER>
    ;

fallthroughStmt
    : <FALLTHROUGH>
    ;

deferStmt
    : <DEFER> expression
    ;

ifStmt
    : <IF> (expression | eos expression | simpleStmt eos expression) block (<ELSE> (ifStmt | block))?
    ;

switchStmt
    : exprSwitchStmt
    | typeSwitchStmt
    ;

exprSwitchStmt
    : <SWITCH> (expression? | simpleStmt? eos expression?) <L_CURLY> exprCaseClause* <R_CURLY>
    ;

exprCaseClause
    : exprSwitchCase <COLON> statementList?
    ;

exprSwitchCase
    : <CASE> expressionList
    | <DEFAULT>
    ;

typeSwitchStmt
    : <SWITCH> (typeSwitchGuard | eos typeSwitchGuard | simpleStmt eos typeSwitchGuard) <L_CURLY> typeCaseClause* <R_CURLY>
    ;

typeSwitchGuard
    : (<IDENTIFIER> <DECLARE_ASSIGN>)? primaryExpr <DOT> <L_PAREN> <TYPE> <R_PAREN>
    ;

typeCaseClause
    : typeSwitchCase <COLON> statementList?
    ;

typeSwitchCase
    : <CASE> typeList
    | <DEFAULT>
    ;

typeList
    : (type_ 'type' | <NIL_LIT>) (<COMMA> (type_ 'type' | <NIL_LIT>))* {{}}
    ;

selectStmt
    : <SELECT> <L_CURLY> commClause* <R_CURLY>
    ;

commClause
    : commCase <COLON> statementList?
    ;

commCase
    : <CASE> (sendStmt | recvStmt)
    | <DEFAULT>
    ;

recvStmt
    : (expressionList <ASSIGN> | identifierList <DECLARE_ASSIGN>)? expression 'recvExpr'
    ;

forStmt
    : <FOR> (expression? | forClause | rangeClause?) block
    ;

forClause
    : simpleStmt 'initStmt' ? eos expression? eos simpleStmt 'postStmt' ?
    ;

rangeClause
    : (expressionList <ASSIGN> | identifierList <DECLARE_ASSIGN>)? <RANGE> expression
    ;

goStmt
    : <GO> expression
    ;

type_
    : typeName 'name' typeArgs 'args'? {{}}
    | typeLit
    | <L_PAREN> type_ <R_PAREN>
    ;

typeArgs
    : <L_BRACKET> typeList 'typeList' <COMMA>? <R_BRACKET> {{}}
    ;

typeName
    : qualifiedIdent
    | <IDENTIFIER> 'name' {{}}
    ;

typeLit
    : arrayType
    | structType
    | pointerType
    | functionType
    | interfaceType
    | sliceType
    | mapType
    | channelType
    ;

arrayType
    : <L_BRACKET> arrayLength <R_BRACKET> elementType
    ;

arrayLength
    : expression
    ;

elementType
    : type_
    ;

pointerType
    : <STAR> type_
    ;

interfaceType
    : <INTERFACE> <L_CURLY> ((methodSpec | typeElement) eos)* <R_CURLY>
    ;

sliceType
    : <L_BRACKET> <R_BRACKET> elementType
    ;

# It's possible to replace `type` with more restricted typeLit list and also pay attention to nil maps
mapType
    : <MAP> <L_BRACKET> type_ <R_BRACKET> elementType
    ;

channelType
    : (<CHAN> | <CHAN> <RECEIVE> | <RECEIVE> <CHAN>) elementType
    ;

methodSpec
    : <IDENTIFIER> parameters result
    | <IDENTIFIER> parameters
    ;

functionType
    : <FUNC> signature
    ;

signature
    : parameters 'params' result 'res'? {{}}
    ;

result
    : parameters
    | type_
    ;

parameters
    : <L_PAREN> (parameterDecl 'param' (<COMMA> parameterDecl 'param')* <COMMA>?)? <R_PAREN> {{}}
    ;

parameterDecl
    : identifierList 'identifiers' ? <ELLIPSIS>? type_ 'type' {{}}
    ;

expression
    : primaryExpr
    | (<PLUS> | <MINUS> | <EXCLAMATION> | <CARET> | <STAR> | <AMPERSAND> | <RECEIVE> 'unaryOp' ) expression
    | expression (<STAR> | <DIV> | <MOD> | <LSHIFT> | <RSHIFT> | <AMPERSAND> | <BIT_CLEAR> 'mulOp') expression
    | expression (<PLUS> | <MINUS> | <OR> | <CARET> 'addOp') expression
    | expression (
        <EQUALS>
        | <NOT_EQUALS>
        | <LESS>
        | <LESS_OR_EQUALS>
        | <GREATER>
        | <GREATER_OR_EQUALS> 'relOp'
    ) expression
    | expression <LOGICAL_AND> expression
    | expression <LOGICAL_OR> expression
    ;

primaryExpr
    : operand
    | conversion
    | methodExpr
    | primaryExpr ( <DOT> <IDENTIFIER> | index | slice_ | typeAssertion | arguments)
    ;

conversion
    : type_ <L_PAREN> expression <COMMA>? <R_PAREN>
    ;

operand
    : literal
    | operandName typeArgs?
    | <L_PAREN> expression <R_PAREN>
    ;

literal
    : basicLit
    | compositeLit
    | functionLit
    ;

basicLit
    : <NIL_LIT>
    | integer
    | string_
    | <FLOAT_LIT>
    ;

integer
    : <DECIMAL_LIT>
    | <BINARY_LIT>
    | <OCTAL_LIT>
    | <HEX_LIT>
    | <IMAGINARY_LIT>
    | <RUNE_LIT>
    ;

operandName
    : <IDENTIFIER>
    ;

qualifiedIdent
    : <IDENTIFIER> 'first' <DOT> <IDENTIFIER> 'next' {{}}
    ;

compositeLit
    : literalType literalValue
    ;

literalType
    : structType
    | arrayType
    | <L_BRACKET> <ELLIPSIS> <R_BRACKET> elementType
    | sliceType
    | mapType
    | typeName typeArgs?
    ;

literalValue
    : <L_CURLY> <NEWLINE>? (elementList <COMMA>? <NEWLINE>?)? <R_CURLY>
    ;

elementList
    : keyedElement (<COMMA> keyedElement)*
    ;

keyedElement
    : (key <COLON>)? element
    ;

key
    : expression
    | literalValue
    ;

element
    : expression
    | literalValue
    ;

structType
    : <STRUCT> <L_CURLY> (fieldDecl eos)* <R_CURLY>
    ;

fieldDecl
    : (identifierList type_ | embeddedField) string_ 'tag' ?
    ;

string_
    : <RAW_STRING_LIT>
    | <INTERPRETED_STRING_LIT>
    ;

embeddedField
    : <STAR>? typeName typeArgs?
    ;

functionLit
    : <FUNC> signature block
    ; # function

index
    : <L_BRACKET> expression <R_BRACKET>
    ;

slice_
    : <L_BRACKET> (expression? <COLON> expression? | expression? <COLON> expression <COLON> expression) <R_BRACKET>
    ;

typeAssertion
    : <DOT> <L_PAREN> type_ <R_PAREN>
    ;

arguments
    : <L_PAREN> ((expressionList | type_ (<COMMA> expressionList)?) <ELLIPSIS>? <COMMA>?)? <R_PAREN>
    ;

methodExpr
    : type_ <DOT> <IDENTIFIER>
    ;

eos
    : <SEMI>
   | <NEWLINE>?
    ;"
]

{ #category : #generated }
GoParser class >> reduceTable [
^#(
	#(216 0 #nil 20092930 false) 
	#(83 2 #reduceActionForpackageClause1: 11579393 false) 
	#(216 1 #liftFirstValue: 20092929 false) 
	#(216 1 #liftFirstValue: 20092931 false) 
	#(80 0 #reduceActionFor_importDecl__import__eos__1: 11446273 false) 
	#(82 0 #reduceActionFor__functionDecl__functionDeclaration____methodDecl__methodDeclaration____declaration__eos__1: 11473921 false) 
	#(80 2 #reduceActionFor_importDecl__import__eos__2: 11446274 false) 
	#(78 4 #reduceActionForsourceFile1: 11400193 false) 
	#(207 1 #liftFirstValue: 19486721 false) 
	#(207 1 #liftFirstValue: 19486722 false) 
	#(84 2 #reduceActionForimportDecl1: 11650049 false) 
	#(87 1 #reduceActionForimportSpec1: 11767809 false) 
	#(88 1 #reduceActionForimportPath1: 11855873 false) 
	#(82 2 #reduceActionFor__functionDecl__functionDeclaration____methodDecl__methodDeclaration____declaration__eos__2: 11473922 false) 
	#(89 1 #reduceActionFordeclaration1: 11902977 false) 
	#(89 1 #reduceActionFordeclaration2: 11902978 false) 
	#(89 1 #reduceActionFordeclaration3: 11902979 false) 
	#(79 2 #liftFirstValue: 11446273 false) 
	#(87 2 #reduceActionForimportSpec3: 11767811 false) 
	#(86 0 #reduceActionFor_importDecl__import__eos__1: 11715585 false) 
	#(87 2 #reduceActionForimportSpec3: 11767810 false) 
	#(116 1 #liftFirstValue: 12995585 false) 
	#(96 0 #reduceActionFor_importDecl__import__eos__1: 12169217 false) 
	#(92 0 #reduceActionFordeclaration2: 12016641 false) 
	#(90 2 #reduceActionForconstDecl1: 11968513 false) 
	#(93 1 #reduceActionFordeclaration2: 12052481 false) 
	#(102 0 #nil 12321793 false) 
	#(100 2 #liftSecondValue: 12276737 false) 
	#(103 1 #liftFirstValue: 12356609 false) 
	#(103 1 #liftFirstValue: 12356610 false) 
	#(119 0 #reduceActionFordeclaration2: 13071361 false) 
	#(117 2 #reduceActionForvarDecl1: 13029377 false) 
	#(81 2 #reduceActionFor__functionDecl__functionDeclaration____methodDecl__methodDeclaration____declaration__eos_3: 11473923 false) 
	#(81 2 #reduceActionFor__functionDecl__functionDeclaration____methodDecl__methodDeclaration____declaration__eos_1: 11473921 false) 
	#(81 2 #reduceActionFor__functionDecl__functionDeclaration____methodDecl__methodDeclaration____declaration__eos_2: 11473922 false) 
	#(114 3 #reduceActionForfunctionDecl1: 12794881 false) 
	#(179 1 #reduceActionForsignature1: 17169409 false) 
	#(165 1 #reduceActionFortypeName2: 16214018 false) 
	#(181 2 #reduceActionForparameters1: 17276929 false) 
	#(184 1 #reduceActionForparameterDecl1: 17395713 false) 
	#(163 1 #reduceActionFortype_1: 16026625 false) 
	#(163 1 #liftFirstValue: 16026627 false) 
	#(166 1 #reduceActionFordeclaration1: 16283649 false) 
	#(166 1 #reduceActionFordeclaration2: 16283651 false) 
	#(166 1 #reduceActionFordeclaration2: 16283653 false) 
	#(166 1 #reduceActionFordeclaration2: 16283654 false) 
	#(166 1 #reduceActionFordeclaration2: 16283655 false) 
	#(166 1 #reduceActionFordeclaration2: 16283656 false) 
	#(166 1 #reduceActionFordeclaration2: 16283652 false) 
	#(183 0 #reduceActionFor_importDecl__import__eos__1: 17328129 false) 
	#(165 1 #liftFirstValue: 16214017 false) 
	#(166 1 #reduceActionFortypeLit2: 16283650 false) 
	#(94 2 #reduceActionForidentifierList1: 12126209 false) 
	#(105 2 #liftSecondValue: 12455937 false) 
	#(120 2 #reduceActionFordeclaration2: 13105153 false) 
	#(84 5 #reduceActionForimportDecl2: 11650050 false) 
	#(86 2 #reduceActionFor_importDecl__import__eos__2: 11715586 false) 
	#(108 0 #nil 12565505 false) 
	#(114 4 #reduceActionForfunctionDecl1: 12794883 false) 
	#(114 4 #reduceActionForfunctionDecl2: 12794882 false) 
	#(180 1 #liftFirstValue: 17232898 false) 
	#(179 2 #reduceActionForsignature2: 17169410 false) 
	#(180 1 #liftFirstValue: 17232897 false) 
	#(178 2 #liftSecondValue: 17125377 false) 
	#(173 0 #nil 16663553 false) 
	#(205 0 #reduceActionFordeclaration2: 19372033 false) 
	#(169 1 #liftFirstValue: 16549889 false) 
	#(176 2 #liftSecondValue: 16952321 false) 
	#(190 1 #liftFirstValue: 18480129 false) 
	#(192 1 #liftFirstValue: 18690049 false) 
	#(191 1 #liftFirstValue: 18560001 false) 
	#(191 1 #liftFirstValue: 18560002 false) 
	#(191 1 #liftFirstValue: 18560003 false) 
	#(191 1 #liftFirstValue: 18560004 false) 
	#(190 1 #liftFirstValue: 18480132 false) 
	#(191 1 #liftFirstValue: 18560005 false) 
	#(191 1 #liftFirstValue: 18560006 false) 
	#(195 1 #reduceActionFordeclaration2: 18863110 false) 
	#(195 1 #reduceActionFortypeLit2: 18863106 false) 
	#(195 1 #reduceActionFordeclaration2: 18863108 false) 
	#(195 1 #reduceActionFordeclaration2: 18863109 false) 
	#(168 1 #reduceActionFordeclaration1: 16513025 false) 
	#(185 1 #reduceActionFordeclaration1: 17485825 false) 
	#(186 1 #reduceActionForprimaryExpr2: 18087938 false) 
	#(186 1 #reduceActionFordeclaration1: 18087937 false) 
	#(188 1 #reduceActionFortypeLit2: 18315265 false) 
	#(189 1 #reduceActionFordeclaration2: 18411521 false) 
	#(190 1 #liftFirstValue: 18480130 false) 
	#(188 1 #reduceActionFordeclaration2: 18315266 false) 
	#(189 1 #reduceActionFordeclaration1: 18411522 false) 
	#(195 1 #reduceActionFordeclaration1: 18863105 false) 
	#(190 1 #liftFirstValue: 18480131 false) 
	#(189 1 #reduceActionForliteral3: 18411523 false) 
	#(186 1 #reduceActionFordeclaration2: 18087939 false) 
	#(184 2 #reduceActionForparameterDecl2: 17395714 false) 
	#(170 2 #liftSecondValue: 16581633 false) 
	#(184 2 #reduceActionForparameterDecl3: 17395715 false) 
	#(163 2 #reduceActionFortype_2: 16026626 false) 
	#(115 4 #reduceActionFormethodDecl1: 12888065 false) 
	#(96 2 #reduceActionFor_importDecl__import__eos__2: 12169218 false) 
	#(90 4 #reduceActionForconstDecl2: 11968514 false) 
	#(92 2 #reduceActionFor_constSpec_eos__2: 12016642 false) 
	#(93 3 #reduceActionForconstSpec2: 12052482 false) 
	#(99 0 #reduceActionFordeclaration2: 12247041 false) 
	#(104 3 #reduceActionForaliasDecl1: 12403713 false) 
	#(105 3 #liftSecondValue: 12455938 false) 
	#(100 4 #reduceActionForaliasDecl1: 12276738 false) 
	#(102 2 #liftFirstValue: 12321794 false) 
	#(117 4 #reduceActionForvarDecl2: 13029378 false) 
	#(119 2 #reduceActionFor_varSpec_eos__2: 13071362 false) 
	#(120 3 #reduceActionForconstSpec2: 13105155 false) 
	#(85 2 #liftFirstValue: 11715585 false) 
	#(109 2 #liftFirstValue: 12614657 false) 
	#(112 0 #nil 12701697 false) 
	#(113 1 #liftFirstValue: 12726273 false) 
	#(114 5 #reduceActionForfunctionDecl4: 12794884 false) 
	#(135 1 #liftFirstValue: 14267393 false) 
	#(138 1 #liftFirstValue: 14408705 false) 
	#(136 1 #liftFirstValue: 14313473 false) 
	#(134 1 #reduceActionFordeclaration2: 14217217 false) 
	#(121 2 #reduceActionFordeclaration2: 13204481 false) 
	#(125 1 #reduceActionFordeclaration1: 13322241 false) 
	#(125 1 #reduceActionForstatement10: 13322250 false) 
	#(124 1 #reduceActionFordeclaration1: 13280257 false) 
	#(122 1 #reduceActionFordeclaration1: 13259777 false) 
	#(125 1 #reduceActionForstatement3: 13322243 false) 
	#(126 1 #reduceActionForsimpleStmt4: 13589508 false) 
	#(126 1 #reduceActionFordeclaration1: 13589505 false) 
	#(126 1 #reduceActionForsimpleStmt4: 13589506 false) 
	#(126 1 #reduceActionForsimpleStmt4: 13589507 false) 
	#(126 1 #reduceActionForsimpleStmt4: 13589509 false) 
	#(125 1 #reduceActionForstatement10: 13322242 false) 
	#(125 1 #reduceActionFordeclaration1: 13322245 false) 
	#(125 1 #reduceActionFordeclaration2: 13322246 false) 
	#(125 1 #reduceActionFordeclaration2: 13322247 false) 
	#(125 1 #reduceActionFordeclaration2: 13322248 false) 
	#(125 1 #reduceActionFordeclaration2: 13322249 false) 
	#(125 1 #reduceActionFordeclaration1: 13322255 false) 
	#(125 1 #reduceActionForstatement11: 13322251 false) 
	#(125 1 #reduceActionForstatement12: 13322252 false) 
	#(141 1 #reduceActionFordeclaration1: 14614529 false) 
	#(141 1 #reduceActionForswitchStmt2: 14614530 false) 
	#(125 1 #reduceActionForstatement13: 13322253 false) 
	#(125 1 #reduceActionForstatement10: 13322254 false) 
	#(125 1 #reduceActionFordeclaration1: 13322244 false) 
	#(127 1 #reduceActionFordeclaration1: 13699073 false) 
	#(176 3 #reduceActionForaliasDecl1: 16952322 false) 
	#(193 3 #reduceActionForqualifiedIdent1: 18728961 false) 
	#(163 3 #liftSecondValue: 16026628 false) 
	#(174 3 #reduceActionForaliasDecl1: 16715777 false) 
	#(185 2 #reduceActionForconstDecl1: 17485828 false) 
	#(185 2 #reduceActionForconstDecl1: 17485826 false) 
	#(185 2 #reduceActionForconstDecl1: 17485827 false) 
	#(185 2 #reduceActionForconstDecl1: 17485829 false) 
	#(185 2 #reduceActionForconstDecl1: 17485830 false) 
	#(185 2 #reduceActionForconstDecl1: 17485831 false) 
	#(185 2 #reduceActionForexpression8: 17485832 false) 
	#(195 2 #reduceActionFordeclaration2: 18863111 false) 
	#(186 2 #reduceActionForprimaryExpr5: 18087941 false) 
	#(186 2 #reduceActionForprimaryExpr5: 18087942 false) 
	#(186 2 #reduceActionFordeclaration1: 18087943 false) 
	#(186 2 #reduceActionForprimaryExpr5: 18087944 false) 
	#(188 2 #reduceActionFordeclaration2: 18315267 false) 
	#(194 2 #reduceActionForcompositeLit1: 18810881 false) 
	#(176 3 #reduceActionForaliasDecl1: 16952323 false) 
	#(184 3 #reduceActionForparameterDecl4: 17395716 false) 
	#(153 0 #reduceActionFor_importDecl__import__eos__1: 15362049 false) 
	#(181 4 #reduceActionForparameters2: 17276930 false) 
	#(183 2 #reduceActionFor_importDecl__import__eos__2: 17328130 false) 
	#(115 5 #reduceActionFormethodDecl2: 12888066 false) 
	#(95 2 #liftSecondValue: 12169217 false) 
	#(91 2 #reduceActionFordeclaration1: 12016641 false) 
	#(97 2 #reduceActionForexpressionList1: 12214273 false) 
	#(93 4 #reduceActionForconstSpec3: 12052483 false) 
	#(101 2 #liftFirstValue: 12321793 false) 
	#(118 2 #reduceActionFor_varSpec_eos_1: 13071361 false) 
	#(120 4 #reduceActionForconstSpec3: 13105154 false) 
	#(113 2 #liftSecondValue: 12726274 false) 
	#(110 2 #liftFirstValue: 12674049 false) 
	#(106 4 #liftSecondValue: 12513281 false) 
	#(108 2 #liftFirstValue: 12565506 false) 
	#(135 2 #liftFirstValue: 14267394 false) 
	#(155 0 #reduceActionFordeclaration2: 15450113 false) 
	#(139 2 #reduceActionForconstDecl1: 14452737 false) 
	#(162 2 #reduceActionForconstDecl1: 15989761 false) 
	#(137 2 #liftFirstValue: 14365697 false) 
	#(143 0 #reduceActionFordeclaration2: 14761985 false) 
	#(136 2 #liftFirstValue: 14313474 false) 
	#(159 2 #reduceActionForconstDecl1: 15713281 false) 
	#(134 2 #reduceActionForconstDecl1: 14217218 false) 
	#(133 2 #reduceActionFordeclaration2: 14158849 false) 
	#(131 1 #liftFirstValue: 13936641 false) 
	#(121 3 #reduceActionForconstDecl1: 13204482 false) 
	#(124 2 #reduceActionForprimaryExpr5: 13280258 false) 
	#(123 2 #reduceActionFor___SEMI_____eos___statement_eos_1: 13280257 false) 
	#(129 2 #reduceActionFordeclaration1: 13804545 false) 
	#(129 2 #reduceActionFordeclaration1: 13804546 false) 
	#(171 4 #reduceActionForaliasDecl1: 16620545 false) 
	#(173 2 #liftFirstValue: 16663554 false) 
	#(203 4 #reduceActionForconstSpec2: 19335169 false) 
	#(208 1 #liftFirstValue: 19557377 false) 
	#(205 2 #reduceActionForcompositeLit1: 19372034 false) 
	#(206 1 #reduceActionFordeclaration2: 19406851 false) 
	#(209 3 #reduceActionForfunctionLit1: 19612673 false) 
	#(188 3 #reduceActionForconstDecl1: 18315268 false) 
	#(215 3 #liftFirstValue: 20042753 false) 
	#(167 4 #reduceActionForconstDecl1: 16440321 false) 
	#(185 3 #reduceActionForexpression27: 17485851 false) 
	#(185 3 #reduceActionForexpression27: 17485850 false) 
	#(185 3 #reduceActionForexpression27: 17485844 false) 
	#(185 3 #reduceActionForexpression27: 17485845 false) 
	#(185 3 #reduceActionForexpression27: 17485846 false) 
	#(185 3 #reduceActionForexpression27: 17485847 false) 
	#(185 3 #reduceActionForexpression27: 17485848 false) 
	#(185 3 #reduceActionForexpression25: 17485849 false) 
	#(185 3 #reduceActionForexpression27: 17485842 false) 
	#(185 3 #reduceActionForexpression27: 17485834 false) 
	#(185 3 #reduceActionForexpression27: 17485835 false) 
	#(185 3 #reduceActionForexpression27: 17485836 false) 
	#(185 3 #reduceActionForexpression27: 17485837 false) 
	#(185 3 #reduceActionForexpression15: 17485839 false) 
	#(185 3 #reduceActionForexpression27: 17485840 false) 
	#(185 3 #reduceActionForexpression27: 17485841 false) 
	#(185 3 #reduceActionForexpression19: 17485843 false) 
	#(185 3 #reduceActionForexpression27: 17485833 false) 
	#(185 3 #reduceActionForexpression27: 17485838 false) 
	#(213 2 #reduceActionFordeclaration2: 19921921 false) 
	#(214 0 #nil 20014081 false) 
	#(186 3 #reduceActionFordeclaration1: 18087940 false) 
	#(196 2 #reduceActionFordeclaration2: 19026945 false) 
	#(202 1 #reduceActionFordeclaration1: 19282945 false) 
	#(201 1 #reduceActionFordeclaration1: 19234817 false) 
	#(202 1 #reduceActionFordeclaration1: 19282946 false) 
	#(201 1 #reduceActionFordeclaration1: 19234818 false) 
	#(199 0 #reduceActionFordeclaration2: 19152897 false) 
	#(200 1 #reduceActionFordeclaration1: 19184641 false) 
	#(151 2 #reduceActionFortypeList2: 15319042 false) 
	#(164 3 #reduceActionFortypeArgs1: 16132097 false) 
	#(151 2 #reduceActionFortypeList1: 15319041 false) 
	#(181 5 #reduceActionForparameters2: 17276931 false) 
	#(182 2 #liftSecondValue: 17328129 false) 
	#(99 2 #reduceActionFor__COMMA__expression__2: 12247042 false) 
	#(112 2 #liftFirstValue: 12701698 false) 
	#(107 2 #liftSecondValue: 12565505 false) 
	#(147 0 #reduceActionFordeclaration2: 15046657 false) 
	#(140 3 #reduceActionForifStmt1: 14495745 false) 
	#(161 2 #reduceActionForconstDecl1: 15882241 false) 
	#(159 3 #reduceActionForforStmt3: 15713283 false) 
	#(159 3 #reduceActionForforStmt5: 15713285 false) 
	#(159 3 #reduceActionForforStmt5: 15713282 false) 
	#(160 2 #reduceActionFordeclaration2: 15789057 false) 
	#(133 3 #reduceActionForlabeledStmt2: 14158850 false) 
	#(123 3 #reduceActionFor___SEMI_____eos___statement_eos_2: 13280258 false) 
	#(132 3 #reduceActionForconstSpec2: 14084097 false) 
	#(131 2 #liftFirstValue: 13936644 false) 
	#(131 2 #liftFirstValue: 13936647 false) 
	#(131 2 #liftFirstValue: 13936648 false) 
	#(131 2 #liftFirstValue: 13936649 false) 
	#(131 2 #liftFirstValue: 13936650 false) 
	#(131 2 #liftFirstValue: 13936652 false) 
	#(131 2 #liftFirstValue: 13936642 false) 
	#(131 2 #liftFirstValue: 13936643 false) 
	#(131 2 #liftFirstValue: 13936645 false) 
	#(131 2 #liftFirstValue: 13936646 false) 
	#(131 2 #liftFirstValue: 13936651 false) 
	#(130 3 #reduceActionForexpression27: 13871105 false) 
	#(128 3 #reduceActionForsendStmt1: 13739009 false) 
	#(123 3 #reduceActionFor___SEMI_____eos___statement_eos_2: 13280260 false) 
	#(177 2 #liftSecondValue: 17038338 false) 
	#(172 2 #liftFirstValue: 16663554 false) 
	#(172 2 #liftFirstValue: 16663553 false) 
	#(175 5 #reduceActionForaliasDecl1: 16881665 false) 
	#(208 2 #liftSecondValue: 19557379 false) 
	#(206 2 #reduceActionFordeclaration2: 19406849 false) 
	#(208 2 #liftFirstValue: 19557378 false) 
	#(204 2 #reduceActionFordeclaration1: 19372033 false) 
	#(206 2 #reduceActionForfieldDecl4: 19406852 false) 
	#(195 4 #reduceActionFordeclaration2: 18863107 false) 
	#(187 4 #reduceActionForconversion1: 18243585 false) 
	#(214 1 #liftFirstValue: 20014082 false) 
	#(211 3 #reduceActionFordeclaration2: 19728385 false) 
	#(210 3 #reduceActionForconstDecl1: 19673089 false) 
	#(196 3 #reduceActionFordeclaration2: 19026950 false) 
	#(196 3 #reduceActionForconstDecl1: 19026946 false) 
	#(197 2 #reduceActionForexpressionList1: 19121153 false) 
	#(153 2 #reduceActionFor_importDecl__import__eos__2: 15362050 false) 
	#(164 4 #reduceActionFortypeArgs1: 16132098 false) 
	#(98 2 #reduceActionForconstDecl1: 12247041 false) 
	#(111 2 #liftSecondValue: 12701697 false) 
	#(157 1 #reduceActionFordeclaration2: 15537155 false) 
	#(154 4 #reduceActionForconstSpec2: 15413249 false) 
	#(155 2 #reduceActionForcommClause_2: 15450114 false) 
	#(145 1 #reduceActionFordeclaration2: 14863362 false) 
	#(142 4 #reduceActionForconstSpec2: 14675969 false) 
	#(143 2 #reduceActionForexprCaseClause_2: 14761986 false) 
	#(140 4 #reduceActionForifStmt4: 14495748 false) 
	#(160 3 #reduceActionForforClause5: 15789061 false) 
	#(160 3 #reduceActionForforClause3: 15789059 false) 
	#(160 3 #reduceActionForforClause2: 15789058 false) 
	#(177 3 #liftSecondValue: 17038337 false) 
	#(208 3 #liftSecondValue: 19557380 false) 
	#(206 3 #reduceActionForfieldDecl2: 19406850 false) 
	#(187 5 #reduceActionForconversion1: 18243586 false) 
	#(213 4 #reduceActionForconstDecl1: 19921922 false) 
	#(213 4 #reduceActionFordeclaration2: 19921924 false) 
	#(211 4 #reduceActionForconstSpec2: 19728386 false) 
	#(211 4 #reduceActionForconstDecl1: 19728387 false) 
	#(212 4 #reduceActionForaliasDecl1: 19861505 false) 
	#(196 4 #reduceActionForconstSpec2: 19026951 false) 
	#(196 4 #reduceActionForconstDecl1: 19026948 false) 
	#(196 4 #reduceActionForconstDecl1: 19026947 false) 
	#(199 2 #reduceActionFor__COMMA__expression__2: 19152898 false) 
	#(200 3 #reduceActionForexpression27: 19184642 false) 
	#(152 2 #nil 15362050 false) 
	#(152 2 #liftSecondValue: 15362049 false) 
	#(157 2 #reduceActionForconstDecl1: 15537153 false) 
	#(157 2 #reduceActionForcommCase2: 15537154 false) 
	#(158 1 #reduceActionForrecvStmt1: 15605761 false) 
	#(156 2 #reduceActionFordeclaration1: 15479809 false) 
	#(145 2 #reduceActionForconstDecl1: 14863361 false) 
	#(144 2 #reduceActionFordeclaration1: 14795777 false) 
	#(150 1 #liftFirstValue: 15257602 false) 
	#(146 5 #reduceActionFortypeSwitchStmt1: 14930945 false) 
	#(147 2 #reduceActionFortypeCaseClause_2: 15046658 false) 
	#(142 5 #reduceActionForexprSwitchStmt2: 14675970 false) 
	#(142 5 #reduceActionForconstSpec3: 14675971 false) 
	#(140 5 #reduceActionForifStmt7: 14495751 false) 
	#(140 5 #reduceActionForifStmt3: 14495747 false) 
	#(140 5 #reduceActionForifStmt2: 14495746 false) 
	#(161 4 #reduceActionForconstSpec3: 15882243 false) 
	#(161 4 #reduceActionForrangeClause2: 15882242 false) 
	#(160 4 #reduceActionForforClause7: 15789063 false) 
	#(160 4 #reduceActionForforClause6: 15789062 false) 
	#(160 4 #reduceActionForforClause4: 15789060 false) 
	#(213 5 #reduceActionForconstDecl1: 19921923 false) 
	#(213 5 #reduceActionFordeclaration2: 19921925 false) 
	#(211 5 #reduceActionForslice_4: 19728388 false) 
	#(196 5 #reduceActionForconstSpec2: 19026953 false) 
	#(196 5 #reduceActionForconstSpec2: 19026952 false) 
	#(196 5 #reduceActionForconstDecl1: 19026949 false) 
	#(198 2 #reduceActionForconstDecl1: 19152897 false) 
	#(156 3 #reduceActionForcommClause2: 15479810 false) 
	#(144 3 #reduceActionForexprCaseClause2: 14795778 false) 
	#(142 6 #reduceActionForexprSwitchStmt5: 14675973 false) 
	#(150 2 #liftSecondValue: 15257601 false) 
	#(149 2 #reduceActionFordeclaration2: 15190017 false) 
	#(148 5 #reduceActionFordeclaration1: 15080449 false) 
	#(146 6 #reduceActionFortypeSwitchStmt2: 14930946 false) 
	#(142 6 #reduceActionForexprSwitchStmt4: 14675972 false) 
	#(140 6 #reduceActionForifStmt6: 14495750 false) 
	#(140 6 #reduceActionForifStmt5: 14495749 false) 
	#(160 5 #reduceActionForforClause8: 15789064 false) 
	#(213 6 #reduceActionForconstSpec3: 19921926 false) 
	#(211 6 #reduceActionForslice_5: 19728389 false) 
	#(196 6 #reduceActionForconstSpec2: 19026954 false) 
	#(158 3 #reduceActionForforClause2: 15605763 false) 
	#(158 3 #reduceActionForrecvStmt2: 15605762 false) 
	#(146 7 #reduceActionFortypeSwitchStmt3: 14930947 false) 
	#(142 7 #reduceActionForexprSwitchStmt6: 14675974 false) 
	#(149 3 #reduceActionFortypeCaseClause2: 15190018 false) 
	#(140 7 #reduceActionForifStmt9: 14495753 false) 
	#(140 7 #reduceActionForifStmt8: 14495752 false) 
	#(213 7 #reduceActionForconstSpec3: 19921927 false) 
	#(211 7 #reduceActionForslice_6: 19728390 false) 
	#(148 7 #reduceActionForconstSpec2: 15080450 false)
	).
]

{ #category : #generated }
GoParser class >> scannerClass [
	^GoScanner
]

{ #category : #generated }
GoParser class >> startingStateForsourceFile [
	^ 1
]

{ #category : #generated }
GoParser class >> symbolNames [
	^ #('<BREAK>' '<DEFAULT>' '<FUNC>' '<INTERFACE>' '<SELECT>' '<CASE>' '<DEFER>' '<GO>' '<MAP>' '<STRUCT>' '<CHAN>' '<ELSE>' '<GOTO>' '<PACKAGE>' '<SWITCH>' '<CONST>' '<FALLTHROUGH>' '<IF>' '<RANGE>' '<TYPE>' '<CONTINUE>' '<FOR>' '<IMPORT>' '<RETURN>' '<VAR>' '<NIL_LIT>' '<IDENTIFIER>' '<L_PAREN>' '<R_PAREN>' '<L_CURLY>' '<R_CURLY>' '<L_BRACKET>' '<R_BRACKET>' '<ASSIGN>' '<COMMA>' '<SEMI>' '<COLON>' '<DOT>' '<PLUS_PLUS>' '<MINUS_MINUS>' '<DECLARE_ASSIGN>' '<ELLIPSIS>' '<LOGICAL_OR>' '<LOGICAL_AND>' '<EQUALS>' '<NOT_EQUALS>' '<LESS>' '<LESS_OR_EQUALS>' '<GREATER>' '<GREATER_OR_EQUALS>' '<OR>' '<DIV>' '<MOD>' '<LSHIFT>' '<RSHIFT>' '<BIT_CLEAR>' '<UNDERLYING>' '<EXCLAMATION>' '<PLUS>' '<MINUS>' '<CARET>' '<STAR>' '<AMPERSAND>' '<RECEIVE>' '<DECIMAL_LIT>' '<BINARY_LIT>' '<OCTAL_LIT>' '<HEX_LIT>' '<FLOAT_LIT>' '<IMAGINARY_LIT>' '<RUNE_LIT>' '<RAW_STRING_LIT>' '<INTERPRETED_STRING_LIT>' '<whitespace>' '<comment>' '<NEWLINE>' 'B e g i n' 'sourceFile' '(importDecl ''import'' eos)' '(importDecl ''import'' eos)*' '((functionDecl ''functionDeclaration'' | methodDecl ''methodDeclaration'' | declaration) eos)' '((functionDecl ''functionDeclaration'' | methodDecl ''methodDeclaration'' | declaration) eos)*' 'packageClause' 'importDecl' '(importSpec ''import'' eos)' '(importSpec ''import'' eos)*' 'importSpec' 'importPath' 'declaration' 'constDecl' '(constSpec eos)' '(constSpec eos)*' 'constSpec' 'identifierList' '(<COMMA> <IDENTIFIER> ''ident'')' '(<COMMA> <IDENTIFIER> ''ident'')*' 'expressionList' '(<COMMA> expression)' '(<COMMA> expression)*' 'typeDecl' '(typeSpec eos)' '(typeSpec eos)*' 'typeSpec' 'aliasDecl' 'typeDef' 'typeParameters' '(<COMMA> typeParameterDecl)' '(<COMMA> typeParameterDecl)*' 'typeParameterDecl' 'typeElement' '(<OR> typeTerm)' '(<OR> typeTerm)*' 'typeTerm' 'functionDecl' 'methodDecl' 'receiver' 'varDecl' '(varSpec eos)' '(varSpec eos)*' 'varSpec' 'block' 'statementList' '((<SEMI>? | eos?) statement eos)' '((<SEMI>? | eos?) statement eos)+' 'statement' 'simpleStmt' 'expressionStmt' 'sendStmt' 'incDecStmt' 'assignment' 'assign_op' 'shortVarDecl' 'labeledStmt' 'returnStmt' 'breakStmt' 'continueStmt' 'gotoStmt' 'fallthroughStmt' 'deferStmt' 'ifStmt' 'switchStmt' 'exprSwitchStmt' 'exprCaseClause*' 'exprCaseClause' 'exprSwitchCase' 'typeSwitchStmt' 'typeCaseClause*' 'typeSwitchGuard' 'typeCaseClause' 'typeSwitchCase' 'typeList' '(<COMMA> (type_ ''type'' | <NIL_LIT>))' '(<COMMA> (type_ ''type'' | <NIL_LIT>))*' 'selectStmt' 'commClause*' 'commClause' 'commCase' 'recvStmt' 'forStmt' 'forClause' 'rangeClause' 'goStmt' 'type_' 'typeArgs' 'typeName' 'typeLit' 'arrayType' 'arrayLength' 'elementType' 'pointerType' 'interfaceType' '((methodSpec | typeElement) eos)' '((methodSpec | typeElement) eos)*' 'sliceType' 'mapType' 'channelType' 'methodSpec' 'functionType' 'signature' 'result' 'parameters' '(<COMMA> parameterDecl ''param'')' '(<COMMA> parameterDecl ''param'')*' 'parameterDecl' 'expression' 'primaryExpr' 'conversion' 'operand' 'literal' 'basicLit' 'integer' 'operandName' 'qualifiedIdent' 'compositeLit' 'literalType' 'literalValue' 'elementList' '(<COMMA> keyedElement)' '(<COMMA> keyedElement)*' 'keyedElement' 'key' 'element' 'structType' '(fieldDecl eos)' '(fieldDecl eos)*' 'fieldDecl' 'string_' 'embeddedField' 'functionLit' 'index' 'slice_' 'typeAssertion' 'arguments' '<COMMA>?' 'methodExpr' 'eos' 'E O F' 'error')
]

{ #category : #generated }
GoParser class >> symbolTypes [
	^ #(#SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #GoSourceFileNode #GoSourceFileNode #GoImportDeclNode #OrderedCollection #OrderedCollection #OrderedCollection #GoPackageClauseNode #GoImportDeclNode #GoImportSpecNode #OrderedCollection #GoImportSpecNode #GoImportPathNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #GoIdentifierListNode #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #Object #Object nil #Object #Object #Object #GoIdentifierListNode #GoIdentifierListNode nil #GoIdentifierListNode #Object #Object nil #Object #GoFunctionDeclNode #GoMethodDeclNode #GoParametersNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #SmaCCToken #SmaCCToken #SmaCCToken #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #Object #GoTypeListNode #Object #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #Object #GoTypeArgsNode #GoProgramNode #OrderedCollection #OrderedCollection #OrderedCollection #Object #Object nil #Object nil #Object #Object #Object #GoParametersNode #GoSignatureNode #GoSignatureNode #Object #GoParametersNode #GoParameterDeclNode #OrderedCollection #GoParameterDeclNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #SmaCCToken #SmaCCToken #GoQualifiedIdentNode #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #OrderedCollection #SmaCCToken #GoProgramNode #OrderedCollection #OrderedCollection #OrderedCollection #Object #OrderedCollection #SmaCCToken #Object #SmaCCToken #SmaCCToken #SmaCCErrorNode)
]

{ #category : #generated }
GoParser class >> transitionTable [
^#(
#[1 0 9 0 14 0 13 0 78 0 17 0 83] 
#[0 0 21 0 27] 
#[0 0 0 0 217] 
#[1 0 6 0 3 0 6 0 16 0 6 0 20 0 6 0 23 0 6 0 25 0 33 0 36 0 33 0 76 0 33 0 216 0 6 0 217] 
#[0 0 10 0 3 0 16 0 20 0 23 0 25 0 36 0 76 0 217] 
#[0 0 14 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 36 0 38 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 0 18 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 36 0 38 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 0 22 0 3 0 22 0 16 0 22 0 20 0 22 0 23 0 22 0 25 0 37 0 80 0 22 0 217] 
#[1 0 26 0 3 0 26 0 16 0 26 0 20 0 41 0 23 0 26 0 25 0 45 0 79 0 49 0 82 0 53 0 84 0 26 0 217] 
#[1 0 57 0 27 0 61 0 28 0 65 0 38 0 85 0 72 0 85 0 73 0 77 0 87 0 81 0 88 0 85 0 207] 
#[0 0 30 0 3 0 16 0 20 0 23 0 25 0 217] 
#[1 0 89 0 3 0 93 0 16 0 97 0 20 0 101 0 25 0 105 0 81 0 109 0 89 0 113 0 90 0 117 0 100 0 121 0 114 0 125 0 115 0 129 0 117 0 34 0 217] 
#[1 0 6 0 3 0 6 0 16 0 6 0 20 0 6 0 23 0 6 0 25 0 133 0 36 0 133 0 76 0 133 0 216 0 6 0 217] 
#[1 0 85 0 72 0 85 0 73 0 137 0 88 0 85 0 207] 
#[1 0 6 0 27 0 6 0 29 0 141 0 36 0 6 0 38 0 6 0 72 0 6 0 73 0 141 0 76 0 141 0 216] 
#[1 0 85 0 72 0 85 0 73 0 145 0 88 0 85 0 207] 
#[0 0 38 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 0 42 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 23 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 0 46 0 3 0 16 0 20 0 23 0 25 0 36 0 76 0 217] 
#[0 0 50 0 3 0 16 0 20 0 23 0 25 0 27 0 29 0 36 0 38 0 72 0 73 0 76 0 217] 
#[0 0 54 0 3 0 16 0 20 0 23 0 25 0 27 0 29 0 36 0 38 0 72 0 73 0 76 0 217] 
#[1 0 149 0 27 0 153 0 28 0 157 0 116 0 157 0 181] 
#[1 0 165 0 27 0 169 0 28 0 173 0 93 0 177 0 94] 
#[1 0 181 0 27 0 185 0 28 0 189 0 103 0 189 0 104 0 189 0 105] 
#[1 0 165 0 27 0 201 0 28 0 205 0 94 0 209 0 120] 
#[0 0 58 0 3 0 16 0 20 0 25 0 217] 
#[1 0 6 0 3 0 6 0 16 0 6 0 20 0 6 0 25 0 213 0 36 0 213 0 76 0 213 0 216 0 6 0 217] 
#[0 0 62 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 0 66 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 0 6 0 3 0 6 0 16 0 6 0 20 0 6 0 25 0 217 0 36 0 217 0 76 0 217 0 216 0 6 0 217] 
#[1 0 6 0 3 0 6 0 16 0 6 0 20 0 6 0 25 0 221 0 36 0 221 0 76 0 221 0 216 0 6 0 217] 
#[0 0 70 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 0 74 0 3 0 16 0 20 0 23 0 25 0 217] 
#[0 0 78 0 3 0 16 0 20 0 23 0 25 0 27 0 29 0 36 0 38 0 72 0 73 0 76 0 217] 
#[1 0 82 0 27 0 82 0 29 0 82 0 38 0 82 0 72 0 82 0 73 0 225 0 86] 
#[0 0 86 0 3 0 16 0 20 0 23 0 25 0 27 0 29 0 36 0 38 0 72 0 73 0 76 0 217] 
#[1 0 153 0 28 0 229 0 32 0 233 0 106 0 237 0 179 0 241 0 181] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 1 9 0 27 1 13 0 28 1 17 0 29 1 21 0 32 1 25 0 42 1 29 0 62 1 33 0 64 1 37 0 94 1 41 0 163 1 45 0 165 1 41 0 166 1 53 0 167 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 81 0 184 1 45 0 193 1 89 0 203] 
#[0 1 93 0 27] 
#[0 0 90 0 27] 
#[1 0 94 0 1 0 94 0 2 0 94 0 3 0 94 0 4 0 94 0 5 0 94 0 6 0 94 0 7 0 94 0 8 0 94 0 9 0 94 0 10 0 94 0 11 0 94 0 13 0 94 0 15 0 94 0 16 0 94 0 17 0 94 0 18 0 94 0 20 0 94 0 21 0 94 0 22 0 94 0 24 0 94 0 25 0 94 0 26 0 94 0 27 0 94 0 28 0 94 0 29 0 94 0 30 0 94 0 31 0 94 0 32 0 94 0 34 0 94 0 35 0 94 0 36 0 94 0 57 0 94 0 58 0 94 0 59 0 94 0 60 0 94 0 61 0 94 0 62 0 94 0 63 0 94 0 64 0 94 0 65 0 94 0 66 0 94 0 67 0 94 0 68 0 94 0 69 0 94 0 70 0 94 0 71 0 94 0 72 0 94 0 73 0 94 0 76 1 97 0 96 0 94 0 217] 
#[1 0 98 0 27 0 98 0 29 1 101 0 92] 
#[0 0 102 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 0 106 0 1 0 106 0 2 0 7 0 3 0 11 0 4 0 106 0 5 0 106 0 6 0 106 0 7 0 106 0 8 0 15 0 9 0 19 0 10 0 23 0 11 0 106 0 13 0 106 0 15 0 106 0 16 0 106 0 17 0 106 0 18 0 106 0 20 0 106 0 21 0 106 0 22 0 106 0 24 0 106 0 25 0 106 0 26 0 27 0 27 0 31 0 28 0 106 0 29 0 106 0 30 0 106 0 31 0 35 0 32 1 109 0 34 0 106 0 36 0 106 0 58 0 106 0 59 0 106 0 60 0 106 0 61 0 39 0 62 0 106 0 63 0 43 0 64 0 106 0 65 0 106 0 66 0 106 0 67 0 106 0 68 0 106 0 69 0 106 0 70 0 106 0 71 0 106 0 72 0 106 0 73 0 106 0 76 1 113 0 163 1 45 0 165 1 113 0 166 1 53 0 167 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 45 0 193 1 89 0 203 0 106 0 217] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 1 105 0 27 1 13 0 28 1 117 0 32 1 121 0 34 1 29 0 62 1 33 0 64 1 125 0 106 1 129 0 163 1 45 0 165 1 129 0 166 1 53 0 167 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 45 0 193 1 89 0 203] 
#[1 0 110 0 27 0 110 0 29 1 133 0 102] 
#[0 0 114 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 0 118 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 0 122 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 0 126 0 27 0 126 0 29 1 137 0 119] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 1 105 0 27 1 13 0 28 1 21 0 32 1 141 0 34 1 29 0 62 1 33 0 64 1 145 0 163 1 45 0 165 1 145 0 166 1 53 0 167 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 45 0 193 1 89 0 203] 
#[0 0 130 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 0 134 0 3 0 16 0 20 0 25 0 217] 
#[0 0 138 0 3 0 16 0 20 0 25 0 217] 
#[0 0 142 0 3 0 16 0 20 0 25 0 217] 
#[1 0 57 0 27 1 149 0 29 0 65 0 38 0 85 0 72 0 85 0 73 1 153 0 85 1 157 0 87 0 81 0 88 0 85 0 207] 
#[1 0 165 0 27 1 161 0 94 1 165 0 109] 
#[1 0 153 0 28 1 169 0 179 0 241 0 181] 
#[1 0 146 0 3 0 146 0 16 0 146 0 20 0 146 0 25 1 173 0 30 0 146 0 36 0 146 0 76 1 177 0 121 0 146 0 217] 
#[1 0 150 0 1 0 150 0 2 0 47 0 3 0 51 0 4 0 150 0 5 0 150 0 6 0 150 0 7 0 150 0 8 0 55 0 9 0 59 0 10 0 63 0 11 0 150 0 13 0 150 0 15 0 150 0 16 0 150 0 17 0 150 0 18 0 150 0 20 0 150 0 21 0 150 0 22 0 150 0 24 0 150 0 25 0 150 0 26 0 67 0 27 0 71 0 28 0 150 0 29 0 150 0 30 0 150 0 31 0 75 0 32 0 150 0 33 0 150 0 34 0 150 0 35 0 150 0 36 0 150 0 37 0 150 0 38 0 150 0 42 0 150 0 51 0 150 0 57 0 150 0 58 0 150 0 59 0 150 0 60 0 150 0 61 0 79 0 62 0 150 0 63 0 83 0 64 0 150 0 65 0 150 0 66 0 150 0 67 0 150 0 68 0 150 0 69 0 150 0 70 0 150 0 71 0 150 0 72 0 150 0 73 0 150 0 76 1 189 0 163 1 45 0 165 1 189 0 166 1 53 0 167 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 189 0 180 1 189 0 181 1 45 0 193 1 89 0 203 0 150 0 217] 
#[1 0 153 0 28 1 197 0 179 0 241 0 181] 
#[0 1 201 0 30] 
#[0 1 205 0 32] 
#[0 1 209 0 30] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 1 105 0 27 1 13 0 28 1 21 0 32 1 29 0 62 1 213 0 64 1 221 0 163 1 45 0 165 1 221 0 166 1 53 0 167 1 221 0 169 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 45 0 193 1 89 0 203] 
#[1 0 94 0 3 0 94 0 4 0 94 0 9 0 94 0 10 0 94 0 11 0 87 0 27 0 94 0 28 0 154 0 29 0 154 0 31 0 87 0 32 0 87 0 35 0 154 0 36 1 225 0 38 0 94 0 42 0 87 0 62 0 94 0 64 0 154 0 72 0 154 0 73 0 154 0 76 1 97 0 96] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 1 105 0 27 1 13 0 28 1 21 0 32 1 29 0 62 1 33 0 64 1 229 0 163 1 45 0 165 1 229 0 166 1 53 0 167 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 45 0 193 1 89 0 203] 
#[0 0 158 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 1 253 0 33 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 2 69 0 168 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 2 81 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 1 105 0 27 1 13 0 28 1 21 0 32 1 29 0 62 1 33 0 64 2 137 0 163 1 45 0 165 2 137 0 166 1 53 0 167 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 45 0 193 1 89 0 203] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 1 105 0 27 1 13 0 28 1 21 0 32 1 29 0 62 1 33 0 64 2 141 0 163 1 45 0 165 2 141 0 166 1 53 0 167 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 45 0 193 1 89 0 203] 
#[0 2 145 0 11] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 1 105 0 27 1 13 0 28 1 21 0 32 2 149 0 42 1 29 0 62 1 33 0 64 2 153 0 163 1 45 0 165 2 153 0 166 1 53 0 167 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 45 0 193 1 89 0 203] 
#[0 0 162 0 29 0 35] 
#[1 0 166 0 1 0 166 0 2 0 166 0 3 0 166 0 4 0 166 0 5 0 166 0 6 0 166 0 7 0 166 0 8 0 166 0 9 0 166 0 10 0 166 0 11 0 166 0 13 0 166 0 15 0 166 0 16 0 166 0 17 0 166 0 18 0 166 0 20 0 166 0 21 0 166 0 22 0 166 0 24 0 166 0 25 0 166 0 26 0 166 0 27 0 166 0 28 0 166 0 29 0 166 0 30 0 166 0 31 0 91 0 32 0 166 0 33 0 166 0 34 0 166 0 35 0 166 0 36 0 166 0 37 0 166 0 38 0 166 0 42 0 166 0 51 0 166 0 57 0 166 0 58 0 166 0 59 0 166 0 60 0 166 0 61 0 166 0 62 0 166 0 63 0 166 0 64 0 166 0 65 0 166 0 66 0 166 0 67 0 166 0 68 0 166 0 69 0 166 0 70 0 166 0 71 0 166 0 72 0 166 0 73 0 166 0 76 2 161 0 164 0 166 0 217] 
#[0 0 170 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 0 174 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 0 178 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 0 182 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 0 186 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 0 190 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 0 194 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 0 198 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 0 202 0 29 0 202 0 35 2 165 0 183] 
#[0 0 206 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 0 210 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 0 153 0 28 2 169 0 179 0 241 0 181] 
#[1 0 214 0 1 0 214 0 2 0 214 0 3 0 214 0 4 0 214 0 5 0 214 0 6 0 214 0 7 0 214 0 8 0 214 0 9 0 214 0 10 0 214 0 11 0 214 0 13 0 214 0 15 0 214 0 16 0 214 0 17 0 214 0 18 0 214 0 20 0 214 0 21 0 214 0 22 0 214 0 24 0 214 0 25 0 214 0 26 0 214 0 27 0 214 0 28 0 214 0 29 0 214 0 30 0 214 0 31 0 214 0 32 0 214 0 34 2 173 0 35 0 214 0 36 0 214 0 41 0 214 0 42 0 214 0 57 0 214 0 58 0 214 0 59 0 214 0 60 0 214 0 61 0 214 0 62 0 214 0 63 0 214 0 64 0 214 0 65 0 214 0 66 0 214 0 67 0 214 0 68 0 214 0 69 0 214 0 70 0 214 0 71 0 214 0 72 0 214 0 73 0 214 0 76 2 177 0 95 0 214 0 217] 
#[1 0 165 0 27 2 181 0 29 2 185 0 91 2 189 0 93 0 177 0 94] 
#[1 0 154 0 1 0 154 0 2 0 154 0 3 0 154 0 4 0 154 0 5 0 154 0 6 0 154 0 7 0 154 0 8 0 154 0 9 0 154 0 10 0 154 0 11 0 154 0 13 0 154 0 15 0 154 0 16 0 154 0 17 0 154 0 18 0 154 0 20 0 154 0 21 0 154 0 22 0 154 0 24 0 154 0 25 0 154 0 26 0 154 0 27 0 154 0 28 0 154 0 29 0 154 0 30 0 154 0 31 0 154 0 32 0 154 0 33 0 154 0 34 0 154 0 35 0 154 0 36 0 154 0 37 0 95 0 38 0 154 0 42 0 154 0 51 0 154 0 57 0 154 0 58 0 154 0 59 0 154 0 60 0 154 0 61 0 154 0 62 0 154 0 63 0 154 0 64 0 154 0 65 0 154 0 66 0 154 0 67 0 154 0 68 0 154 0 69 0 154 0 70 0 154 0 71 0 154 0 72 0 154 0 73 0 154 0 76 0 154 0 217] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 193 0 97 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 2 197 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[0 2 201 0 34] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 2 205 0 27 1 245 0 28 1 249 0 32 1 253 0 33 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 1 161 0 94 1 165 0 109 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 2 69 0 168 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 2 81 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 1 105 0 27 1 13 0 28 1 21 0 32 1 29 0 62 1 33 0 64 2 209 0 163 1 45 0 165 2 209 0 166 1 53 0 167 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 45 0 193 1 89 0 203] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 1 105 0 27 1 13 0 28 1 21 0 32 1 29 0 62 1 33 0 64 2 213 0 163 1 45 0 165 2 213 0 166 1 53 0 167 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 45 0 193 1 89 0 203] 
#[0 0 218 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 0 181 0 27 2 217 0 29 2 221 0 101 2 225 0 103 2 225 0 104 2 225 0 105] 
#[1 0 165 0 27 2 229 0 29 0 205 0 94 2 233 0 118 2 237 0 120] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 241 0 97 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 2 197 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 0 222 0 1 0 222 0 2 0 222 0 3 0 222 0 4 0 222 0 5 0 222 0 6 0 222 0 7 0 222 0 8 0 222 0 9 0 222 0 10 0 222 0 11 0 222 0 13 0 222 0 15 0 222 0 16 0 222 0 17 0 222 0 18 0 222 0 20 0 222 0 21 0 222 0 22 0 222 0 24 0 222 0 25 0 222 0 26 0 222 0 27 0 222 0 28 0 222 0 29 0 222 0 30 0 222 0 31 0 222 0 32 2 245 0 34 0 222 0 36 0 222 0 58 0 222 0 59 0 222 0 60 0 222 0 61 0 222 0 62 0 222 0 63 0 222 0 64 0 222 0 65 0 222 0 66 0 222 0 67 0 222 0 68 0 222 0 69 0 222 0 70 0 222 0 71 0 222 0 72 0 222 0 73 0 222 0 76 0 222 0 217] 
#[0 0 226 0 3 0 16 0 20 0 23 0 25 0 36 0 76 0 217] 
#[0 0 230 0 27 0 29 0 38 0 72 0 73] 
#[1 0 6 0 27 0 6 0 29 2 249 0 36 0 6 0 38 0 6 0 72 0 6 0 73 2 249 0 76 2 249 0 216] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 1 105 0 27 1 13 0 28 1 21 0 32 2 253 0 57 1 29 0 62 1 33 0 64 3 1 0 110 3 5 0 113 3 5 0 163 1 45 0 165 3 5 0 166 1 53 0 167 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 45 0 193 1 89 0 203] 
#[1 0 234 0 33 0 234 0 35 3 13 0 108] 
#[1 0 238 0 3 0 238 0 16 0 238 0 20 0 238 0 25 1 173 0 30 0 238 0 36 0 238 0 76 3 17 0 121 0 238 0 217] 
#[1 0 99 0 1 0 103 0 3 0 107 0 4 0 111 0 5 0 115 0 7 0 119 0 8 0 123 0 9 0 127 0 10 0 131 0 11 0 135 0 13 0 139 0 15 0 143 0 16 0 147 0 17 0 151 0 18 0 155 0 20 0 159 0 21 0 163 0 22 0 167 0 24 0 171 0 25 0 175 0 26 0 179 0 27 0 183 0 28 0 187 0 30 3 69 0 31 0 191 0 32 3 73 0 36 0 195 0 58 0 199 0 59 0 203 0 60 0 207 0 61 0 211 0 62 0 215 0 63 0 219 0 64 0 223 0 65 0 227 0 66 0 231 0 67 0 235 0 68 0 239 0 69 0 243 0 70 0 247 0 71 0 251 0 72 0 255 0 73 3 193 0 76 3 77 0 89 0 113 0 90 3 81 0 94 3 85 0 97 0 117 0 100 0 129 0 117 3 89 0 121 3 93 0 122 3 97 0 123 3 101 0 124 3 105 0 125 3 109 0 126 3 113 0 127 3 117 0 128 3 121 0 129 3 125 0 130 3 129 0 132 3 133 0 133 3 137 0 134 3 141 0 135 3 145 0 136 3 149 0 137 3 153 0 138 3 157 0 139 3 161 0 140 3 165 0 141 3 169 0 142 3 173 0 146 3 177 0 154 3 181 0 159 3 185 0 162 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 3 189 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215 3 193 0 216] 
#[0 0 242 0 3 0 16 0 20 0 25 0 36 0 76 0 217] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 1 9 0 27 1 13 0 28 1 17 0 29 1 21 0 32 1 25 0 42 1 29 0 62 1 33 0 64 1 37 0 94 3 197 0 163 1 45 0 165 3 197 0 166 1 53 0 167 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 81 0 184 1 45 0 193 1 89 0 203] 
#[0 0 246 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 0 250 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 0 254 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 1 2 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 1 6 0 3 1 6 0 4 1 6 0 9 1 6 0 10 1 6 0 11 1 6 0 27 1 6 0 28 1 6 0 31 1 6 0 32 1 6 0 57 1 6 0 62 1 6 0 64 3 201 0 173] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 1 105 0 27 1 13 0 28 1 21 0 32 1 29 0 62 1 33 0 64 3 205 0 163 1 45 0 165 3 205 0 166 1 53 0 167 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 45 0 193 1 89 0 203] 
#[1 1 10 0 27 1 10 0 31 1 10 0 62 3 209 0 205] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 3 213 0 11 1 105 0 27 1 13 0 28 1 21 0 32 1 29 0 62 1 33 0 64 3 217 0 163 1 45 0 165 3 217 0 166 1 53 0 167 3 217 0 169 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 45 0 193 1 89 0 203] 
#[0 1 14 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 1 18 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 3 221 0 27] 
#[0 3 225 0 29] 
#[1 0 153 0 28 3 229 0 179 0 241 0 181] 
#[0 1 22 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 1 26 0 1 1 26 0 2 1 26 0 3 1 26 0 4 1 26 0 5 1 26 0 6 1 26 0 7 1 26 0 8 1 26 0 9 1 26 0 10 1 26 0 11 1 26 0 13 1 26 0 15 1 26 0 16 1 26 0 17 1 26 0 18 1 26 0 20 1 26 0 21 1 26 0 22 1 26 0 24 1 26 0 25 1 26 0 26 1 26 0 27 1 3 0 28 1 3 0 29 1 3 0 30 1 26 0 31 1 3 0 32 1 26 0 33 1 26 0 34 1 3 0 35 1 26 0 36 1 26 0 37 1 7 0 38 1 26 0 39 1 26 0 40 1 3 0 42 1 26 0 43 1 26 0 44 1 26 0 45 1 26 0 46 1 26 0 47 1 26 0 48 1 26 0 49 1 26 0 50 1 26 0 51 1 26 0 52 1 26 0 53 1 26 0 54 1 26 0 55 1 26 0 56 1 26 0 58 1 26 0 59 1 26 0 60 1 26 0 61 1 26 0 62 1 26 0 63 1 26 0 64 1 26 0 65 1 26 0 66 1 26 0 67 1 26 0 68 1 26 0 69 1 26 0 70 1 26 0 71 1 26 0 72 1 26 0 73 1 26 0 76 1 26 0 217] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 3 233 0 163 2 61 0 165 3 233 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 3 237 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 1 253 0 33 3 241 0 42 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 2 69 0 168 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 2 81 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 1 105 0 27 1 13 0 28 1 21 0 32 1 29 0 62 1 33 0 64 3 245 0 163 1 45 0 165 3 245 0 166 1 53 0 167 3 245 0 169 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 45 0 193 1 89 0 203] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 3 249 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 3 253 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 4 1 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 4 5 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 4 9 0 163 2 61 0 165 4 9 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 4 13 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 4 17 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 3 213 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 4 21 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[0 1 30 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 1 34 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 1 38 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 1 42 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 1 46 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 1 50 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 1 54 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 4 25 0 28 4 29 0 38] 
#[1 0 166 0 28 0 166 0 29 1 58 0 30 2 157 0 32 0 166 0 35 0 166 0 38 0 166 0 42 4 33 0 164] 
#[1 0 174 0 28 0 174 0 29 1 62 0 30 0 174 0 35 0 174 0 38 0 174 0 42] 
#[0 4 37 0 33] 
#[1 0 186 0 28 0 186 0 29 1 66 0 30 0 186 0 35 0 186 0 38 0 186 0 42] 
#[1 0 190 0 28 0 190 0 29 1 70 0 30 0 190 0 35 0 190 0 38 0 190 0 42] 
#[1 1 74 0 33 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 4 73 0 51 4 77 0 52 4 81 0 53 4 85 0 54 4 89 0 55 4 93 0 56 4 97 0 59 4 101 0 60 4 105 0 61 4 109 0 62 4 113 0 63] 
#[1 1 78 0 1 1 78 0 2 1 78 0 3 1 78 0 4 1 78 0 5 1 78 0 6 1 78 0 7 1 78 0 8 1 78 0 9 1 78 0 10 1 78 0 11 1 78 0 13 1 78 0 15 1 78 0 16 1 78 0 17 1 78 0 18 1 78 0 20 1 78 0 21 1 78 0 22 1 78 0 24 1 78 0 25 1 78 0 26 1 78 0 27 1 11 0 28 1 78 0 29 1 78 0 30 1 78 0 31 1 15 0 32 1 78 0 33 1 78 0 34 1 78 0 35 1 78 0 36 1 78 0 37 4 125 0 38 1 78 0 39 1 78 0 40 1 78 0 42 1 78 0 43 1 78 0 44 1 78 0 45 1 78 0 46 1 78 0 47 1 78 0 48 1 78 0 49 1 78 0 50 1 78 0 51 1 78 0 52 1 78 0 53 1 78 0 54 1 78 0 55 1 78 0 56 1 78 0 58 1 78 0 59 1 78 0 60 1 78 0 61 1 78 0 62 1 78 0 63 1 78 0 64 1 78 0 65 1 78 0 66 1 78 0 67 1 78 0 68 1 78 0 69 1 78 0 70 1 78 0 71 1 78 0 72 1 78 0 73 1 78 0 76 4 129 0 210 4 133 0 211 4 137 0 212 4 141 0 213 1 78 0 217] 
#[0 1 82 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 1 86 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 1 90 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 1 94 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 1 98 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 1 102 0 1 1 102 0 2 1 102 0 3 1 102 0 4 1 102 0 5 1 102 0 6 1 102 0 7 1 102 0 8 1 102 0 9 1 102 0 10 1 102 0 11 1 102 0 13 1 102 0 15 1 102 0 16 1 102 0 17 1 102 0 18 1 102 0 20 1 102 0 21 1 102 0 22 1 102 0 24 1 102 0 25 1 102 0 26 1 102 0 27 1 102 0 28 1 102 0 29 1 102 0 30 1 102 0 31 1 19 0 32 1 102 0 33 1 102 0 34 1 102 0 35 1 102 0 36 1 102 0 37 1 102 0 38 1 102 0 39 1 102 0 40 1 102 0 42 1 102 0 43 1 102 0 44 1 102 0 45 1 102 0 46 1 102 0 47 1 102 0 48 1 102 0 49 1 102 0 50 1 102 0 51 1 102 0 52 1 102 0 53 1 102 0 54 1 102 0 55 1 102 0 56 1 102 0 58 1 102 0 59 1 102 0 60 1 102 0 61 1 102 0 62 1 102 0 63 1 102 0 64 1 102 0 65 1 102 0 66 1 102 0 67 1 102 0 68 1 102 0 69 1 102 0 70 1 102 0 71 1 102 0 72 1 102 0 73 1 102 0 76 4 145 0 164 1 102 0 217] 
#[0 1 106 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 4 149 0 30 4 153 0 196] 
#[1 0 210 0 28 0 210 0 29 1 110 0 30 0 210 0 35 0 210 0 38 0 210 0 42] 
#[0 1 114 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 1 118 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 1 122 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 1 126 0 29 0 35] 
#[0 1 130 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 1 105 0 27 1 13 0 28 1 21 0 32 1 29 0 62 1 33 0 64 4 157 0 163 1 45 0 165 4 157 0 166 1 53 0 167 4 157 0 169 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 45 0 193 1 89 0 203] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 1 105 0 27 1 13 0 28 1 21 0 32 1 29 0 62 1 33 0 64 4 161 0 163 1 45 0 165 4 161 0 166 1 53 0 167 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 45 0 193 1 89 0 203] 
#[0 1 134 0 29 0 35] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 4 165 0 26 1 105 0 27 1 13 0 28 1 21 0 32 1 29 0 62 1 33 0 64 4 169 0 151 4 173 0 163 1 45 0 165 4 173 0 166 1 53 0 167 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 45 0 193 1 89 0 203] 
#[0 1 138 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 4 177 0 29 4 181 0 35 4 185 0 182] 
#[1 1 142 0 3 1 142 0 16 1 142 0 20 1 142 0 25 1 173 0 30 1 142 0 36 1 142 0 76 4 189 0 121 1 142 0 217] 
#[0 4 193 0 27] 
#[0 1 146 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 34 0 35 0 36 0 41 0 42 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 1 150 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 1 154 0 27 0 29] 
#[1 0 6 0 27 0 6 0 29 4 197 0 36 4 197 0 76 4 197 0 216] 
#[0 1 158 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 1 162 0 1 1 162 0 2 1 162 0 3 1 162 0 4 1 162 0 5 1 162 0 6 1 162 0 7 1 162 0 8 1 162 0 9 1 162 0 10 1 162 0 11 1 162 0 13 1 162 0 15 1 162 0 16 1 162 0 17 1 162 0 18 1 162 0 20 1 162 0 21 1 162 0 22 1 162 0 24 1 162 0 25 1 162 0 26 1 162 0 27 1 162 0 28 1 162 0 29 1 162 0 30 1 162 0 31 1 162 0 32 1 162 0 35 1 162 0 36 1 162 0 37 1 162 0 42 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 4 73 0 51 4 77 0 52 4 81 0 53 4 85 0 54 4 89 0 55 4 93 0 56 1 162 0 58 1 23 0 59 1 27 0 60 1 31 0 61 1 35 0 62 1 39 0 63 1 162 0 64 1 162 0 65 1 162 0 66 1 162 0 67 1 162 0 68 1 162 0 69 1 162 0 70 1 162 0 71 1 162 0 72 1 162 0 73 1 162 0 76 4 201 0 99 1 162 0 217] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 4 205 0 97 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 2 197 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 43 0 3 1 43 0 4 1 43 0 9 1 43 0 10 1 43 0 11 1 26 0 26 1 43 0 27 1 47 0 28 1 3 0 30 1 47 0 32 1 26 0 33 1 26 0 34 1 43 0 35 1 26 0 36 1 26 0 37 1 7 0 38 1 26 0 39 1 26 0 40 0 94 0 41 1 26 0 43 1 26 0 44 1 26 0 45 1 26 0 46 1 26 0 47 1 26 0 48 1 26 0 49 1 26 0 50 1 26 0 51 1 26 0 52 1 26 0 53 1 26 0 54 1 26 0 55 1 26 0 56 0 94 0 57 1 26 0 58 1 26 0 59 1 26 0 60 1 26 0 61 1 43 0 62 1 26 0 63 1 43 0 64 1 26 0 65 1 26 0 66 1 26 0 67 1 26 0 68 1 26 0 69 1 26 0 70 1 26 0 71 1 26 0 72 1 26 0 73 1 26 0 76 1 97 0 96] 
#[0 1 166 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 1 170 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 1 174 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 1 178 0 27 0 29] 
#[1 0 6 0 27 0 6 0 29 4 209 0 36 4 209 0 76 4 209 0 216] 
#[0 1 182 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 1 186 0 27 0 29] 
#[1 0 6 0 27 0 6 0 29 4 213 0 36 4 213 0 76 4 213 0 216] 
#[0 1 190 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 4 217 0 97 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 2 197 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[0 1 194 0 27 0 29 0 38 0 72 0 73] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 1 105 0 27 1 13 0 28 1 21 0 32 1 29 0 62 1 33 0 64 4 221 0 163 1 45 0 165 4 221 0 166 1 53 0 167 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 45 0 193 1 89 0 203] 
#[0 1 198 0 33 0 35] 
#[1 1 202 0 3 1 202 0 4 1 202 0 9 1 202 0 10 1 202 0 11 1 202 0 27 1 202 0 28 1 202 0 31 1 202 0 32 1 202 0 33 1 202 0 35 1 202 0 36 1 202 0 51 1 202 0 57 1 202 0 62 1 202 0 64 1 202 0 76 4 225 0 112] 
#[0 1 206 0 3 0 4 0 9 0 10 0 11 0 27 0 28 0 31 0 32 0 33 0 35 0 36 0 51 0 57 0 62 0 64 0 76] 
#[1 4 229 0 33 4 233 0 35 4 237 0 107] 
#[0 1 210 0 3 0 16 0 20 0 25 0 36 0 76 0 217] 
#[1 1 214 0 1 1 214 0 2 1 214 0 3 1 214 0 4 1 214 0 5 1 214 0 6 1 214 0 7 1 214 0 8 1 214 0 9 1 214 0 10 1 214 0 11 1 214 0 13 1 214 0 15 1 214 0 16 1 214 0 17 1 214 0 18 1 214 0 20 1 214 0 21 1 214 0 22 1 214 0 24 1 214 0 25 1 214 0 26 1 51 0 27 1 214 0 28 1 214 0 30 1 214 0 31 1 214 0 32 1 214 0 36 1 214 0 58 1 214 0 59 1 214 0 60 1 214 0 61 1 214 0 62 1 214 0 63 1 214 0 64 1 214 0 65 1 214 0 66 1 214 0 67 1 214 0 68 1 214 0 69 1 214 0 70 1 214 0 71 1 214 0 72 1 214 0 73 1 214 0 76] 
#[0 4 245 0 30] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 4 249 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 4 253 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[0 5 1 0 27] 
#[1 0 103 0 3 0 107 0 4 0 123 0 9 0 127 0 10 0 131 0 11 0 175 0 26 1 55 0 27 0 183 0 28 1 59 0 30 0 191 0 32 5 29 0 36 0 195 0 58 0 199 0 59 0 203 0 60 0 207 0 61 0 211 0 62 0 215 0 63 0 219 0 64 0 223 0 65 0 227 0 66 0 231 0 67 0 235 0 68 0 239 0 69 0 243 0 70 0 247 0 71 0 251 0 72 0 255 0 73 5 29 0 76 3 81 0 94 3 85 0 97 5 13 0 126 3 113 0 127 3 117 0 128 3 121 0 129 3 125 0 130 3 129 0 132 5 17 0 148 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 5 21 0 185 5 25 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215 5 29 0 216] 
#[0 1 218 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[1 0 103 0 3 0 107 0 4 0 123 0 9 0 127 0 10 0 131 0 11 0 175 0 26 1 63 0 27 0 183 0 28 0 191 0 32 5 41 0 36 0 195 0 58 0 199 0 59 0 203 0 60 0 207 0 61 0 211 0 62 0 215 0 63 0 219 0 64 0 223 0 65 0 227 0 66 0 231 0 67 0 235 0 68 0 239 0 69 0 243 0 70 0 247 0 71 0 251 0 72 0 255 0 73 5 41 0 76 3 81 0 94 3 85 0 97 5 33 0 126 3 113 0 127 3 117 0 128 3 121 0 129 3 125 0 130 3 129 0 132 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 5 37 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215 5 41 0 216] 
#[1 1 222 0 1 1 222 0 2 1 222 0 3 1 222 0 4 1 222 0 5 1 222 0 6 1 222 0 7 1 222 0 8 1 222 0 9 1 222 0 10 1 222 0 11 1 222 0 13 1 222 0 15 1 222 0 16 1 222 0 17 1 222 0 18 1 222 0 20 1 222 0 21 1 222 0 22 1 222 0 24 1 222 0 25 1 222 0 26 1 67 0 27 1 222 0 28 1 222 0 30 1 222 0 31 1 222 0 32 1 222 0 36 1 222 0 58 1 222 0 59 1 222 0 60 1 222 0 61 1 222 0 62 1 222 0 63 1 222 0 64 1 222 0 65 1 222 0 66 1 222 0 67 1 222 0 68 1 222 0 69 1 222 0 70 1 222 0 71 1 222 0 72 1 222 0 73 1 222 0 76] 
#[1 0 103 0 3 0 107 0 4 0 123 0 9 0 127 0 10 0 131 0 11 5 49 0 19 0 175 0 26 1 63 0 27 0 183 0 28 0 187 0 30 0 191 0 32 1 71 0 36 0 195 0 58 0 199 0 59 0 203 0 60 0 207 0 61 0 211 0 62 0 215 0 63 0 219 0 64 0 223 0 65 0 227 0 66 0 231 0 67 0 235 0 68 0 239 0 69 0 243 0 70 0 247 0 71 0 251 0 72 0 255 0 73 1 75 0 76 5 53 0 94 5 57 0 97 5 61 0 121 5 65 0 126 3 113 0 127 3 117 0 128 3 121 0 129 3 125 0 130 3 129 0 132 5 69 0 160 5 73 0 161 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 5 77 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215 5 81 0 216] 
#[1 1 226 0 1 1 226 0 2 1 79 0 3 1 83 0 4 1 226 0 5 1 226 0 6 1 226 0 7 1 226 0 8 1 87 0 9 1 91 0 10 1 95 0 11 1 226 0 13 1 226 0 15 1 226 0 16 1 226 0 17 1 226 0 18 1 226 0 20 1 226 0 21 1 226 0 22 1 226 0 24 1 226 0 25 1 99 0 26 1 103 0 27 1 107 0 28 1 226 0 30 1 226 0 31 1 111 0 32 1 226 0 36 1 115 0 58 1 119 0 59 1 123 0 60 1 127 0 61 1 131 0 62 1 135 0 63 1 139 0 64 1 143 0 65 1 147 0 66 1 151 0 67 1 155 0 68 1 159 0 69 1 163 0 70 1 167 0 71 1 171 0 72 1 175 0 73 1 226 0 76 5 85 0 97 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 2 197 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 26 0 1 1 26 0 2 1 26 0 3 1 26 0 4 1 26 0 5 1 26 0 6 1 26 0 7 1 26 0 8 1 26 0 9 1 26 0 10 1 26 0 11 1 26 0 13 1 26 0 15 1 26 0 16 1 26 0 17 1 26 0 18 1 26 0 20 1 26 0 21 1 26 0 22 1 26 0 24 1 26 0 25 1 26 0 26 1 26 0 27 1 3 0 28 1 3 0 30 1 26 0 31 1 3 0 32 1 26 0 34 1 43 0 35 1 26 0 36 5 89 0 37 1 7 0 38 1 26 0 39 1 26 0 40 0 94 0 41 1 26 0 43 1 26 0 44 1 26 0 45 1 26 0 46 1 26 0 47 1 26 0 48 1 26 0 49 1 26 0 50 1 26 0 51 1 26 0 52 1 26 0 53 1 26 0 54 1 26 0 55 1 26 0 56 1 26 0 58 1 26 0 59 1 26 0 60 1 26 0 61 1 26 0 62 1 26 0 63 1 26 0 64 1 26 0 65 1 26 0 66 1 26 0 67 1 26 0 68 1 26 0 69 1 26 0 70 1 26 0 71 1 26 0 72 1 26 0 73 1 26 0 76 1 97 0 96] 
#[0 1 230 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 1 179 0 1 1 183 0 3 1 187 0 4 1 191 0 5 1 195 0 7 1 199 0 8 1 203 0 9 1 207 0 10 1 211 0 11 1 215 0 13 1 219 0 15 1 223 0 16 1 227 0 17 1 231 0 18 1 235 0 20 1 239 0 21 1 243 0 22 1 247 0 24 1 251 0 25 1 255 0 26 2 3 0 27 2 7 0 28 2 11 0 30 2 15 0 32 2 19 0 58 2 23 0 59 2 27 0 60 2 31 0 61 2 35 0 62 2 39 0 63 2 43 0 64 2 47 0 65 2 51 0 66 2 55 0 67 2 59 0 68 2 63 0 69 2 67 0 70 2 71 0 71 2 75 0 72 2 79 0 73 3 77 0 89 0 113 0 90 3 81 0 94 3 85 0 97 0 117 0 100 0 129 0 117 3 89 0 121 5 93 0 125 3 109 0 126 3 113 0 127 3 117 0 128 3 121 0 129 3 125 0 130 3 129 0 132 3 133 0 133 3 137 0 134 3 141 0 135 3 145 0 136 3 149 0 137 3 153 0 138 3 157 0 139 3 161 0 140 3 165 0 141 3 169 0 142 3 173 0 146 3 177 0 154 3 181 0 159 3 185 0 162 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 3 189 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[0 1 234 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 5 97 0 41] 
#[1 5 149 0 34 5 105 0 51 5 109 0 52 5 113 0 53 5 117 0 54 5 121 0 55 5 125 0 56 5 129 0 59 5 133 0 60 5 137 0 61 5 141 0 62 5 145 0 63 5 149 0 131] 
#[0 1 238 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 5 153 0 31] 
#[0 1 242 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[1 0 99 0 1 1 246 0 2 0 103 0 3 0 107 0 4 0 111 0 5 1 246 0 6 0 115 0 7 0 119 0 8 0 123 0 9 0 127 0 10 0 131 0 11 0 135 0 13 0 139 0 15 0 143 0 16 0 147 0 17 0 151 0 18 0 155 0 20 0 159 0 21 0 163 0 22 0 167 0 24 0 171 0 25 0 175 0 26 0 179 0 27 0 183 0 28 0 187 0 30 1 246 0 31 0 191 0 32 3 73 0 36 0 195 0 58 0 199 0 59 0 203 0 60 0 207 0 61 0 211 0 62 0 215 0 63 0 219 0 64 0 223 0 65 0 227 0 66 0 231 0 67 0 235 0 68 0 239 0 69 0 243 0 70 0 247 0 71 0 251 0 72 0 255 0 73 3 193 0 76 3 77 0 89 0 113 0 90 3 81 0 94 3 85 0 97 0 117 0 100 0 129 0 117 3 89 0 121 5 157 0 123 3 105 0 125 3 109 0 126 3 113 0 127 3 117 0 128 3 121 0 129 3 125 0 130 3 129 0 132 3 133 0 133 3 137 0 134 3 141 0 135 3 145 0 136 3 149 0 137 3 153 0 138 3 157 0 139 3 161 0 140 3 165 0 141 3 169 0 142 3 173 0 146 3 177 0 154 3 181 0 159 3 185 0 162 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 3 189 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215 3 193 0 216] 
#[1 0 6 0 1 0 6 0 2 0 6 0 3 0 6 0 4 0 6 0 5 0 6 0 6 0 6 0 7 0 6 0 8 0 6 0 9 0 6 0 10 0 6 0 11 0 6 0 13 0 6 0 15 0 6 0 16 0 6 0 17 0 6 0 18 0 6 0 20 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 26 0 6 0 27 0 6 0 28 0 6 0 30 0 6 0 31 0 6 0 32 1 71 0 36 0 6 0 58 0 6 0 59 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 70 0 6 0 71 0 6 0 72 0 6 0 73 1 75 0 76 5 161 0 216] 
#[0 1 250 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 1 254 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 2 2 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 2 6 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 2 10 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 2 14 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 2 18 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 2 22 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 2 26 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 2 30 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 2 34 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 2 38 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 2 42 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 2 46 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 2 50 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 2 54 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 2 58 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 2 62 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 2 66 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 2 70 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[1 2 74 0 1 2 74 0 2 2 74 0 3 2 74 0 4 2 74 0 5 2 74 0 6 2 74 0 7 2 74 0 8 2 74 0 9 2 74 0 10 2 74 0 11 2 74 0 13 2 74 0 15 2 74 0 16 2 74 0 17 2 74 0 18 2 74 0 20 2 74 0 21 2 74 0 22 2 74 0 24 2 74 0 25 2 74 0 26 2 74 0 27 2 74 0 28 2 74 0 30 2 74 0 31 2 74 0 32 1 162 0 34 1 162 0 35 2 74 0 36 5 165 0 39 5 169 0 40 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 2 83 0 51 2 87 0 52 2 91 0 53 2 95 0 54 2 99 0 55 2 103 0 56 2 74 0 58 2 107 0 59 2 111 0 60 2 115 0 61 2 119 0 62 2 123 0 63 2 127 0 64 2 74 0 65 2 74 0 66 2 74 0 67 2 74 0 68 2 74 0 69 2 74 0 70 2 74 0 71 2 74 0 72 2 74 0 73 2 74 0 76 4 201 0 99] 
#[1 3 21 0 1 1 233 0 3 0 249 0 4 3 25 0 5 3 29 0 7 3 33 0 8 0 253 0 9 1 1 0 10 1 5 0 11 3 37 0 13 3 41 0 15 0 93 0 16 3 153 0 17 3 49 0 18 0 97 0 20 3 53 0 21 3 57 0 22 3 61 0 24 0 101 0 25 2 101 0 26 3 65 0 27 1 245 0 28 1 173 0 30 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 3 77 0 89 0 113 0 90 3 81 0 94 3 85 0 97 0 117 0 100 0 129 0 117 3 89 0 121 5 177 0 125 3 109 0 126 3 113 0 127 3 117 0 128 3 121 0 129 3 125 0 130 3 129 0 132 3 133 0 133 3 137 0 134 3 141 0 135 3 145 0 136 3 149 0 137 3 153 0 138 3 157 0 139 3 161 0 140 3 165 0 141 3 169 0 142 3 173 0 146 3 177 0 154 3 181 0 159 3 185 0 162 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 3 189 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 2 131 0 29 0 162 0 35] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 5 181 0 27 1 13 0 28 5 185 0 31 1 21 0 32 2 253 0 57 1 29 0 62 1 33 0 64 5 189 0 110 3 5 0 113 3 5 0 163 1 45 0 165 3 5 0 166 1 53 0 167 1 57 0 170 1 61 0 171 5 193 0 172 1 65 0 174 1 69 0 175 1 73 0 176 5 197 0 177 1 77 0 178 1 45 0 193 1 89 0 203] 
#[0 5 201 0 33] 
#[1 1 9 0 27 5 205 0 31 5 209 0 62 5 213 0 94 5 217 0 165 5 217 0 193 5 221 0 204 5 225 0 206 5 229 0 208] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 1 105 0 27 1 13 0 28 1 21 0 32 1 29 0 62 1 213 0 64 5 233 0 163 1 45 0 165 5 233 0 166 1 53 0 167 5 233 0 169 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 45 0 193 1 89 0 203] 
#[0 2 78 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 2 82 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 2 86 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 1 2 0 28 1 2 0 29 1 173 0 30 1 2 0 35 1 2 0 38 1 2 0 42 5 237 0 121] 
#[1 4 25 0 28 3 225 0 29 4 29 0 38] 
#[1 5 241 0 29 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 4 73 0 51 4 77 0 52 4 81 0 53 4 85 0 54 4 89 0 55 4 93 0 56 4 97 0 59 4 101 0 60 4 105 0 61 4 109 0 62 4 113 0 63] 
#[0 5 245 0 33] 
#[0 2 90 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 2 94 0 1 2 94 0 2 2 94 0 3 2 94 0 4 2 94 0 5 2 94 0 6 2 94 0 7 2 94 0 8 2 94 0 9 2 94 0 10 2 94 0 11 2 94 0 13 2 94 0 15 2 94 0 16 2 94 0 17 2 94 0 18 2 94 0 20 2 94 0 21 2 94 0 22 2 94 0 24 2 94 0 25 2 94 0 26 2 94 0 27 2 94 0 28 2 94 0 29 2 94 0 30 2 94 0 31 2 94 0 32 2 94 0 33 2 94 0 34 2 94 0 35 2 94 0 36 2 94 0 37 2 94 0 39 2 94 0 40 2 94 0 42 2 135 0 43 2 139 0 44 2 143 0 45 2 147 0 46 2 151 0 47 2 155 0 48 2 159 0 49 2 163 0 50 2 167 0 51 2 171 0 52 2 175 0 53 2 179 0 54 2 183 0 55 2 187 0 56 2 94 0 58 2 191 0 59 2 195 0 60 2 199 0 61 2 203 0 62 2 207 0 63 2 94 0 64 2 94 0 65 2 94 0 66 2 94 0 67 2 94 0 68 2 94 0 69 2 94 0 70 2 94 0 71 2 94 0 72 2 94 0 73 2 94 0 76 2 94 0 217] 
#[1 2 98 0 1 2 98 0 2 2 98 0 3 2 98 0 4 2 98 0 5 2 98 0 6 2 98 0 7 2 98 0 8 2 98 0 9 2 98 0 10 2 98 0 11 2 98 0 13 2 98 0 15 2 98 0 16 2 98 0 17 2 98 0 18 2 98 0 20 2 98 0 21 2 98 0 22 2 98 0 24 2 98 0 25 2 98 0 26 2 98 0 27 2 98 0 28 2 98 0 29 2 98 0 30 2 98 0 31 2 98 0 32 2 98 0 33 2 98 0 34 2 98 0 35 2 98 0 36 2 98 0 37 2 98 0 39 2 98 0 40 2 98 0 42 2 211 0 43 2 215 0 44 2 219 0 45 2 223 0 46 2 227 0 47 2 231 0 48 2 235 0 49 2 239 0 50 2 243 0 51 2 247 0 52 2 251 0 53 2 255 0 54 3 3 0 55 3 7 0 56 2 98 0 58 3 11 0 59 3 15 0 60 3 19 0 61 3 23 0 62 3 27 0 63 2 98 0 64 2 98 0 65 2 98 0 66 2 98 0 67 2 98 0 68 2 98 0 69 2 98 0 70 2 98 0 71 2 98 0 72 2 98 0 73 2 98 0 76 2 98 0 217] 
#[1 2 102 0 1 2 102 0 2 2 102 0 3 2 102 0 4 2 102 0 5 2 102 0 6 2 102 0 7 2 102 0 8 2 102 0 9 2 102 0 10 2 102 0 11 2 102 0 13 2 102 0 15 2 102 0 16 2 102 0 17 2 102 0 18 2 102 0 20 2 102 0 21 2 102 0 22 2 102 0 24 2 102 0 25 2 102 0 26 2 102 0 27 2 102 0 28 2 102 0 29 2 102 0 30 2 102 0 31 2 102 0 32 2 102 0 33 2 102 0 34 2 102 0 35 2 102 0 36 2 102 0 37 2 102 0 39 2 102 0 40 2 102 0 42 3 31 0 43 3 35 0 44 3 39 0 45 3 43 0 46 3 47 0 47 3 51 0 48 3 55 0 49 3 59 0 50 3 63 0 51 3 67 0 52 3 71 0 53 3 75 0 54 3 79 0 55 3 83 0 56 2 102 0 58 3 87 0 59 3 91 0 60 3 95 0 61 3 99 0 62 3 103 0 63 2 102 0 64 2 102 0 65 2 102 0 66 2 102 0 67 2 102 0 68 2 102 0 69 2 102 0 70 2 102 0 71 2 102 0 72 2 102 0 73 2 102 0 76 2 102 0 217] 
#[1 2 106 0 1 2 106 0 2 2 106 0 3 2 106 0 4 2 106 0 5 2 106 0 6 2 106 0 7 2 106 0 8 2 106 0 9 2 106 0 10 2 106 0 11 2 106 0 13 2 106 0 15 2 106 0 16 2 106 0 17 2 106 0 18 2 106 0 20 2 106 0 21 2 106 0 22 2 106 0 24 2 106 0 25 2 106 0 26 2 106 0 27 2 106 0 28 2 106 0 29 2 106 0 30 2 106 0 31 2 106 0 32 2 106 0 33 2 106 0 34 2 106 0 35 2 106 0 36 2 106 0 37 2 106 0 39 2 106 0 40 2 106 0 42 3 107 0 43 3 111 0 44 3 115 0 45 3 119 0 46 3 123 0 47 3 127 0 48 3 131 0 49 3 135 0 50 3 139 0 51 3 143 0 52 3 147 0 53 3 151 0 54 3 155 0 55 3 159 0 56 2 106 0 58 3 163 0 59 3 167 0 60 3 171 0 61 3 175 0 62 3 179 0 63 2 106 0 64 2 106 0 65 2 106 0 66 2 106 0 67 2 106 0 68 2 106 0 69 2 106 0 70 2 106 0 71 2 106 0 72 2 106 0 73 2 106 0 76 2 106 0 217] 
#[1 3 183 0 28 1 130 0 29 1 130 0 35 3 187 0 38 1 130 0 42] 
#[1 2 110 0 1 2 110 0 2 2 110 0 3 2 110 0 4 2 110 0 5 2 110 0 6 2 110 0 7 2 110 0 8 2 110 0 9 2 110 0 10 2 110 0 11 2 110 0 13 2 110 0 15 2 110 0 16 2 110 0 17 2 110 0 18 2 110 0 20 2 110 0 21 2 110 0 22 2 110 0 24 2 110 0 25 2 110 0 26 2 110 0 27 2 110 0 28 2 110 0 29 2 110 0 30 2 110 0 31 2 110 0 32 2 110 0 33 2 110 0 34 2 110 0 35 2 110 0 36 2 110 0 37 2 110 0 39 2 110 0 40 2 110 0 42 3 191 0 43 3 195 0 44 3 199 0 45 3 203 0 46 3 207 0 47 3 211 0 48 3 215 0 49 3 219 0 50 3 223 0 51 3 227 0 52 3 231 0 53 3 235 0 54 3 239 0 55 3 243 0 56 2 110 0 58 3 247 0 59 3 251 0 60 3 255 0 61 4 3 0 62 4 7 0 63 2 110 0 64 2 110 0 65 2 110 0 66 2 110 0 67 2 110 0 68 2 110 0 69 2 110 0 70 2 110 0 71 2 110 0 72 2 110 0 73 2 110 0 76 2 110 0 217] 
#[1 2 114 0 1 2 114 0 2 2 114 0 3 2 114 0 4 2 114 0 5 2 114 0 6 2 114 0 7 2 114 0 8 2 114 0 9 2 114 0 10 2 114 0 11 2 114 0 13 2 114 0 15 2 114 0 16 2 114 0 17 2 114 0 18 2 114 0 20 2 114 0 21 2 114 0 22 2 114 0 24 2 114 0 25 2 114 0 26 2 114 0 27 2 114 0 28 2 114 0 29 2 114 0 30 2 114 0 31 2 114 0 32 2 114 0 33 2 114 0 34 2 114 0 35 2 114 0 36 2 114 0 37 2 114 0 39 2 114 0 40 2 114 0 42 4 11 0 43 4 15 0 44 4 19 0 45 4 23 0 46 4 27 0 47 4 31 0 48 4 35 0 49 4 39 0 50 4 43 0 51 4 47 0 52 4 51 0 53 4 55 0 54 4 59 0 55 4 63 0 56 2 114 0 58 4 67 0 59 4 71 0 60 4 75 0 61 4 79 0 62 4 83 0 63 2 114 0 64 2 114 0 65 2 114 0 66 2 114 0 67 2 114 0 68 2 114 0 69 2 114 0 70 2 114 0 71 2 114 0 72 2 114 0 73 2 114 0 76 2 114 0 217] 
#[1 2 118 0 1 2 118 0 2 2 118 0 3 2 118 0 4 2 118 0 5 2 118 0 6 2 118 0 7 2 118 0 8 2 118 0 9 2 118 0 10 2 118 0 11 2 118 0 13 2 118 0 15 2 118 0 16 2 118 0 17 2 118 0 18 2 118 0 20 2 118 0 21 2 118 0 22 2 118 0 24 2 118 0 25 2 118 0 26 2 118 0 27 2 118 0 28 2 118 0 29 2 118 0 30 2 118 0 31 2 118 0 32 2 118 0 33 2 118 0 34 2 118 0 35 2 118 0 36 2 118 0 37 2 118 0 39 2 118 0 40 2 118 0 42 4 87 0 43 4 91 0 44 4 95 0 45 4 99 0 46 4 103 0 47 4 107 0 48 4 111 0 49 4 115 0 50 4 119 0 51 4 123 0 52 4 127 0 53 4 131 0 54 4 135 0 55 4 139 0 56 2 118 0 58 4 143 0 59 4 147 0 60 4 151 0 61 4 155 0 62 4 159 0 63 2 118 0 64 2 118 0 65 2 118 0 66 2 118 0 67 2 118 0 68 2 118 0 69 2 118 0 70 2 118 0 71 2 118 0 72 2 118 0 73 2 118 0 76 2 118 0 217] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 5 249 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[0 5 253 0 27] 
#[1 1 138 0 28 1 138 0 29 2 122 0 30 1 138 0 35 1 138 0 38 1 138 0 42] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 1 105 0 27 1 13 0 28 1 21 0 32 1 29 0 62 1 33 0 64 6 1 0 163 1 45 0 165 6 1 0 166 1 53 0 167 6 1 0 169 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 45 0 193 1 89 0 203] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 6 5 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 6 9 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 6 13 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 6 17 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 6 21 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 6 25 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 6 29 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 6 33 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 6 37 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 6 41 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 6 45 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 6 49 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 6 53 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 6 57 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 6 61 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 6 65 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 6 69 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 6 73 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 6 77 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 6 81 0 29 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 6 85 0 97 6 89 0 163 2 61 0 165 6 89 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 2 197 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 6 93 0 37 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 6 97 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 6 101 0 27 6 105 0 28] 
#[0 2 126 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 2 130 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 2 134 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 2 138 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 2 142 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 4 149 0 30 6 109 0 31 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 6 113 0 76 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 6 117 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 6 121 0 196 6 125 0 197 6 129 0 200 6 133 0 201 6 137 0 202 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[0 2 146 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 2 150 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 2 154 0 29 0 35] 
#[1 2 158 0 33 2 158 0 35 2 158 0 37 6 141 0 153] 
#[1 6 145 0 33 6 149 0 35] 
#[1 2 158 0 33 2 158 0 35 2 158 0 37 6 153 0 153] 
#[0 2 162 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 1 9 0 27 1 13 0 28 6 157 0 29 1 21 0 32 1 25 0 42 1 29 0 62 1 33 0 64 1 37 0 94 1 41 0 163 1 45 0 165 1 41 0 166 1 53 0 167 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 6 161 0 184 1 45 0 193 1 89 0 203] 
#[0 2 166 0 29 0 35] 
#[0 2 170 0 3 0 16 0 20 0 25 0 36 0 76 0 217] 
#[0 2 174 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 34 0 35 0 36 0 41 0 42 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 2 178 0 27 0 29] 
#[1 2 182 0 1 2 182 0 2 2 182 0 3 2 182 0 4 2 182 0 5 2 182 0 6 2 182 0 7 2 182 0 8 2 182 0 9 2 182 0 10 2 182 0 11 2 182 0 13 2 182 0 15 2 182 0 16 2 182 0 17 2 182 0 18 2 182 0 20 2 182 0 21 2 182 0 22 2 182 0 24 2 182 0 25 2 182 0 26 2 182 0 27 2 182 0 28 2 182 0 29 2 182 0 30 2 182 0 31 2 182 0 32 2 182 0 34 4 163 0 35 2 182 0 36 2 182 0 37 2 182 0 42 2 182 0 51 2 182 0 52 2 182 0 53 2 182 0 54 2 182 0 55 2 182 0 56 2 182 0 58 2 182 0 59 2 182 0 60 2 182 0 61 2 182 0 62 2 182 0 63 2 182 0 64 2 182 0 65 2 182 0 66 2 182 0 67 2 182 0 68 2 182 0 69 2 182 0 70 2 182 0 71 2 182 0 72 2 182 0 73 2 182 0 76 6 169 0 98 2 182 0 217] 
#[0 2 186 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 2 190 0 27 0 29] 
#[0 2 194 0 27 0 29] 
#[0 2 198 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 2 202 0 3 0 4 0 9 0 10 0 11 0 27 0 28 0 31 0 32 0 33 0 35 0 36 0 51 0 57 0 62 0 64 0 76] 
#[1 2 206 0 3 2 206 0 4 2 206 0 9 2 206 0 10 2 206 0 11 2 206 0 27 2 206 0 28 2 206 0 31 2 206 0 32 2 206 0 33 2 206 0 35 2 206 0 36 6 173 0 51 2 206 0 57 2 206 0 62 2 206 0 64 2 206 0 76 6 177 0 111] 
#[0 2 210 0 3 0 4 0 9 0 10 0 11 0 27 0 28 0 32 0 62 0 64] 
#[1 0 165 0 27 1 161 0 94 6 181 0 109] 
#[0 2 214 0 33 0 35] 
#[0 2 218 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[1 2 222 0 2 2 222 0 6 2 222 0 31 6 185 0 155] 
#[1 2 226 0 1 2 226 0 2 2 226 0 3 2 226 0 4 2 226 0 5 2 226 0 6 2 226 0 7 2 226 0 8 2 226 0 9 2 226 0 10 2 226 0 11 2 226 0 13 2 226 0 15 2 226 0 16 2 226 0 17 2 226 0 18 2 226 0 20 2 226 0 21 2 226 0 22 2 226 0 24 2 226 0 25 2 226 0 26 2 226 0 27 2 226 0 28 2 226 0 30 2 226 0 31 2 226 0 32 2 226 0 36 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 4 73 0 51 4 77 0 52 4 81 0 53 4 85 0 54 4 89 0 55 4 93 0 56 2 226 0 58 4 167 0 59 4 171 0 60 4 175 0 61 4 179 0 62 4 183 0 63 2 226 0 64 2 226 0 65 2 226 0 66 2 226 0 67 2 226 0 68 2 226 0 69 2 226 0 70 2 226 0 71 2 226 0 72 2 226 0 73 2 226 0 76] 
#[1 2 230 0 1 2 230 0 2 2 230 0 3 2 230 0 4 2 230 0 5 2 230 0 6 2 230 0 7 2 230 0 8 2 230 0 9 2 230 0 10 2 230 0 11 2 230 0 13 2 230 0 15 2 230 0 16 2 230 0 17 2 230 0 18 2 230 0 20 2 230 0 21 2 230 0 22 2 230 0 24 2 230 0 25 2 230 0 26 2 230 0 27 2 230 0 28 2 230 0 30 2 230 0 31 2 230 0 32 2 230 0 36 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 4 73 0 51 4 77 0 52 4 81 0 53 4 85 0 54 4 89 0 55 4 93 0 56 2 230 0 58 4 187 0 59 4 191 0 60 4 195 0 61 4 199 0 62 4 203 0 63 2 230 0 64 2 230 0 65 2 230 0 66 2 230 0 67 2 230 0 68 2 230 0 69 2 230 0 70 2 230 0 71 2 230 0 72 2 230 0 73 2 230 0 76] 
#[0 2 234 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[1 1 26 0 3 1 26 0 4 1 26 0 9 1 26 0 10 1 26 0 11 1 26 0 26 1 26 0 27 1 3 0 28 1 3 0 30 1 3 0 32 1 26 0 34 1 43 0 35 1 26 0 36 1 7 0 38 1 26 0 39 1 26 0 40 4 207 0 41 1 26 0 43 1 26 0 44 1 26 0 45 1 26 0 46 1 26 0 47 1 26 0 48 1 26 0 49 1 26 0 50 1 26 0 51 1 26 0 52 1 26 0 53 1 26 0 54 1 26 0 55 1 26 0 56 1 26 0 58 1 26 0 59 1 26 0 60 1 26 0 61 1 26 0 62 1 26 0 63 1 26 0 64 1 26 0 65 1 26 0 66 1 26 0 67 1 26 0 68 1 26 0 69 1 26 0 70 1 26 0 71 1 26 0 72 1 26 0 73 1 26 0 76 1 97 0 96] 
#[1 2 238 0 2 2 238 0 6 2 238 0 31 6 193 0 143] 
#[1 0 6 0 3 0 6 0 4 0 6 0 9 0 6 0 10 0 6 0 11 0 6 0 26 0 6 0 27 0 6 0 28 0 6 0 30 0 6 0 32 6 197 0 36 0 6 0 58 0 6 0 59 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 70 0 6 0 71 0 6 0 72 0 6 0 73 6 197 0 76 6 197 0 216] 
#[0 6 201 0 30] 
#[1 2 74 0 3 2 74 0 4 2 74 0 9 2 74 0 10 2 74 0 11 2 74 0 26 2 74 0 27 2 74 0 28 4 211 0 30 2 74 0 32 1 162 0 34 1 162 0 35 2 74 0 36 5 165 0 39 5 169 0 40 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 2 83 0 51 2 87 0 52 2 91 0 53 2 95 0 54 2 99 0 55 2 103 0 56 2 74 0 58 2 107 0 59 2 111 0 60 2 115 0 61 2 119 0 62 2 123 0 63 2 127 0 64 2 74 0 65 2 74 0 66 2 74 0 67 2 74 0 68 2 74 0 69 2 74 0 70 2 74 0 71 2 74 0 72 2 74 0 73 2 74 0 76 4 201 0 99] 
#[1 1 78 0 3 1 78 0 4 1 78 0 9 1 78 0 10 1 78 0 11 1 78 0 26 1 78 0 27 1 11 0 28 1 78 0 30 1 15 0 32 1 78 0 34 1 78 0 35 1 78 0 36 6 209 0 38 1 78 0 39 1 78 0 40 1 78 0 43 1 78 0 44 1 78 0 45 1 78 0 46 1 78 0 47 1 78 0 48 1 78 0 49 1 78 0 50 1 78 0 51 1 78 0 52 1 78 0 53 1 78 0 54 1 78 0 55 1 78 0 56 1 78 0 58 1 78 0 59 1 78 0 60 1 78 0 61 1 78 0 62 1 78 0 63 1 78 0 64 1 78 0 65 1 78 0 66 1 78 0 67 1 78 0 68 1 78 0 69 1 78 0 70 1 78 0 71 1 78 0 72 1 78 0 73 1 78 0 76 4 129 0 210 4 133 0 211 4 137 0 212 4 141 0 213] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 6 213 0 27 1 245 0 28 6 217 0 30 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 6 221 0 148 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 6 225 0 185 5 25 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 0 6 0 3 0 6 0 4 0 6 0 9 0 6 0 10 0 6 0 11 0 6 0 26 0 6 0 27 0 6 0 28 0 6 0 32 6 229 0 36 0 6 0 58 0 6 0 59 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 70 0 6 0 71 0 6 0 72 0 6 0 73 6 229 0 76 6 229 0 216] 
#[1 2 74 0 3 2 74 0 4 2 74 0 9 2 74 0 10 2 74 0 11 2 74 0 26 2 74 0 27 2 74 0 28 1 173 0 30 2 74 0 32 1 162 0 34 1 162 0 35 2 74 0 36 5 165 0 39 5 169 0 40 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 2 83 0 51 2 87 0 52 2 91 0 53 2 95 0 54 2 99 0 55 2 103 0 56 2 74 0 58 2 107 0 59 2 111 0 60 2 115 0 61 2 119 0 62 2 123 0 63 2 127 0 64 2 74 0 65 2 74 0 66 2 74 0 67 2 74 0 68 2 74 0 69 2 74 0 70 2 74 0 71 2 74 0 72 2 74 0 73 2 74 0 76 4 201 0 99 6 233 0 121] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 6 237 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[0 2 242 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 6 241 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[0 6 245 0 41] 
#[1 6 249 0 34 5 105 0 51 5 109 0 52 5 113 0 53 5 117 0 54 5 121 0 55 5 125 0 56 5 129 0 59 5 133 0 60 5 137 0 61 5 141 0 62 5 145 0 63 5 149 0 131] 
#[0 2 246 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[1 0 6 0 3 0 6 0 4 0 6 0 9 0 6 0 10 0 6 0 11 0 6 0 26 0 6 0 27 0 6 0 28 0 6 0 30 0 6 0 32 1 71 0 36 0 6 0 58 0 6 0 59 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 70 0 6 0 71 0 6 0 72 0 6 0 73 1 75 0 76 6 253 0 216] 
#[1 1 173 0 30 7 1 0 121] 
#[1 1 173 0 30 7 5 0 121] 
#[1 2 74 0 3 2 74 0 4 2 74 0 9 2 74 0 10 2 74 0 11 2 74 0 26 2 74 0 27 2 74 0 28 4 215 0 30 2 74 0 32 1 162 0 34 1 162 0 35 2 74 0 36 5 165 0 39 5 169 0 40 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 2 83 0 51 2 87 0 52 2 91 0 53 2 95 0 54 2 99 0 55 2 103 0 56 2 74 0 58 2 107 0 59 2 111 0 60 2 115 0 61 2 119 0 62 2 123 0 63 2 127 0 64 2 74 0 65 2 74 0 66 2 74 0 67 2 74 0 68 2 74 0 69 2 74 0 70 2 74 0 71 2 74 0 72 2 74 0 73 2 74 0 76 4 201 0 99 7 9 0 121] 
#[1 0 103 0 3 0 107 0 4 0 123 0 9 0 127 0 10 0 131 0 11 0 175 0 26 4 219 0 27 0 183 0 28 0 6 0 30 0 191 0 32 7 17 0 36 0 195 0 58 0 199 0 59 0 203 0 60 0 207 0 61 0 211 0 62 0 215 0 63 0 219 0 64 0 223 0 65 0 227 0 66 0 231 0 67 0 235 0 68 0 239 0 69 0 243 0 70 0 247 0 71 0 251 0 72 0 255 0 73 7 17 0 76 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 7 13 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215 7 17 0 216] 
#[0 2 250 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[1 4 223 0 1 2 254 0 2 4 227 0 3 4 231 0 4 4 235 0 5 2 254 0 6 4 239 0 7 4 243 0 8 4 247 0 9 4 251 0 10 4 255 0 11 5 3 0 13 5 7 0 15 5 11 0 16 5 15 0 17 5 19 0 18 5 23 0 20 5 27 0 21 5 31 0 22 5 35 0 24 5 39 0 25 5 43 0 26 5 47 0 27 5 51 0 28 5 55 0 30 2 254 0 31 5 59 0 32 2 254 0 36 5 63 0 58 5 67 0 59 5 71 0 60 5 75 0 61 5 79 0 62 5 83 0 63 5 87 0 64 5 91 0 65 5 95 0 66 5 99 0 67 5 103 0 68 5 107 0 69 5 111 0 70 5 115 0 71 5 119 0 72 5 123 0 73 2 254 0 76 3 77 0 89 0 113 0 90 3 81 0 94 3 85 0 97 0 117 0 100 0 129 0 117 3 89 0 121 7 21 0 125 3 109 0 126 3 113 0 127 3 117 0 128 3 121 0 129 3 125 0 130 3 129 0 132 3 133 0 133 3 137 0 134 3 141 0 135 3 145 0 136 3 149 0 137 3 153 0 138 3 157 0 139 3 161 0 140 3 165 0 141 3 169 0 142 3 173 0 146 3 177 0 154 3 181 0 159 3 185 0 162 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 3 189 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 0 6 0 1 0 6 0 2 0 6 0 3 0 6 0 4 0 6 0 5 0 6 0 6 0 6 0 7 0 6 0 8 0 6 0 9 0 6 0 10 0 6 0 11 0 6 0 13 0 6 0 15 0 6 0 16 0 6 0 17 0 6 0 18 0 6 0 20 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 26 0 6 0 27 0 6 0 28 0 6 0 30 0 6 0 31 0 6 0 32 1 71 0 36 0 6 0 58 0 6 0 59 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 70 0 6 0 71 0 6 0 72 0 6 0 73 1 75 0 76 7 25 0 216] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 7 29 0 97 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 2 197 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[0 3 2 0 3 0 4 0 9 0 10 0 11 0 26 0 27 0 28 0 32 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73] 
#[0 7 33 0 34] 
#[0 7 37 0 34] 
#[0 7 41 0 34] 
#[0 7 45 0 34] 
#[0 7 49 0 34] 
#[0 7 53 0 34] 
#[0 7 57 0 34] 
#[0 7 61 0 34] 
#[0 7 65 0 34] 
#[0 7 69 0 34] 
#[0 7 73 0 34] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 7 77 0 97 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 2 197 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[0 3 6 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 12 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 3 10 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 3 14 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 3 18 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 3 22 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 7 81 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 0 6 0 1 0 6 0 2 0 6 0 3 0 6 0 4 0 6 0 5 0 6 0 6 0 6 0 7 0 6 0 8 0 6 0 9 0 6 0 10 0 6 0 11 0 6 0 13 0 6 0 15 0 6 0 16 0 6 0 17 0 6 0 18 0 6 0 20 0 6 0 21 0 6 0 22 0 6 0 24 0 6 0 25 0 6 0 26 0 6 0 27 0 6 0 28 0 6 0 30 0 6 0 31 0 6 0 32 1 71 0 36 0 6 0 58 0 6 0 59 0 6 0 60 0 6 0 61 0 6 0 62 0 6 0 63 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 70 0 6 0 71 0 6 0 72 0 6 0 73 1 75 0 76 7 85 0 216] 
#[1 0 154 0 3 0 154 0 4 0 154 0 9 0 154 0 10 0 154 0 11 0 154 0 27 5 127 0 28 0 154 0 31 0 154 0 32 0 154 0 36 1 225 0 38 0 154 0 51 0 154 0 57 0 154 0 62 0 154 0 64 0 154 0 76 7 89 0 181] 
#[0 3 26 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 0 6 0 3 0 6 0 4 0 6 0 9 0 6 0 10 0 6 0 11 0 6 0 27 0 6 0 28 0 6 0 31 0 6 0 32 7 93 0 36 0 6 0 57 0 6 0 62 0 6 0 64 7 93 0 76 7 93 0 216] 
#[0 3 30 0 3 0 4 0 9 0 10 0 11 0 27 0 28 0 31 0 32 0 57 0 62 0 64] 
#[1 0 6 0 3 0 6 0 4 0 6 0 9 0 6 0 10 0 6 0 11 0 6 0 27 0 6 0 28 0 6 0 31 0 6 0 32 7 97 0 36 0 6 0 57 0 6 0 62 0 6 0 64 7 97 0 76 7 97 0 216] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 1 105 0 27 1 13 0 28 1 21 0 32 1 29 0 62 1 33 0 64 7 101 0 163 1 45 0 165 7 101 0 166 1 53 0 167 7 101 0 169 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 45 0 193 1 89 0 203] 
#[0 3 34 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 1 105 0 27 7 105 0 165 7 105 0 193] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 1 105 0 27 1 13 0 28 1 21 0 32 1 29 0 62 1 33 0 64 7 109 0 163 1 45 0 165 7 109 0 166 1 53 0 167 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 45 0 193 1 89 0 203] 
#[1 3 38 0 27 3 38 0 31 2 157 0 32 3 38 0 36 3 38 0 62 3 38 0 72 3 38 0 73 3 38 0 76 7 113 0 164] 
#[0 3 42 0 27 0 31 0 62] 
#[1 0 6 0 27 0 6 0 31 7 117 0 36 0 6 0 62 7 117 0 76 7 117 0 216] 
#[1 3 46 0 27 3 46 0 31 3 46 0 36 3 46 0 62 7 121 0 72 7 121 0 73 3 46 0 76 7 121 0 207] 
#[0 5 131 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 3 50 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 3 54 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 1 105 0 27 1 13 0 28 1 21 0 32 1 29 0 62 1 33 0 64 7 125 0 163 1 45 0 165 7 125 0 166 1 53 0 167 7 125 0 169 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 45 0 193 1 89 0 203] 
#[1 7 129 0 29 7 133 0 35 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 4 73 0 51 4 77 0 52 4 81 0 53 4 85 0 54 4 89 0 55 4 93 0 56 4 97 0 59 4 101 0 60 4 105 0 61 4 109 0 62 4 113 0 63] 
#[0 3 58 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 3 62 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 3 66 0 1 3 66 0 2 3 66 0 3 3 66 0 4 3 66 0 5 3 66 0 6 3 66 0 7 3 66 0 8 3 66 0 9 3 66 0 10 3 66 0 11 3 66 0 13 3 66 0 15 3 66 0 16 3 66 0 17 3 66 0 18 3 66 0 20 3 66 0 21 3 66 0 22 3 66 0 24 3 66 0 25 3 66 0 26 3 66 0 27 3 66 0 28 3 66 0 29 3 66 0 30 3 66 0 31 3 66 0 32 3 66 0 33 3 66 0 34 3 66 0 35 3 66 0 36 3 66 0 37 3 66 0 39 3 66 0 40 3 66 0 42 5 135 0 43 5 139 0 44 5 143 0 45 5 147 0 46 5 151 0 47 5 155 0 48 5 159 0 49 5 163 0 50 5 167 0 51 5 171 0 52 5 175 0 53 5 179 0 54 5 183 0 55 5 187 0 56 3 66 0 58 5 191 0 59 5 195 0 60 5 199 0 61 5 203 0 62 5 207 0 63 3 66 0 64 3 66 0 65 3 66 0 66 3 66 0 67 3 66 0 68 3 66 0 69 3 66 0 70 3 66 0 71 3 66 0 72 3 66 0 73 3 66 0 76 3 66 0 217] 
#[1 3 70 0 1 3 70 0 2 3 70 0 3 3 70 0 4 3 70 0 5 3 70 0 6 3 70 0 7 3 70 0 8 3 70 0 9 3 70 0 10 3 70 0 11 3 70 0 13 3 70 0 15 3 70 0 16 3 70 0 17 3 70 0 18 3 70 0 20 3 70 0 21 3 70 0 22 3 70 0 24 3 70 0 25 3 70 0 26 3 70 0 27 3 70 0 28 3 70 0 29 3 70 0 30 3 70 0 31 3 70 0 32 3 70 0 33 3 70 0 34 3 70 0 35 3 70 0 36 3 70 0 37 3 70 0 39 3 70 0 40 3 70 0 42 5 211 0 43 5 215 0 44 5 219 0 45 5 223 0 46 5 227 0 47 5 231 0 48 5 235 0 49 5 239 0 50 5 243 0 51 5 247 0 52 5 251 0 53 5 255 0 54 6 3 0 55 6 7 0 56 3 70 0 58 6 11 0 59 6 15 0 60 6 19 0 61 6 23 0 62 6 27 0 63 3 70 0 64 3 70 0 65 3 70 0 66 3 70 0 67 3 70 0 68 3 70 0 69 3 70 0 70 3 70 0 71 3 70 0 72 3 70 0 73 3 70 0 76 3 70 0 217] 
#[1 3 74 0 1 3 74 0 2 3 74 0 3 3 74 0 4 3 74 0 5 3 74 0 6 3 74 0 7 3 74 0 8 3 74 0 9 3 74 0 10 3 74 0 11 3 74 0 13 3 74 0 15 3 74 0 16 3 74 0 17 3 74 0 18 3 74 0 20 3 74 0 21 3 74 0 22 3 74 0 24 3 74 0 25 3 74 0 26 3 74 0 27 3 74 0 28 3 74 0 29 3 74 0 30 3 74 0 31 3 74 0 32 3 74 0 33 3 74 0 34 3 74 0 35 3 74 0 36 3 74 0 37 3 74 0 39 3 74 0 40 3 74 0 42 6 31 0 43 6 35 0 44 6 39 0 45 6 43 0 46 6 47 0 47 6 51 0 48 6 55 0 49 6 59 0 50 6 63 0 51 6 67 0 52 6 71 0 53 6 75 0 54 6 79 0 55 6 83 0 56 3 74 0 58 6 87 0 59 6 91 0 60 6 95 0 61 6 99 0 62 6 103 0 63 3 74 0 64 3 74 0 65 3 74 0 66 3 74 0 67 3 74 0 68 3 74 0 69 3 74 0 70 3 74 0 71 3 74 0 72 3 74 0 73 3 74 0 76 3 74 0 217] 
#[1 3 78 0 1 3 78 0 2 3 78 0 3 3 78 0 4 3 78 0 5 3 78 0 6 3 78 0 7 3 78 0 8 3 78 0 9 3 78 0 10 3 78 0 11 3 78 0 13 3 78 0 15 3 78 0 16 3 78 0 17 3 78 0 18 3 78 0 20 3 78 0 21 3 78 0 22 3 78 0 24 3 78 0 25 3 78 0 26 3 78 0 27 3 78 0 28 3 78 0 29 3 78 0 30 3 78 0 31 3 78 0 32 3 78 0 33 3 78 0 34 3 78 0 35 3 78 0 36 3 78 0 37 3 78 0 39 3 78 0 40 3 78 0 42 6 107 0 43 6 111 0 44 6 115 0 45 6 119 0 46 6 123 0 47 6 127 0 48 6 131 0 49 6 135 0 50 6 139 0 51 6 143 0 52 6 147 0 53 6 151 0 54 6 155 0 55 6 159 0 56 3 78 0 58 6 163 0 59 6 167 0 60 6 171 0 61 6 175 0 62 6 179 0 63 3 78 0 64 3 78 0 65 3 78 0 66 3 78 0 67 3 78 0 68 3 78 0 69 3 78 0 70 3 78 0 71 3 78 0 72 3 78 0 73 3 78 0 76 3 78 0 217] 
#[1 3 82 0 1 3 82 0 2 3 82 0 3 3 82 0 4 3 82 0 5 3 82 0 6 3 82 0 7 3 82 0 8 3 82 0 9 3 82 0 10 3 82 0 11 3 82 0 13 3 82 0 15 3 82 0 16 3 82 0 17 3 82 0 18 3 82 0 20 3 82 0 21 3 82 0 22 3 82 0 24 3 82 0 25 3 82 0 26 3 82 0 27 3 82 0 28 3 82 0 29 3 82 0 30 3 82 0 31 3 82 0 32 3 82 0 33 3 82 0 34 3 82 0 35 3 82 0 36 3 82 0 37 3 82 0 39 3 82 0 40 3 82 0 42 6 183 0 43 6 187 0 44 6 191 0 45 6 195 0 46 6 199 0 47 6 203 0 48 6 207 0 49 6 211 0 50 6 215 0 51 6 219 0 52 6 223 0 53 6 227 0 54 6 231 0 55 6 235 0 56 3 82 0 58 6 239 0 59 6 243 0 60 6 247 0 61 6 251 0 62 6 255 0 63 3 82 0 64 3 82 0 65 3 82 0 66 3 82 0 67 3 82 0 68 3 82 0 69 3 82 0 70 3 82 0 71 3 82 0 72 3 82 0 73 3 82 0 76 3 82 0 217] 
#[1 3 86 0 1 3 86 0 2 3 86 0 3 3 86 0 4 3 86 0 5 3 86 0 6 3 86 0 7 3 86 0 8 3 86 0 9 3 86 0 10 3 86 0 11 3 86 0 13 3 86 0 15 3 86 0 16 3 86 0 17 3 86 0 18 3 86 0 20 3 86 0 21 3 86 0 22 3 86 0 24 3 86 0 25 3 86 0 26 3 86 0 27 3 86 0 28 3 86 0 29 3 86 0 30 3 86 0 31 3 86 0 32 3 86 0 33 3 86 0 34 3 86 0 35 3 86 0 36 3 86 0 37 3 86 0 39 3 86 0 40 3 86 0 42 7 3 0 43 7 7 0 44 7 11 0 45 7 15 0 46 7 19 0 47 7 23 0 48 7 27 0 49 7 31 0 50 7 35 0 51 7 39 0 52 7 43 0 53 7 47 0 54 7 51 0 55 7 55 0 56 3 86 0 58 7 59 0 59 7 63 0 60 7 67 0 61 7 71 0 62 7 75 0 63 3 86 0 64 3 86 0 65 3 86 0 66 3 86 0 67 3 86 0 68 3 86 0 69 3 86 0 70 3 86 0 71 3 86 0 72 3 86 0 73 3 86 0 76 3 86 0 217] 
#[1 3 90 0 1 3 90 0 2 3 90 0 3 3 90 0 4 3 90 0 5 3 90 0 6 3 90 0 7 3 90 0 8 3 90 0 9 3 90 0 10 3 90 0 11 3 90 0 13 3 90 0 15 3 90 0 16 3 90 0 17 3 90 0 18 3 90 0 20 3 90 0 21 3 90 0 22 3 90 0 24 3 90 0 25 3 90 0 26 3 90 0 27 3 90 0 28 3 90 0 29 3 90 0 30 3 90 0 31 3 90 0 32 3 90 0 33 3 90 0 34 3 90 0 35 3 90 0 36 3 90 0 37 3 90 0 39 3 90 0 40 3 90 0 42 7 79 0 43 7 83 0 44 7 87 0 45 7 91 0 46 7 95 0 47 7 99 0 48 7 103 0 49 7 107 0 50 7 111 0 51 7 115 0 52 7 119 0 53 7 123 0 54 7 127 0 55 7 131 0 56 3 90 0 58 7 135 0 59 7 139 0 60 7 143 0 61 7 147 0 62 7 151 0 63 3 90 0 64 3 90 0 65 3 90 0 66 3 90 0 67 3 90 0 68 3 90 0 69 3 90 0 70 3 90 0 71 3 90 0 72 3 90 0 73 3 90 0 76 3 90 0 217] 
#[1 3 94 0 1 3 94 0 2 3 94 0 3 3 94 0 4 3 94 0 5 3 94 0 6 3 94 0 7 3 94 0 8 3 94 0 9 3 94 0 10 3 94 0 11 3 94 0 13 3 94 0 15 3 94 0 16 3 94 0 17 3 94 0 18 3 94 0 20 3 94 0 21 3 94 0 22 3 94 0 24 3 94 0 25 3 94 0 26 3 94 0 27 3 94 0 28 3 94 0 29 3 94 0 30 3 94 0 31 3 94 0 32 3 94 0 33 3 94 0 34 3 94 0 35 3 94 0 36 3 94 0 37 3 94 0 39 3 94 0 40 3 94 0 42 7 155 0 43 7 159 0 44 7 163 0 45 7 167 0 46 7 171 0 47 7 175 0 48 7 179 0 49 7 183 0 50 7 187 0 51 7 191 0 52 7 195 0 53 7 199 0 54 7 203 0 55 7 207 0 56 3 94 0 58 7 211 0 59 7 215 0 60 7 219 0 61 7 223 0 62 7 227 0 63 3 94 0 64 3 94 0 65 3 94 0 66 3 94 0 67 3 94 0 68 3 94 0 69 3 94 0 70 3 94 0 71 3 94 0 72 3 94 0 73 3 94 0 76 3 94 0 217] 
#[1 3 98 0 1 3 98 0 2 3 98 0 3 3 98 0 4 3 98 0 5 3 98 0 6 3 98 0 7 3 98 0 8 3 98 0 9 3 98 0 10 3 98 0 11 3 98 0 13 3 98 0 15 3 98 0 16 3 98 0 17 3 98 0 18 3 98 0 20 3 98 0 21 3 98 0 22 3 98 0 24 3 98 0 25 3 98 0 26 3 98 0 27 3 98 0 28 3 98 0 29 3 98 0 30 3 98 0 31 3 98 0 32 3 98 0 33 3 98 0 34 3 98 0 35 3 98 0 36 3 98 0 37 3 98 0 39 3 98 0 40 3 98 0 42 7 231 0 43 7 235 0 44 7 239 0 45 7 243 0 46 7 247 0 47 7 251 0 48 7 255 0 49 8 3 0 50 8 7 0 51 8 11 0 52 8 15 0 53 8 19 0 54 8 23 0 55 8 27 0 56 3 98 0 58 8 31 0 59 8 35 0 60 8 39 0 61 8 43 0 62 8 47 0 63 3 98 0 64 3 98 0 65 3 98 0 66 3 98 0 67 3 98 0 68 3 98 0 69 3 98 0 70 3 98 0 71 3 98 0 72 3 98 0 73 3 98 0 76 3 98 0 217] 
#[1 3 102 0 1 3 102 0 2 3 102 0 3 3 102 0 4 3 102 0 5 3 102 0 6 3 102 0 7 3 102 0 8 3 102 0 9 3 102 0 10 3 102 0 11 3 102 0 13 3 102 0 15 3 102 0 16 3 102 0 17 3 102 0 18 3 102 0 20 3 102 0 21 3 102 0 22 3 102 0 24 3 102 0 25 3 102 0 26 3 102 0 27 3 102 0 28 3 102 0 29 3 102 0 30 3 102 0 31 3 102 0 32 3 102 0 33 3 102 0 34 3 102 0 35 3 102 0 36 3 102 0 37 3 102 0 39 3 102 0 40 3 102 0 42 8 51 0 43 8 55 0 44 8 59 0 45 8 63 0 46 8 67 0 47 8 71 0 48 8 75 0 49 8 79 0 50 8 83 0 51 8 87 0 52 8 91 0 53 8 95 0 54 8 99 0 55 8 103 0 56 3 102 0 58 8 107 0 59 8 111 0 60 8 115 0 61 8 119 0 62 8 123 0 63 3 102 0 64 3 102 0 65 3 102 0 66 3 102 0 67 3 102 0 68 3 102 0 69 3 102 0 70 3 102 0 71 3 102 0 72 3 102 0 73 3 102 0 76 3 102 0 217] 
#[1 3 106 0 1 3 106 0 2 3 106 0 3 3 106 0 4 3 106 0 5 3 106 0 6 3 106 0 7 3 106 0 8 3 106 0 9 3 106 0 10 3 106 0 11 3 106 0 13 3 106 0 15 3 106 0 16 3 106 0 17 3 106 0 18 3 106 0 20 3 106 0 21 3 106 0 22 3 106 0 24 3 106 0 25 3 106 0 26 3 106 0 27 3 106 0 28 3 106 0 29 3 106 0 30 3 106 0 31 3 106 0 32 3 106 0 33 3 106 0 34 3 106 0 35 3 106 0 36 3 106 0 37 3 106 0 39 3 106 0 40 3 106 0 42 8 127 0 43 8 131 0 44 8 135 0 45 8 139 0 46 8 143 0 47 8 147 0 48 8 151 0 49 8 155 0 50 8 159 0 51 8 163 0 52 8 167 0 53 8 171 0 54 8 175 0 55 8 179 0 56 3 106 0 58 8 183 0 59 8 187 0 60 8 191 0 61 8 195 0 62 8 199 0 63 3 106 0 64 3 106 0 65 3 106 0 66 3 106 0 67 3 106 0 68 3 106 0 69 3 106 0 70 3 106 0 71 3 106 0 72 3 106 0 73 3 106 0 76 3 106 0 217] 
#[1 3 110 0 1 3 110 0 2 3 110 0 3 3 110 0 4 3 110 0 5 3 110 0 6 3 110 0 7 3 110 0 8 3 110 0 9 3 110 0 10 3 110 0 11 3 110 0 13 3 110 0 15 3 110 0 16 3 110 0 17 3 110 0 18 3 110 0 20 3 110 0 21 3 110 0 22 3 110 0 24 3 110 0 25 3 110 0 26 3 110 0 27 3 110 0 28 3 110 0 29 3 110 0 30 3 110 0 31 3 110 0 32 3 110 0 33 3 110 0 34 3 110 0 35 3 110 0 36 3 110 0 37 3 110 0 39 3 110 0 40 3 110 0 42 8 203 0 43 8 207 0 44 8 211 0 45 8 215 0 46 8 219 0 47 8 223 0 48 8 227 0 49 8 231 0 50 8 235 0 51 8 239 0 52 8 243 0 53 8 247 0 54 8 251 0 55 8 255 0 56 3 110 0 58 9 3 0 59 9 7 0 60 9 11 0 61 9 15 0 62 9 19 0 63 3 110 0 64 3 110 0 65 3 110 0 66 3 110 0 67 3 110 0 68 3 110 0 69 3 110 0 70 3 110 0 71 3 110 0 72 3 110 0 73 3 110 0 76 3 110 0 217] 
#[1 3 114 0 1 3 114 0 2 3 114 0 3 3 114 0 4 3 114 0 5 3 114 0 6 3 114 0 7 3 114 0 8 3 114 0 9 3 114 0 10 3 114 0 11 3 114 0 13 3 114 0 15 3 114 0 16 3 114 0 17 3 114 0 18 3 114 0 20 3 114 0 21 3 114 0 22 3 114 0 24 3 114 0 25 3 114 0 26 3 114 0 27 3 114 0 28 3 114 0 29 3 114 0 30 3 114 0 31 3 114 0 32 3 114 0 33 3 114 0 34 3 114 0 35 3 114 0 36 3 114 0 37 3 114 0 39 3 114 0 40 3 114 0 42 9 23 0 43 9 27 0 44 9 31 0 45 9 35 0 46 9 39 0 47 9 43 0 48 9 47 0 49 9 51 0 50 9 55 0 51 9 59 0 52 9 63 0 53 9 67 0 54 9 71 0 55 9 75 0 56 3 114 0 58 9 79 0 59 9 83 0 60 9 87 0 61 9 91 0 62 9 95 0 63 3 114 0 64 3 114 0 65 3 114 0 66 3 114 0 67 3 114 0 68 3 114 0 69 3 114 0 70 3 114 0 71 3 114 0 72 3 114 0 73 3 114 0 76 3 114 0 217] 
#[1 3 118 0 1 3 118 0 2 3 118 0 3 3 118 0 4 3 118 0 5 3 118 0 6 3 118 0 7 3 118 0 8 3 118 0 9 3 118 0 10 3 118 0 11 3 118 0 13 3 118 0 15 3 118 0 16 3 118 0 17 3 118 0 18 3 118 0 20 3 118 0 21 3 118 0 22 3 118 0 24 3 118 0 25 3 118 0 26 3 118 0 27 3 118 0 28 3 118 0 29 3 118 0 30 3 118 0 31 3 118 0 32 3 118 0 33 3 118 0 34 3 118 0 35 3 118 0 36 3 118 0 37 3 118 0 39 3 118 0 40 3 118 0 42 9 99 0 43 9 103 0 44 9 107 0 45 9 111 0 46 9 115 0 47 9 119 0 48 9 123 0 49 9 127 0 50 9 131 0 51 9 135 0 52 9 139 0 53 9 143 0 54 9 147 0 55 9 151 0 56 3 118 0 58 9 155 0 59 9 159 0 60 9 163 0 61 9 167 0 62 9 171 0 63 3 118 0 64 3 118 0 65 3 118 0 66 3 118 0 67 3 118 0 68 3 118 0 69 3 118 0 70 3 118 0 71 3 118 0 72 3 118 0 73 3 118 0 76 3 118 0 217] 
#[1 3 122 0 1 3 122 0 2 3 122 0 3 3 122 0 4 3 122 0 5 3 122 0 6 3 122 0 7 3 122 0 8 3 122 0 9 3 122 0 10 3 122 0 11 3 122 0 13 3 122 0 15 3 122 0 16 3 122 0 17 3 122 0 18 3 122 0 20 3 122 0 21 3 122 0 22 3 122 0 24 3 122 0 25 3 122 0 26 3 122 0 27 3 122 0 28 3 122 0 29 3 122 0 30 3 122 0 31 3 122 0 32 3 122 0 33 3 122 0 34 3 122 0 35 3 122 0 36 3 122 0 37 3 122 0 39 3 122 0 40 3 122 0 42 9 175 0 43 9 179 0 44 9 183 0 45 9 187 0 46 9 191 0 47 9 195 0 48 9 199 0 49 9 203 0 50 9 207 0 51 9 211 0 52 9 215 0 53 9 219 0 54 9 223 0 55 9 227 0 56 3 122 0 58 9 231 0 59 9 235 0 60 9 239 0 61 9 243 0 62 9 247 0 63 3 122 0 64 3 122 0 65 3 122 0 66 3 122 0 67 3 122 0 68 3 122 0 69 3 122 0 70 3 122 0 71 3 122 0 72 3 122 0 73 3 122 0 76 3 122 0 217] 
#[1 3 126 0 1 3 126 0 2 3 126 0 3 3 126 0 4 3 126 0 5 3 126 0 6 3 126 0 7 3 126 0 8 3 126 0 9 3 126 0 10 3 126 0 11 3 126 0 13 3 126 0 15 3 126 0 16 3 126 0 17 3 126 0 18 3 126 0 20 3 126 0 21 3 126 0 22 3 126 0 24 3 126 0 25 3 126 0 26 3 126 0 27 3 126 0 28 3 126 0 29 3 126 0 30 3 126 0 31 3 126 0 32 3 126 0 33 3 126 0 34 3 126 0 35 3 126 0 36 3 126 0 37 3 126 0 39 3 126 0 40 3 126 0 42 9 251 0 43 9 255 0 44 10 3 0 45 10 7 0 46 10 11 0 47 10 15 0 48 10 19 0 49 10 23 0 50 10 27 0 51 10 31 0 52 10 35 0 53 10 39 0 54 10 43 0 55 10 47 0 56 3 126 0 58 10 51 0 59 10 55 0 60 10 59 0 61 10 63 0 62 10 67 0 63 3 126 0 64 3 126 0 65 3 126 0 66 3 126 0 67 3 126 0 68 3 126 0 69 3 126 0 70 3 126 0 71 3 126 0 72 3 126 0 73 3 126 0 76 3 126 0 217] 
#[1 3 130 0 1 3 130 0 2 3 130 0 3 3 130 0 4 3 130 0 5 3 130 0 6 3 130 0 7 3 130 0 8 3 130 0 9 3 130 0 10 3 130 0 11 3 130 0 13 3 130 0 15 3 130 0 16 3 130 0 17 3 130 0 18 3 130 0 20 3 130 0 21 3 130 0 22 3 130 0 24 3 130 0 25 3 130 0 26 3 130 0 27 3 130 0 28 3 130 0 29 3 130 0 30 3 130 0 31 3 130 0 32 3 130 0 33 3 130 0 34 3 130 0 35 3 130 0 36 3 130 0 37 3 130 0 39 3 130 0 40 3 130 0 42 10 71 0 43 10 75 0 44 10 79 0 45 10 83 0 46 10 87 0 47 10 91 0 48 10 95 0 49 10 99 0 50 10 103 0 51 10 107 0 52 10 111 0 53 10 115 0 54 10 119 0 55 10 123 0 56 3 130 0 58 10 127 0 59 10 131 0 60 10 135 0 61 10 139 0 62 10 143 0 63 3 130 0 64 3 130 0 65 3 130 0 66 3 130 0 67 3 130 0 68 3 130 0 69 3 130 0 70 3 130 0 71 3 130 0 72 3 130 0 73 3 130 0 76 3 130 0 217] 
#[1 3 134 0 1 3 134 0 2 3 134 0 3 3 134 0 4 3 134 0 5 3 134 0 6 3 134 0 7 3 134 0 8 3 134 0 9 3 134 0 10 3 134 0 11 3 134 0 13 3 134 0 15 3 134 0 16 3 134 0 17 3 134 0 18 3 134 0 20 3 134 0 21 3 134 0 22 3 134 0 24 3 134 0 25 3 134 0 26 3 134 0 27 3 134 0 28 3 134 0 29 3 134 0 30 3 134 0 31 3 134 0 32 3 134 0 33 3 134 0 34 3 134 0 35 3 134 0 36 3 134 0 37 3 134 0 39 3 134 0 40 3 134 0 42 10 147 0 43 10 151 0 44 10 155 0 45 10 159 0 46 10 163 0 47 10 167 0 48 10 171 0 49 10 175 0 50 10 179 0 51 10 183 0 52 10 187 0 53 10 191 0 54 10 195 0 55 10 199 0 56 3 134 0 58 10 203 0 59 10 207 0 60 10 211 0 61 10 215 0 62 10 219 0 63 3 134 0 64 3 134 0 65 3 134 0 66 3 134 0 67 3 134 0 68 3 134 0 69 3 134 0 70 3 134 0 71 3 134 0 72 3 134 0 73 3 134 0 76 3 134 0 217] 
#[1 3 138 0 1 3 138 0 2 3 138 0 3 3 138 0 4 3 138 0 5 3 138 0 6 3 138 0 7 3 138 0 8 3 138 0 9 3 138 0 10 3 138 0 11 3 138 0 13 3 138 0 15 3 138 0 16 3 138 0 17 3 138 0 18 3 138 0 20 3 138 0 21 3 138 0 22 3 138 0 24 3 138 0 25 3 138 0 26 3 138 0 27 3 138 0 28 3 138 0 29 3 138 0 30 3 138 0 31 3 138 0 32 3 138 0 33 3 138 0 34 3 138 0 35 3 138 0 36 3 138 0 37 3 138 0 39 3 138 0 40 3 138 0 42 10 223 0 43 10 227 0 44 10 231 0 45 10 235 0 46 10 239 0 47 10 243 0 48 10 247 0 49 10 251 0 50 10 255 0 51 11 3 0 52 11 7 0 53 11 11 0 54 11 15 0 55 11 19 0 56 3 138 0 58 11 23 0 59 11 27 0 60 11 31 0 61 11 35 0 62 11 39 0 63 3 138 0 64 3 138 0 65 3 138 0 66 3 138 0 67 3 138 0 68 3 138 0 69 3 138 0 70 3 138 0 71 3 138 0 72 3 138 0 73 3 138 0 76 3 138 0 217] 
#[0 3 142 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 3 146 0 29 7 145 0 35 7 141 0 42 7 145 0 214] 
#[1 4 25 0 28 3 146 0 29 7 149 0 35 4 29 0 38 7 153 0 42 7 157 0 214] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 7 161 0 33 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 7 165 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 7 169 0 33 7 173 0 37 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 4 73 0 51 4 77 0 52 4 81 0 53 4 85 0 54 4 89 0 55 4 93 0 56 4 97 0 59 4 101 0 60 4 105 0 61 4 109 0 62 4 113 0 63] 
#[0 3 150 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 1 105 0 27 1 13 0 28 1 21 0 32 1 29 0 62 1 33 0 64 7 177 0 163 1 45 0 165 7 177 0 166 1 53 0 167 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 45 0 193 1 89 0 203] 
#[0 3 154 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 4 149 0 30 7 181 0 31 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 6 117 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 6 121 0 196 7 185 0 197 6 129 0 200 6 133 0 201 6 137 0 202 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 3 158 0 31 3 158 0 35 3 162 0 37 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 4 73 0 51 4 77 0 52 4 81 0 53 4 85 0 54 4 89 0 55 4 93 0 56 4 97 0 59 4 101 0 60 4 105 0 61 4 109 0 62 4 113 0 63 3 158 0 76] 
#[1 3 166 0 31 3 166 0 35 3 170 0 37 3 166 0 76] 
#[1 7 189 0 31 7 193 0 35 7 197 0 76] 
#[1 3 174 0 31 3 174 0 35 3 174 0 76 7 201 0 199] 
#[0 7 205 0 37] 
#[0 3 178 0 31 0 35 0 76] 
#[1 3 182 0 33 11 43 0 35 3 182 0 37 7 213 0 152] 
#[0 3 186 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 7 217 0 33] 
#[1 3 190 0 33 11 47 0 35 3 190 0 37 7 213 0 152] 
#[0 3 194 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 3 198 0 29 0 35] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 7 221 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[0 3 202 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 34 0 35 0 36 0 37 0 42 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 1 105 0 27 1 13 0 28 1 21 0 32 2 253 0 57 1 29 0 62 1 33 0 64 7 225 0 113 7 225 0 163 1 45 0 165 7 225 0 166 1 53 0 167 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 45 0 193 1 89 0 203] 
#[0 3 206 0 3 0 4 0 9 0 10 0 11 0 27 0 28 0 31 0 32 0 33 0 35 0 36 0 51 0 57 0 62 0 64 0 76] 
#[0 3 210 0 33 0 35] 
#[1 7 229 0 2 7 233 0 6 7 237 0 31 7 241 0 156 7 245 0 157] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 1 29 0 62 1 33 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 7 249 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 7 253 0 2 8 1 0 6 8 5 0 31 8 9 0 144 8 13 0 145] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 6 213 0 27 1 245 0 28 8 17 0 30 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 8 21 0 148 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 8 25 0 185 5 25 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 3 214 0 2 3 214 0 6 3 214 0 31 8 29 0 147] 
#[1 2 238 0 2 2 238 0 6 2 238 0 31 8 33 0 143] 
#[1 6 101 0 27 8 37 0 28] 
#[1 1 3 0 28 1 3 0 30 1 3 0 32 1 7 0 38 6 189 0 41 1 26 0 43 1 26 0 44 1 26 0 45 1 26 0 46 1 26 0 47 1 26 0 48 1 26 0 49 1 26 0 50 1 26 0 51 1 26 0 52 1 26 0 53 1 26 0 54 1 26 0 55 1 26 0 56 1 26 0 59 1 26 0 60 1 26 0 61 1 26 0 62 1 26 0 63] 
#[1 2 238 0 2 2 238 0 6 2 238 0 31 8 41 0 143] 
#[0 8 45 0 30] 
#[1 8 49 0 30 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 4 73 0 51 4 77 0 52 4 81 0 53 4 85 0 54 4 89 0 55 4 93 0 56 4 97 0 59 4 101 0 60 4 105 0 61 4 109 0 62 4 113 0 63] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 8 53 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 3 218 0 1 3 218 0 2 3 218 0 3 3 218 0 4 3 218 0 5 3 218 0 6 3 218 0 7 3 218 0 8 3 218 0 9 3 218 0 10 3 218 0 11 8 57 0 12 3 218 0 13 3 218 0 15 3 218 0 16 3 218 0 17 3 218 0 18 3 218 0 20 3 218 0 21 3 218 0 22 3 218 0 24 3 218 0 25 3 218 0 26 3 218 0 27 3 218 0 28 3 218 0 30 3 218 0 31 3 218 0 32 3 218 0 36 3 218 0 58 3 218 0 59 3 218 0 60 3 218 0 61 3 218 0 62 3 218 0 63 3 218 0 64 3 218 0 65 3 218 0 66 3 218 0 67 3 218 0 68 3 218 0 69 3 218 0 70 3 218 0 71 3 218 0 72 3 218 0 73 3 218 0 76] 
#[1 1 173 0 30 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 4 73 0 51 4 77 0 52 4 81 0 53 4 85 0 54 4 89 0 55 4 93 0 56 4 97 0 59 4 101 0 60 4 105 0 61 4 109 0 62 4 113 0 63 8 61 0 121] 
#[1 3 222 0 30 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 4 73 0 51 4 77 0 52 4 81 0 53 4 85 0 54 4 89 0 55 4 93 0 56 4 97 0 59 4 101 0 60 4 105 0 61 4 109 0 62 4 113 0 63] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 8 65 0 19 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 7 29 0 97 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 2 197 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 3 2 0 3 3 2 0 4 3 2 0 9 3 2 0 10 3 2 0 11 8 69 0 19 3 2 0 26 3 2 0 27 3 2 0 28 3 2 0 32 3 2 0 58 3 2 0 59 3 2 0 60 3 2 0 61 3 2 0 62 3 2 0 63 3 2 0 64 3 2 0 65 3 2 0 66 3 2 0 67 3 2 0 68 3 2 0 69 3 2 0 70 3 2 0 71 3 2 0 72 3 2 0 73] 
#[1 0 103 0 3 0 107 0 4 0 123 0 9 0 127 0 10 0 131 0 11 0 175 0 26 4 219 0 27 0 183 0 28 0 6 0 30 0 191 0 32 8 77 0 36 0 195 0 58 0 199 0 59 0 203 0 60 0 207 0 61 0 211 0 62 0 215 0 63 0 219 0 64 0 223 0 65 0 227 0 66 0 231 0 67 0 235 0 68 0 239 0 69 0 243 0 70 0 247 0 71 0 251 0 72 0 255 0 73 8 77 0 76 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 8 73 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215 8 77 0 216] 
#[0 3 226 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 3 230 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 3 234 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[1 0 6 0 3 0 6 0 4 0 6 0 9 0 6 0 10 0 6 0 11 0 6 0 26 0 6 0 27 0 6 0 28 0 6 0 30 0 6 0 32 8 81 0 36 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 4 73 0 51 4 77 0 52 4 81 0 53 4 85 0 54 4 89 0 55 4 93 0 56 0 6 0 58 11 51 0 59 11 55 0 60 11 59 0 61 11 63 0 62 11 67 0 63 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 70 0 6 0 71 0 6 0 72 0 6 0 73 8 81 0 76 8 81 0 216] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 2 205 0 27 1 245 0 28 3 238 0 30 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 3 81 0 94 3 85 0 97 8 85 0 126 3 113 0 127 3 117 0 128 3 121 0 129 3 125 0 130 3 129 0 132 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 3 189 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[0 3 242 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 3 246 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 3 250 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 3 254 0 3 0 4 0 9 0 10 0 11 0 26 0 27 0 28 0 32 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73] 
#[0 4 2 0 3 0 4 0 9 0 10 0 11 0 26 0 27 0 28 0 32 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73] 
#[0 4 6 0 3 0 4 0 9 0 10 0 11 0 26 0 27 0 28 0 32 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73] 
#[0 4 10 0 3 0 4 0 9 0 10 0 11 0 26 0 27 0 28 0 32 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73] 
#[0 4 14 0 3 0 4 0 9 0 10 0 11 0 26 0 27 0 28 0 32 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73] 
#[0 4 18 0 3 0 4 0 9 0 10 0 11 0 26 0 27 0 28 0 32 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73] 
#[0 4 22 0 3 0 4 0 9 0 10 0 11 0 26 0 27 0 28 0 32 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73] 
#[0 4 26 0 3 0 4 0 9 0 10 0 11 0 26 0 27 0 28 0 32 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73] 
#[0 4 30 0 3 0 4 0 9 0 10 0 11 0 26 0 27 0 28 0 32 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73] 
#[0 4 34 0 3 0 4 0 9 0 10 0 11 0 26 0 27 0 28 0 32 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73] 
#[0 4 38 0 3 0 4 0 9 0 10 0 11 0 26 0 27 0 28 0 32 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73] 
#[0 4 42 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[1 4 46 0 1 4 46 0 2 4 46 0 3 4 46 0 4 4 46 0 5 4 46 0 6 4 46 0 7 4 46 0 8 4 46 0 9 4 46 0 10 4 46 0 11 4 46 0 13 4 46 0 15 4 46 0 16 4 46 0 17 4 46 0 18 4 46 0 20 4 46 0 21 4 46 0 22 4 46 0 24 4 46 0 25 4 46 0 26 4 46 0 27 4 46 0 28 4 46 0 30 4 46 0 31 4 46 0 32 4 46 0 36 4 46 0 37 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 4 73 0 51 4 77 0 52 4 81 0 53 4 85 0 54 4 89 0 55 4 93 0 56 4 46 0 58 11 71 0 59 11 75 0 60 11 79 0 61 11 83 0 62 11 87 0 63 4 46 0 64 4 46 0 65 4 46 0 66 4 46 0 67 4 46 0 68 4 46 0 69 4 46 0 70 4 46 0 71 4 46 0 72 4 46 0 73 4 46 0 76] 
#[0 4 50 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[1 11 91 0 3 11 95 0 4 11 99 0 9 11 103 0 10 11 107 0 11 11 111 0 27 11 115 0 28 4 54 0 31 11 119 0 32 4 54 0 36 4 54 0 57 11 123 0 62 11 127 0 64 4 54 0 76 8 89 0 163 1 45 0 165 8 89 0 166 1 53 0 167 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 8 89 0 180 8 89 0 181 1 45 0 193 1 89 0 203] 
#[0 4 58 0 3 0 4 0 9 0 10 0 11 0 27 0 28 0 31 0 32 0 57 0 62 0 64] 
#[0 4 62 0 3 0 4 0 9 0 10 0 11 0 27 0 28 0 31 0 32 0 57 0 62 0 64] 
#[0 4 66 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 42 0 51 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 4 70 0 27 4 70 0 31 2 157 0 32 4 70 0 36 4 70 0 62 4 70 0 72 4 70 0 73 4 70 0 76 8 93 0 164] 
#[1 4 74 0 27 4 74 0 31 4 74 0 36 4 74 0 62 8 97 0 72 8 97 0 73 4 74 0 76 8 97 0 207] 
#[0 4 78 0 27 0 31 0 36 0 62 0 72 0 73 0 76] 
#[0 4 82 0 27 0 31 0 62] 
#[0 4 86 0 27 0 31 0 36 0 62 0 76] 
#[0 4 90 0 30] 
#[0 4 94 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 8 101 0 29] 
#[0 4 98 0 29] 
#[1 3 146 0 29 8 105 0 35 8 105 0 214] 
#[0 8 109 0 29] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 4 98 0 29 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 8 113 0 97 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 2 197 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 3 146 0 29 8 117 0 35 8 117 0 214] 
#[0 8 121 0 29] 
#[0 4 102 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 8 125 0 33 8 129 0 37 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 4 73 0 51 4 77 0 52 4 81 0 53 4 85 0 54 4 89 0 55 4 93 0 56 4 97 0 59 4 101 0 60 4 105 0 61 4 109 0 62 4 113 0 63] 
#[0 4 106 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 8 133 0 33 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 8 137 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[0 8 141 0 29] 
#[0 4 110 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 8 145 0 31 8 149 0 35 8 153 0 76] 
#[0 4 114 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 8 157 0 31 8 161 0 76] 
#[0 8 165 0 31] 
#[1 4 118 0 31 11 131 0 35 4 118 0 76 8 173 0 198] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 4 149 0 30 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 8 177 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 8 181 0 196 8 185 0 202 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 8 189 0 26 1 105 0 27 1 13 0 28 1 21 0 32 1 29 0 62 1 33 0 64 8 193 0 163 1 45 0 165 8 193 0 166 1 53 0 167 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 45 0 193 1 89 0 203] 
#[0 4 122 0 33 0 35 0 37] 
#[0 4 126 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 57 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 4 130 0 1 4 130 0 2 4 130 0 3 4 130 0 4 4 130 0 5 4 130 0 6 4 130 0 7 4 130 0 8 4 130 0 9 4 130 0 10 4 130 0 11 4 130 0 13 4 130 0 15 4 130 0 16 4 130 0 17 4 130 0 18 4 130 0 20 4 130 0 21 4 130 0 22 4 130 0 24 4 130 0 25 4 130 0 26 4 130 0 27 4 130 0 28 4 130 0 29 4 130 0 30 4 130 0 31 4 130 0 32 4 130 0 34 4 130 0 35 4 130 0 36 4 130 0 37 4 130 0 42 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 11 135 0 51 11 139 0 52 11 143 0 53 11 147 0 54 11 151 0 55 11 155 0 56 4 130 0 58 11 159 0 59 11 163 0 60 11 167 0 61 11 171 0 62 11 175 0 63 4 130 0 64 4 130 0 65 4 130 0 66 4 130 0 67 4 130 0 68 4 130 0 69 4 130 0 70 4 130 0 71 4 130 0 72 4 130 0 73 4 130 0 76 4 130 0 217] 
#[0 4 134 0 3 0 4 0 9 0 10 0 11 0 27 0 28 0 31 0 32 0 33 0 35 0 36 0 51 0 57 0 62 0 64 0 76] 
#[0 4 138 0 37] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 2 205 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 8 197 0 94 8 201 0 97 8 205 0 128 8 209 0 158 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 8 213 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[0 4 142 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 4 146 0 2 0 6 0 31] 
#[0 8 217 0 37] 
#[1 4 117 0 28 4 121 0 32 8 221 0 38 4 129 0 210 4 133 0 211 4 137 0 212 4 141 0 213] 
#[0 4 150 0 37] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 8 225 0 97 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 2 197 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[0 4 154 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 4 158 0 2 0 6 0 31] 
#[0 8 229 0 37] 
#[1 2 238 0 2 2 238 0 6 2 238 0 31 8 233 0 143] 
#[0 8 237 0 30] 
#[1 8 241 0 30 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 4 73 0 51 4 77 0 52 4 81 0 53 4 85 0 54 4 89 0 55 4 93 0 56 4 97 0 59 4 101 0 60 4 105 0 61 4 109 0 62 4 113 0 63] 
#[1 9 5 0 2 8 249 0 6 8 253 0 31 9 1 0 149 9 5 0 150] 
#[1 7 253 0 2 8 1 0 6 9 9 0 31 8 9 0 144 8 13 0 145] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 9 13 0 20 1 105 0 27 1 13 0 28 1 21 0 32 1 29 0 62 1 33 0 64 7 177 0 163 1 45 0 165 7 177 0 166 1 53 0 167 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 45 0 193 1 89 0 203] 
#[1 7 253 0 2 8 1 0 6 9 17 0 31 8 9 0 144 8 13 0 145] 
#[1 3 214 0 2 3 214 0 6 3 214 0 31 9 21 0 147] 
#[1 2 238 0 2 2 238 0 6 2 238 0 31 9 25 0 143] 
#[1 1 173 0 30 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 4 73 0 51 4 77 0 52 4 81 0 53 4 85 0 54 4 89 0 55 4 93 0 56 4 97 0 59 4 101 0 60 4 105 0 61 4 109 0 62 4 113 0 63 9 29 0 121] 
#[1 3 49 0 18 1 173 0 30 9 33 0 121 9 37 0 140] 
#[1 4 162 0 1 4 162 0 2 4 162 0 3 4 162 0 4 4 162 0 5 4 162 0 6 4 162 0 7 4 162 0 8 4 162 0 9 4 162 0 10 4 162 0 11 9 41 0 12 4 162 0 13 4 162 0 15 4 162 0 16 4 162 0 17 4 162 0 18 4 162 0 20 4 162 0 21 4 162 0 22 4 162 0 24 4 162 0 25 4 162 0 26 4 162 0 27 4 162 0 28 4 162 0 30 4 162 0 31 4 162 0 32 4 162 0 36 4 162 0 58 4 162 0 59 4 162 0 60 4 162 0 61 4 162 0 62 4 162 0 63 4 162 0 64 4 162 0 65 4 162 0 66 4 162 0 67 4 162 0 68 4 162 0 69 4 162 0 70 4 162 0 71 4 162 0 72 4 162 0 73 4 162 0 76] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 9 45 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 9 49 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 0 6 0 3 0 6 0 4 0 6 0 9 0 6 0 10 0 6 0 11 0 6 0 26 0 6 0 27 0 6 0 28 0 6 0 30 0 6 0 32 9 53 0 36 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 4 73 0 51 4 77 0 52 4 81 0 53 4 85 0 54 4 89 0 55 4 93 0 56 0 6 0 58 11 51 0 59 11 55 0 60 11 59 0 61 11 63 0 62 11 67 0 63 0 6 0 64 0 6 0 65 0 6 0 66 0 6 0 67 0 6 0 68 0 6 0 69 0 6 0 70 0 6 0 71 0 6 0 72 0 6 0 73 9 53 0 76 9 53 0 216] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 2 205 0 27 1 245 0 28 4 166 0 30 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 3 81 0 94 3 85 0 97 9 57 0 126 3 113 0 127 3 117 0 128 3 121 0 129 3 125 0 130 3 129 0 132 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 3 189 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 2 205 0 27 1 245 0 28 4 170 0 30 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 3 81 0 94 3 85 0 97 9 61 0 126 3 113 0 127 3 117 0 128 3 121 0 129 3 125 0 130 3 129 0 132 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 3 189 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[0 4 174 0 30] 
#[0 4 178 0 3 0 4 0 9 0 10 0 11 0 27 0 28 0 31 0 32 0 36 0 57 0 62 0 64 0 76] 
#[0 4 182 0 27 0 31 0 36 0 62 0 72 0 73 0 76] 
#[0 4 186 0 27 0 31 0 36 0 62 0 76] 
#[0 4 190 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 9 65 0 29] 
#[0 4 194 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 3 146 0 29 9 73 0 35 9 69 0 42 9 73 0 214] 
#[0 9 77 0 29] 
#[0 4 198 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 4 202 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 9 81 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[0 4 206 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 9 85 0 33 9 89 0 37 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 4 73 0 51 4 77 0 52 4 81 0 53 4 85 0 54 4 89 0 55 4 93 0 56 4 97 0 59 4 101 0 60 4 105 0 61 4 109 0 62 4 113 0 63] 
#[0 4 210 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 4 214 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 9 93 0 31 9 97 0 76] 
#[0 9 101 0 31] 
#[0 4 218 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 9 105 0 31] 
#[0 4 222 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 4 149 0 30 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 6 117 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 6 121 0 196 9 109 0 200 6 133 0 201 6 137 0 202 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[0 4 226 0 31 0 35 0 76] 
#[1 3 158 0 31 3 158 0 35 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 4 73 0 51 4 77 0 52 4 81 0 53 4 85 0 54 4 89 0 55 4 93 0 56 4 97 0 59 4 101 0 60 4 105 0 61 4 109 0 62 4 113 0 63 3 158 0 76] 
#[0 3 166 0 31 0 35 0 76] 
#[0 4 230 0 31 0 35 0 76] 
#[0 4 234 0 33 0 35 0 37] 
#[0 4 238 0 33 0 35 0 37] 
#[0 9 113 0 41] 
#[0 9 117 0 34] 
#[0 4 242 0 37] 
#[0 4 246 0 37] 
#[1 1 162 0 34 1 162 0 35 4 250 0 37 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 4 73 0 51 4 77 0 52 4 81 0 53 4 85 0 54 4 89 0 55 4 93 0 56 4 97 0 59 4 101 0 60 4 105 0 61 4 109 0 62 4 113 0 63 5 173 0 64 4 201 0 99] 
#[1 0 99 0 1 4 254 0 2 0 103 0 3 0 107 0 4 0 111 0 5 4 254 0 6 0 115 0 7 0 119 0 8 0 123 0 9 0 127 0 10 0 131 0 11 0 135 0 13 0 139 0 15 0 143 0 16 0 147 0 17 0 151 0 18 0 155 0 20 0 159 0 21 0 163 0 22 0 167 0 24 0 171 0 25 0 175 0 26 0 179 0 27 0 183 0 28 0 187 0 30 4 254 0 31 0 191 0 32 3 73 0 36 0 195 0 58 0 199 0 59 0 203 0 60 0 207 0 61 0 211 0 62 0 215 0 63 0 219 0 64 0 223 0 65 0 227 0 66 0 231 0 67 0 235 0 68 0 239 0 69 0 243 0 70 0 247 0 71 0 251 0 72 0 255 0 73 3 193 0 76 3 77 0 89 0 113 0 90 3 81 0 94 3 85 0 97 0 117 0 100 0 129 0 117 3 89 0 121 9 121 0 122 3 97 0 123 3 101 0 124 3 105 0 125 3 109 0 126 3 113 0 127 3 117 0 128 3 121 0 129 3 125 0 130 3 129 0 132 3 133 0 133 3 137 0 134 3 141 0 135 3 145 0 136 3 149 0 137 3 153 0 138 3 157 0 139 3 161 0 140 3 165 0 141 3 169 0 142 3 173 0 146 3 177 0 154 3 181 0 159 3 185 0 162 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 3 189 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215 3 193 0 216] 
#[1 6 101 0 27 9 125 0 28] 
#[0 5 2 0 37] 
#[1 0 99 0 1 5 6 0 2 0 103 0 3 0 107 0 4 0 111 0 5 5 6 0 6 0 115 0 7 0 119 0 8 0 123 0 9 0 127 0 10 0 131 0 11 0 135 0 13 0 139 0 15 0 143 0 16 0 147 0 17 0 151 0 18 0 155 0 20 0 159 0 21 0 163 0 22 0 167 0 24 0 171 0 25 0 175 0 26 0 179 0 27 0 183 0 28 0 187 0 30 5 6 0 31 0 191 0 32 3 73 0 36 0 195 0 58 0 199 0 59 0 203 0 60 0 207 0 61 0 211 0 62 0 215 0 63 0 219 0 64 0 223 0 65 0 227 0 66 0 231 0 67 0 235 0 68 0 239 0 69 0 243 0 70 0 247 0 71 0 251 0 72 0 255 0 73 3 193 0 76 3 77 0 89 0 113 0 90 3 81 0 94 3 85 0 97 0 117 0 100 0 129 0 117 3 89 0 121 9 129 0 122 3 97 0 123 3 101 0 124 3 105 0 125 3 109 0 126 3 113 0 127 3 117 0 128 3 121 0 129 3 125 0 130 3 129 0 132 3 133 0 133 3 137 0 134 3 141 0 135 3 145 0 136 3 149 0 137 3 153 0 138 3 157 0 139 3 161 0 140 3 165 0 141 3 169 0 142 3 173 0 146 3 177 0 154 3 181 0 159 3 185 0 162 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 3 189 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215 3 193 0 216] 
#[1 7 253 0 2 8 1 0 6 9 133 0 31 8 9 0 144 8 13 0 145] 
#[1 3 214 0 2 3 214 0 6 3 214 0 31 9 137 0 147] 
#[1 2 238 0 2 2 238 0 6 2 238 0 31 9 141 0 143] 
#[0 5 10 0 37] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 4 165 0 26 1 105 0 27 1 13 0 28 1 21 0 32 1 29 0 62 1 33 0 64 9 145 0 151 4 173 0 163 1 45 0 165 4 173 0 166 1 53 0 167 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 45 0 193 1 89 0 203] 
#[0 5 14 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 5 18 0 2 0 6 0 31] 
#[0 9 149 0 37] 
#[0 5 22 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 9 153 0 29] 
#[0 5 26 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[1 9 5 0 2 8 249 0 6 9 157 0 31 9 1 0 149 9 5 0 150] 
#[1 7 253 0 2 8 1 0 6 9 161 0 31 8 9 0 144 8 13 0 145] 
#[1 5 30 0 1 5 30 0 2 5 30 0 3 5 30 0 4 5 30 0 5 5 30 0 6 5 30 0 7 5 30 0 8 5 30 0 9 5 30 0 10 5 30 0 11 9 165 0 12 5 30 0 13 5 30 0 15 5 30 0 16 5 30 0 17 5 30 0 18 5 30 0 20 5 30 0 21 5 30 0 22 5 30 0 24 5 30 0 25 5 30 0 26 5 30 0 27 5 30 0 28 5 30 0 30 5 30 0 31 5 30 0 32 5 30 0 36 5 30 0 58 5 30 0 59 5 30 0 60 5 30 0 61 5 30 0 62 5 30 0 63 5 30 0 64 5 30 0 65 5 30 0 66 5 30 0 67 5 30 0 68 5 30 0 69 5 30 0 70 5 30 0 71 5 30 0 72 5 30 0 73 5 30 0 76] 
#[0 5 34 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 5 38 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[1 3 49 0 18 1 173 0 30 9 169 0 121 9 173 0 140] 
#[1 5 42 0 30 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 4 73 0 51 4 77 0 52 4 81 0 53 4 85 0 54 4 89 0 55 4 93 0 56 4 97 0 59 4 101 0 60 4 105 0 61 4 109 0 62 4 113 0 63] 
#[1 5 46 0 30 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 4 73 0 51 4 77 0 52 4 81 0 53 4 85 0 54 4 89 0 55 4 93 0 56 4 97 0 59 4 101 0 60 4 105 0 61 4 109 0 62 4 113 0 63] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 2 205 0 27 1 245 0 28 5 50 0 30 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 3 81 0 94 3 85 0 97 9 177 0 126 3 113 0 127 3 117 0 128 3 121 0 129 3 125 0 130 3 129 0 132 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 3 189 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[0 5 54 0 30] 
#[0 5 58 0 30] 
#[0 5 62 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 3 146 0 29 9 181 0 35 9 181 0 214] 
#[0 9 185 0 29] 
#[0 5 66 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 9 189 0 33 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 4 73 0 51 4 77 0 52 4 81 0 53 4 85 0 54 4 89 0 55 4 93 0 56 4 97 0 59 4 101 0 60 4 105 0 61 4 109 0 62 4 113 0 63] 
#[0 5 70 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 9 193 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[0 5 74 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 9 197 0 31] 
#[0 5 78 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 5 82 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 5 86 0 31 0 35 0 76] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 9 201 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[1 1 233 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 2 101 0 26 1 241 0 27 1 245 0 28 1 249 0 32 2 1 0 58 2 5 0 59 2 9 0 60 2 13 0 61 2 17 0 62 2 21 0 63 2 25 0 64 2 101 0 65 2 101 0 66 2 101 0 67 2 101 0 68 2 101 0 69 2 101 0 70 2 101 0 71 2 101 0 72 2 101 0 73 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 9 205 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215] 
#[0 5 90 0 2 0 6 0 31] 
#[1 0 245 0 3 0 249 0 4 0 253 0 9 1 1 0 10 1 5 0 11 9 209 0 20 1 105 0 27 1 13 0 28 1 21 0 32 1 29 0 62 1 33 0 64 7 177 0 163 1 45 0 165 7 177 0 166 1 53 0 167 1 57 0 170 1 61 0 171 1 65 0 174 1 69 0 175 1 73 0 176 1 77 0 178 1 45 0 193 1 89 0 203] 
#[0 5 94 0 2 0 6 0 31] 
#[0 5 98 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[1 9 5 0 2 8 249 0 6 9 213 0 31 9 1 0 149 9 5 0 150] 
#[1 7 253 0 2 8 1 0 6 9 217 0 31 8 9 0 144 8 13 0 145] 
#[0 5 102 0 37] 
#[1 0 99 0 1 5 106 0 2 0 103 0 3 0 107 0 4 0 111 0 5 5 106 0 6 0 115 0 7 0 119 0 8 0 123 0 9 0 127 0 10 0 131 0 11 0 135 0 13 0 139 0 15 0 143 0 16 0 147 0 17 0 151 0 18 0 155 0 20 0 159 0 21 0 163 0 22 0 167 0 24 0 171 0 25 0 175 0 26 0 179 0 27 0 183 0 28 0 187 0 30 5 106 0 31 0 191 0 32 3 73 0 36 0 195 0 58 0 199 0 59 0 203 0 60 0 207 0 61 0 211 0 62 0 215 0 63 0 219 0 64 0 223 0 65 0 227 0 66 0 231 0 67 0 235 0 68 0 239 0 69 0 243 0 70 0 247 0 71 0 251 0 72 0 255 0 73 3 193 0 76 3 77 0 89 0 113 0 90 3 81 0 94 3 85 0 97 0 117 0 100 0 129 0 117 3 89 0 121 9 221 0 122 3 97 0 123 3 101 0 124 3 105 0 125 3 109 0 126 3 113 0 127 3 117 0 128 3 121 0 129 3 125 0 130 3 129 0 132 3 133 0 133 3 137 0 134 3 141 0 135 3 145 0 136 3 149 0 137 3 153 0 138 3 157 0 139 3 161 0 140 3 165 0 141 3 169 0 142 3 173 0 146 3 177 0 154 3 181 0 159 3 185 0 162 2 57 0 163 2 61 0 165 2 57 0 166 2 65 0 167 1 57 0 170 1 61 0 171 2 73 0 174 2 77 0 175 1 73 0 176 1 77 0 178 3 189 0 185 2 85 0 186 2 89 0 187 2 93 0 188 2 97 0 189 2 101 0 190 2 101 0 191 2 109 0 192 2 61 0 193 2 113 0 194 2 117 0 195 2 121 0 203 2 101 0 207 2 129 0 209 2 133 0 215 3 193 0 216] 
#[0 5 110 0 30] 
#[0 5 114 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 5 118 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[1 3 49 0 18 1 173 0 30 9 225 0 121 9 229 0 140] 
#[0 5 122 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 5 126 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 5 130 0 30] 
#[0 9 233 0 29] 
#[0 5 134 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 5 138 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 9 237 0 33 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 4 73 0 51 4 77 0 52 4 81 0 53 4 85 0 54 4 89 0 55 4 93 0 56 4 97 0 59 4 101 0 60 4 105 0 61 4 109 0 62 4 113 0 63] 
#[0 5 142 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[1 5 146 0 37 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 4 73 0 51 4 77 0 52 4 81 0 53 4 85 0 54 4 89 0 55 4 93 0 56 4 97 0 59 4 101 0 60 4 105 0 61 4 109 0 62 4 113 0 63] 
#[1 5 150 0 37 4 41 0 43 4 45 0 44 4 49 0 45 4 53 0 46 4 57 0 47 4 61 0 48 4 65 0 49 4 69 0 50 4 73 0 51 4 77 0 52 4 81 0 53 4 85 0 54 4 89 0 55 4 93 0 56 4 97 0 59 4 101 0 60 4 105 0 61 4 109 0 62 4 113 0 63] 
#[0 9 241 0 29] 
#[0 5 154 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 5 158 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 5 162 0 2 0 6 0 31] 
#[0 5 166 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 5 170 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 30 0 31 0 32 0 36 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76] 
#[0 5 174 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 5 178 0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 11 0 13 0 15 0 16 0 17 0 18 0 20 0 21 0 22 0 24 0 25 0 26 0 27 0 28 0 29 0 30 0 31 0 32 0 33 0 34 0 35 0 36 0 37 0 38 0 39 0 40 0 42 0 43 0 44 0 45 0 46 0 47 0 48 0 49 0 50 0 51 0 52 0 53 0 54 0 55 0 56 0 58 0 59 0 60 0 61 0 62 0 63 0 64 0 65 0 66 0 67 0 68 0 69 0 70 0 71 0 72 0 73 0 76 0 217] 
#[0 5 182 0 30]
	).
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionFor__COMMA__expression__2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 12).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 8).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 8) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 9) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 10) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 11) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 12) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 13) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 2) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 2) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 2) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 2) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 2) at: 19) to: (result at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionFor___SEMI_____eos___statement_eos_1: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 11).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).
	self addAll: ((nodes at: 1) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 1) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 11) to: (result at: 18).
	self addAll: ((nodes at: 1) at: 12) to: (result at: 19).
	self addAll: ((nodes at: 1) at: 13) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 14) to: (result at: 12).
	self addAll: ((nodes at: 1) at: 15) to: (result at: 13).
	self addAll: ((nodes at: 1) at: 16) to: (result at: 14).
	self addAll: ((nodes at: 1) at: 17) to: (result at: 15).
	self addAll: ((nodes at: 1) at: 18) to: (result at: 16).
	self addAll: ((nodes at: 1) at: 19) to: (result at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionFor___SEMI_____eos___statement_eos_2: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 2) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 11) to: (result at: 18).
	self addAll: ((nodes at: 2) at: 12) to: (result at: 19).
	self addAll: ((nodes at: 2) at: 13) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 14) to: (result at: 12).
	self addAll: ((nodes at: 2) at: 15) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 16) to: (result at: 14).
	self addAll: ((nodes at: 2) at: 17) to: (result at: 15).
	self addAll: ((nodes at: 2) at: 18) to: (result at: 16).
	self addAll: ((nodes at: 2) at: 19) to: (result at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionFor__functionDecl__functionDeclaration____methodDecl__methodDeclaration____declaration__eos_1: nodes [
	| result |
	result := Array new: 21.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 1 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionFor__functionDecl__functionDeclaration____methodDecl__methodDeclaration____declaration__eos_2: nodes [
	| result |
	result := Array new: 21.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	result at: 2 put: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionFor__functionDecl__functionDeclaration____methodDecl__methodDeclaration____declaration__eos_3: nodes [
	| result |
	result := Array new: 21.
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 7).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 8).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 8) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 9) to: (result at: 11).
	self addAll: ((nodes at: 1) at: 10) to: (result at: 12).
	self addAll: ((nodes at: 1) at: 11) to: (result at: 13).
	self addAll: ((nodes at: 1) at: 12) to: (result at: 14).
	self addAll: ((nodes at: 1) at: 13) to: (result at: 15).
	self addAll: ((nodes at: 1) at: 14) to: (result at: 16).
	self addAll: ((nodes at: 1) at: 15) to: (result at: 17).
	self addAll: ((nodes at: 1) at: 16) to: (result at: 18).
	self addAll: ((nodes at: 1) at: 17) to: (result at: 19).
	self addAll: ((nodes at: 1) at: 18) to: (result at: 20).
	self addAll: ((nodes at: 1) at: 19) to: (result at: 21).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionFor__functionDecl__functionDeclaration____methodDecl__methodDeclaration____declaration__eos__1: nodes [
	| result |
	result := Array new: 21.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	result at: 20 put: (OrderedCollection new: 2).
	result at: 21 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionFor__functionDecl__functionDeclaration____methodDecl__methodDeclaration____declaration__eos__2: nodes [
	| result |
	result := nodes at: 1.
	self add: ((nodes at: 2) at: 1) to: (result at: 1).
	self add: ((nodes at: 2) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 8) to: (result at: 12).
	self addAll: ((nodes at: 2) at: 9) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 10) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 11) to: (result at: 8).
	self addAll: ((nodes at: 2) at: 12) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 13) to: (result at: 15).
	self addAll: ((nodes at: 2) at: 14) to: (result at: 16).
	self addAll: ((nodes at: 2) at: 15) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 16) to: (result at: 14).
	self addAll: ((nodes at: 2) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 2) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 2) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 2) at: 20) to: (result at: 20).
	self addAll: ((nodes at: 2) at: 21) to: (result at: 21).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionFor_constSpec_eos__2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 8) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 9) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 10) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 11) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 12) to: (result at: 14).
	self addAll: ((nodes at: 2) at: 13) to: (result at: 8).
	self addAll: ((nodes at: 2) at: 14) to: (result at: 12).
	self addAll: ((nodes at: 2) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 2) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 2) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 2) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 2) at: 19) to: (result at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionFor_importDecl__import__eos__1: nodes [
	| result |
	result := OrderedCollection new: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionFor_importDecl__import__eos__2: nodes [
	| result |
	result := nodes at: 1.
	self add: (nodes at: 2) to: result.
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionFor_varSpec_eos_1: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 1) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 1) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 1) at: 12) to: (result at: 13).
	self addAll: ((nodes at: 1) at: 13) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 14) to: (result at: 17).
	self addAll: ((nodes at: 1) at: 15) to: (result at: 14).
	self addAll: ((nodes at: 1) at: 16) to: (result at: 15).
	self addAll: ((nodes at: 1) at: 17) to: (result at: 16).
	self addAll: ((nodes at: 1) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 1) at: 19) to: (result at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionFor_varSpec_eos__2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 8).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 8) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 9) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 10) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 11) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 12) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 13) to: (result at: 14).
	self addAll: ((nodes at: 2) at: 14) to: (result at: 15).
	self addAll: ((nodes at: 2) at: 15) to: (result at: 16).
	self addAll: ((nodes at: 2) at: 16) to: (result at: 17).
	self addAll: ((nodes at: 2) at: 17) to: (result at: 12).
	self addAll: ((nodes at: 2) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 2) at: 19) to: (result at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForaliasDecl1: nodes [
	^ nodes at: 3
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForcommCase2: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 19).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 2) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 11) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 12) to: (result at: 12).
	self addAll: ((nodes at: 2) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 2) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 2) at: 16) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 17) to: (result at: 16).
	self addAll: ((nodes at: 2) at: 18) to: (result at: 17).
	self addAll: ((nodes at: 2) at: 19) to: (result at: 18).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForcommClause2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 3) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 14).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 3) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 11) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 12) to: (result at: 15).
	self addAll: ((nodes at: 3) at: 13) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 14) to: (result at: 16).
	self addAll: ((nodes at: 3) at: 15) to: (result at: 17).
	self addAll: ((nodes at: 3) at: 16) to: (result at: 18).
	self addAll: ((nodes at: 3) at: 17) to: (result at: 19).
	self addAll: ((nodes at: 3) at: 18) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 19) to: (result at: 13).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForcommClause_2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 18).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 14).
	self addAll: ((nodes at: 2) at: 8) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 9) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 10) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 11) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 12) to: (result at: 16).
	self addAll: ((nodes at: 2) at: 13) to: (result at: 17).
	self addAll: ((nodes at: 2) at: 14) to: (result at: 8).
	self addAll: ((nodes at: 2) at: 15) to: (result at: 19).
	self addAll: ((nodes at: 2) at: 16) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 17) to: (result at: 12).
	self addAll: ((nodes at: 2) at: 18) to: (result at: 15).
	self addAll: ((nodes at: 2) at: 19) to: (result at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForcompositeLit1: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 2) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 11) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 12) to: (result at: 14).
	self addAll: ((nodes at: 2) at: 13) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 14) to: (result at: 12).
	self addAll: ((nodes at: 2) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 2) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 2) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 2) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 2) at: 19) to: (result at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForconstDecl1: nodes [
	| result |
	result := nodes at: 2.
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForconstDecl2: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 8).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 7) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 8) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 9) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 10) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 11) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 12) to: (result at: 14).
	self addAll: ((nodes at: 3) at: 13) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 14) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 3) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 3) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 3) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 3) at: 19) to: (result at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForconstSpec2: nodes [
	| result |
	result := nodes at: 3.
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForconstSpec3: nodes [
	| result |
	result := nodes at: 4.
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForconversion1: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 3) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 11) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 12) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 13) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 3) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 3) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 3) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 3) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 3) at: 19) to: (result at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionFordeclaration1: nodes [
	| result |
	result := nodes at: 1.
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionFordeclaration2: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionFordeclaration3: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 13).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 8) to: (result at: 7).
	self addAll: ((nodes at: 1) at: 9) to: (result at: 8).
	self addAll: ((nodes at: 1) at: 10) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 11) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 12) to: (result at: 11).
	self addAll: ((nodes at: 1) at: 13) to: (result at: 12).
	self addAll: ((nodes at: 1) at: 14) to: (result at: 15).
	self addAll: ((nodes at: 1) at: 15) to: (result at: 16).
	self addAll: ((nodes at: 1) at: 16) to: (result at: 17).
	self addAll: ((nodes at: 1) at: 17) to: (result at: 14).
	self addAll: ((nodes at: 1) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 1) at: 19) to: (result at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForexprCaseClause2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 3) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 7) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 3) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 11) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 12) to: (result at: 14).
	self addAll: ((nodes at: 3) at: 13) to: (result at: 15).
	self addAll: ((nodes at: 3) at: 14) to: (result at: 16).
	self addAll: ((nodes at: 3) at: 15) to: (result at: 17).
	self addAll: ((nodes at: 3) at: 16) to: (result at: 18).
	self addAll: ((nodes at: 3) at: 17) to: (result at: 19).
	self addAll: ((nodes at: 3) at: 18) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 19) to: (result at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForexprCaseClause_2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 18).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 12).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 8) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 9) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 10) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 11) to: (result at: 14).
	self addAll: ((nodes at: 2) at: 12) to: (result at: 15).
	self addAll: ((nodes at: 2) at: 13) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 14) to: (result at: 19).
	self addAll: ((nodes at: 2) at: 15) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 16) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 17) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 18) to: (result at: 16).
	self addAll: ((nodes at: 2) at: 19) to: (result at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForexprSwitchStmt2: nodes [
	| result |
	result := nodes at: 4.
	self addAllFirst: ((nodes at: 2) at: 1) to: (result at: 8).
	self addAllFirst: ((nodes at: 2) at: 2) to: (result at: 6).
	self addAllFirst: ((nodes at: 2) at: 3) to: (result at: 7).
	self addAllFirst: ((nodes at: 2) at: 4) to: (result at: 18).
	self addAllFirst: ((nodes at: 2) at: 5) to: (result at: 12).
	self addAllFirst: ((nodes at: 2) at: 6) to: (result at: 13).
	self addAllFirst: ((nodes at: 2) at: 7) to: (result at: 1).
	self addAllFirst: ((nodes at: 2) at: 8) to: (result at: 2).
	self addAllFirst: ((nodes at: 2) at: 9) to: (result at: 3).
	self addAllFirst: ((nodes at: 2) at: 10) to: (result at: 4).
	self addAllFirst: ((nodes at: 2) at: 11) to: (result at: 14).
	self addAllFirst: ((nodes at: 2) at: 12) to: (result at: 15).
	self addAllFirst: ((nodes at: 2) at: 13) to: (result at: 5).
	self addAllFirst: ((nodes at: 2) at: 14) to: (result at: 19).
	self addAllFirst: ((nodes at: 2) at: 15) to: (result at: 9).
	self addAllFirst: ((nodes at: 2) at: 16) to: (result at: 10).
	self addAllFirst: ((nodes at: 2) at: 17) to: (result at: 11).
	self addAllFirst: ((nodes at: 2) at: 18) to: (result at: 16).
	self addAllFirst: ((nodes at: 2) at: 19) to: (result at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForexprSwitchStmt4: nodes [
	| result |
	result := nodes at: 5.
	self addAllFirst: ((nodes at: 3) at: 1) to: (result at: 8).
	self addAllFirst: ((nodes at: 3) at: 2) to: (result at: 6).
	self addAllFirst: ((nodes at: 3) at: 3) to: (result at: 7).
	self addAllFirst: ((nodes at: 3) at: 4) to: (result at: 18).
	self addAllFirst: ((nodes at: 3) at: 5) to: (result at: 12).
	self addAllFirst: ((nodes at: 3) at: 6) to: (result at: 13).
	self addAllFirst: ((nodes at: 3) at: 7) to: (result at: 1).
	self addAllFirst: ((nodes at: 3) at: 8) to: (result at: 2).
	self addAllFirst: ((nodes at: 3) at: 9) to: (result at: 3).
	self addAllFirst: ((nodes at: 3) at: 10) to: (result at: 4).
	self addAllFirst: ((nodes at: 3) at: 11) to: (result at: 14).
	self addAllFirst: ((nodes at: 3) at: 12) to: (result at: 15).
	self addAllFirst: ((nodes at: 3) at: 13) to: (result at: 5).
	self addAllFirst: ((nodes at: 3) at: 14) to: (result at: 19).
	self addAllFirst: ((nodes at: 3) at: 15) to: (result at: 9).
	self addAllFirst: ((nodes at: 3) at: 16) to: (result at: 10).
	self addAllFirst: ((nodes at: 3) at: 17) to: (result at: 11).
	self addAllFirst: ((nodes at: 3) at: 18) to: (result at: 16).
	self addAllFirst: ((nodes at: 3) at: 19) to: (result at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForexprSwitchStmt5: nodes [
	| result |
	result := nodes at: 5.
	self addAllFirst: ((nodes at: 2) at: 1) to: (result at: 9).
	self addAllFirst: ((nodes at: 2) at: 2) to: (result at: 8).
	self addAllFirst: ((nodes at: 2) at: 3) to: (result at: 6).
	self addAllFirst: ((nodes at: 2) at: 4) to: (result at: 7).
	self addAllFirst: ((nodes at: 2) at: 5) to: (result at: 18).
	self addAllFirst: ((nodes at: 2) at: 6) to: (result at: 12).
	self addAllFirst: ((nodes at: 2) at: 7) to: (result at: 13).
	self addAllFirst: ((nodes at: 2) at: 8) to: (result at: 1).
	self addAllFirst: ((nodes at: 2) at: 9) to: (result at: 2).
	self addAllFirst: ((nodes at: 2) at: 10) to: (result at: 3).
	self addAllFirst: ((nodes at: 2) at: 11) to: (result at: 4).
	self addAllFirst: ((nodes at: 2) at: 12) to: (result at: 14).
	self addAllFirst: ((nodes at: 2) at: 13) to: (result at: 15).
	self addAllFirst: ((nodes at: 2) at: 14) to: (result at: 5).
	self addAllFirst: ((nodes at: 2) at: 15) to: (result at: 19).
	self addAllFirst: ((nodes at: 2) at: 16) to: (result at: 10).
	self addAllFirst: ((nodes at: 2) at: 17) to: (result at: 11).
	self addAllFirst: ((nodes at: 2) at: 18) to: (result at: 16).
	self addAllFirst: ((nodes at: 2) at: 19) to: (result at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForexprSwitchStmt6: nodes [
	| result |
	result := nodes at: 6.
	self addAllFirst: ((nodes at: 2) at: 1) to: (result at: 9).
	self addAllFirst: ((nodes at: 2) at: 2) to: (result at: 8).
	self addAllFirst: ((nodes at: 2) at: 3) to: (result at: 6).
	self addAllFirst: ((nodes at: 2) at: 4) to: (result at: 7).
	self addAllFirst: ((nodes at: 2) at: 5) to: (result at: 18).
	self addAllFirst: ((nodes at: 2) at: 6) to: (result at: 12).
	self addAllFirst: ((nodes at: 2) at: 7) to: (result at: 13).
	self addAllFirst: ((nodes at: 2) at: 8) to: (result at: 1).
	self addAllFirst: ((nodes at: 2) at: 9) to: (result at: 2).
	self addAllFirst: ((nodes at: 2) at: 10) to: (result at: 3).
	self addAllFirst: ((nodes at: 2) at: 11) to: (result at: 4).
	self addAllFirst: ((nodes at: 2) at: 12) to: (result at: 14).
	self addAllFirst: ((nodes at: 2) at: 13) to: (result at: 15).
	self addAllFirst: ((nodes at: 2) at: 14) to: (result at: 5).
	self addAllFirst: ((nodes at: 2) at: 15) to: (result at: 19).
	self addAllFirst: ((nodes at: 2) at: 16) to: (result at: 10).
	self addAllFirst: ((nodes at: 2) at: 17) to: (result at: 11).
	self addAllFirst: ((nodes at: 2) at: 18) to: (result at: 16).
	self addAllFirst: ((nodes at: 2) at: 19) to: (result at: 17).
	self addAllFirst: ((nodes at: 4) at: 1) to: (result at: 8).
	self addAllFirst: ((nodes at: 4) at: 2) to: (result at: 6).
	self addAllFirst: ((nodes at: 4) at: 3) to: (result at: 7).
	self addAllFirst: ((nodes at: 4) at: 4) to: (result at: 18).
	self addAllFirst: ((nodes at: 4) at: 5) to: (result at: 12).
	self addAllFirst: ((nodes at: 4) at: 6) to: (result at: 13).
	self addAllFirst: ((nodes at: 4) at: 7) to: (result at: 1).
	self addAllFirst: ((nodes at: 4) at: 8) to: (result at: 2).
	self addAllFirst: ((nodes at: 4) at: 9) to: (result at: 3).
	self addAllFirst: ((nodes at: 4) at: 10) to: (result at: 4).
	self addAllFirst: ((nodes at: 4) at: 11) to: (result at: 14).
	self addAllFirst: ((nodes at: 4) at: 12) to: (result at: 15).
	self addAllFirst: ((nodes at: 4) at: 13) to: (result at: 5).
	self addAllFirst: ((nodes at: 4) at: 14) to: (result at: 19).
	self addAllFirst: ((nodes at: 4) at: 15) to: (result at: 9).
	self addAllFirst: ((nodes at: 4) at: 16) to: (result at: 10).
	self addAllFirst: ((nodes at: 4) at: 17) to: (result at: 11).
	self addAllFirst: ((nodes at: 4) at: 18) to: (result at: 16).
	self addAllFirst: ((nodes at: 4) at: 19) to: (result at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForexpression15: nodes [
	| result |
	result := nodes at: 3.
	self addAllFirst: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAllFirst: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAllFirst: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAllFirst: ((nodes at: 1) at: 4) to: (result at: 4).
	self addAllFirst: ((nodes at: 1) at: 5) to: (result at: 5).
	self addAllFirst: ((nodes at: 1) at: 6) to: (result at: 6).
	self addAllFirst: ((nodes at: 1) at: 7) to: (result at: 7).
	self addAllFirst: ((nodes at: 1) at: 8) to: (result at: 8).
	self addAllFirst: ((nodes at: 1) at: 9) to: (result at: 9).
	self addAllFirst: ((nodes at: 1) at: 10) to: (result at: 10).
	self addAllFirst: ((nodes at: 1) at: 11) to: (result at: 11).
	self addAllFirst: ((nodes at: 1) at: 12) to: (result at: 12).
	self addAllFirst: ((nodes at: 1) at: 13) to: (result at: 13).
	self addAllFirst: ((nodes at: 1) at: 14) to: (result at: 14).
	self addAllFirst: ((nodes at: 1) at: 15) to: (result at: 15).
	self addAllFirst: ((nodes at: 1) at: 16) to: (result at: 16).
	self addAllFirst: ((nodes at: 1) at: 17) to: (result at: 17).
	self addAllFirst: ((nodes at: 1) at: 18) to: (result at: 18).
	self addAllFirst: ((nodes at: 1) at: 19) to: (result at: 19).
	self addFirst: (nodes at: 2) to: (result at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForexpression19: nodes [
	| result |
	result := nodes at: 3.
	self addAllFirst: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAllFirst: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAllFirst: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAllFirst: ((nodes at: 1) at: 4) to: (result at: 4).
	self addAllFirst: ((nodes at: 1) at: 5) to: (result at: 5).
	self addAllFirst: ((nodes at: 1) at: 6) to: (result at: 6).
	self addAllFirst: ((nodes at: 1) at: 7) to: (result at: 7).
	self addAllFirst: ((nodes at: 1) at: 8) to: (result at: 8).
	self addAllFirst: ((nodes at: 1) at: 9) to: (result at: 9).
	self addAllFirst: ((nodes at: 1) at: 10) to: (result at: 10).
	self addAllFirst: ((nodes at: 1) at: 11) to: (result at: 11).
	self addAllFirst: ((nodes at: 1) at: 12) to: (result at: 12).
	self addAllFirst: ((nodes at: 1) at: 13) to: (result at: 13).
	self addAllFirst: ((nodes at: 1) at: 14) to: (result at: 14).
	self addAllFirst: ((nodes at: 1) at: 15) to: (result at: 15).
	self addAllFirst: ((nodes at: 1) at: 16) to: (result at: 16).
	self addAllFirst: ((nodes at: 1) at: 17) to: (result at: 17).
	self addAllFirst: ((nodes at: 1) at: 18) to: (result at: 18).
	self addAllFirst: ((nodes at: 1) at: 19) to: (result at: 19).
	self addFirst: (nodes at: 2) to: (result at: 9).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForexpression25: nodes [
	| result |
	result := nodes at: 3.
	self addAllFirst: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAllFirst: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAllFirst: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAllFirst: ((nodes at: 1) at: 4) to: (result at: 4).
	self addAllFirst: ((nodes at: 1) at: 5) to: (result at: 5).
	self addAllFirst: ((nodes at: 1) at: 6) to: (result at: 6).
	self addAllFirst: ((nodes at: 1) at: 7) to: (result at: 7).
	self addAllFirst: ((nodes at: 1) at: 8) to: (result at: 8).
	self addAllFirst: ((nodes at: 1) at: 9) to: (result at: 9).
	self addAllFirst: ((nodes at: 1) at: 10) to: (result at: 10).
	self addAllFirst: ((nodes at: 1) at: 11) to: (result at: 11).
	self addAllFirst: ((nodes at: 1) at: 12) to: (result at: 12).
	self addAllFirst: ((nodes at: 1) at: 13) to: (result at: 13).
	self addAllFirst: ((nodes at: 1) at: 14) to: (result at: 14).
	self addAllFirst: ((nodes at: 1) at: 15) to: (result at: 15).
	self addAllFirst: ((nodes at: 1) at: 16) to: (result at: 16).
	self addAllFirst: ((nodes at: 1) at: 17) to: (result at: 17).
	self addAllFirst: ((nodes at: 1) at: 18) to: (result at: 18).
	self addAllFirst: ((nodes at: 1) at: 19) to: (result at: 19).
	self addFirst: (nodes at: 2) to: (result at: 10).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForexpression27: nodes [
	| result |
	result := nodes at: 3.
	self addAllFirst: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAllFirst: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAllFirst: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAllFirst: ((nodes at: 1) at: 4) to: (result at: 4).
	self addAllFirst: ((nodes at: 1) at: 5) to: (result at: 5).
	self addAllFirst: ((nodes at: 1) at: 6) to: (result at: 6).
	self addAllFirst: ((nodes at: 1) at: 7) to: (result at: 7).
	self addAllFirst: ((nodes at: 1) at: 8) to: (result at: 8).
	self addAllFirst: ((nodes at: 1) at: 9) to: (result at: 9).
	self addAllFirst: ((nodes at: 1) at: 10) to: (result at: 10).
	self addAllFirst: ((nodes at: 1) at: 11) to: (result at: 11).
	self addAllFirst: ((nodes at: 1) at: 12) to: (result at: 12).
	self addAllFirst: ((nodes at: 1) at: 13) to: (result at: 13).
	self addAllFirst: ((nodes at: 1) at: 14) to: (result at: 14).
	self addAllFirst: ((nodes at: 1) at: 15) to: (result at: 15).
	self addAllFirst: ((nodes at: 1) at: 16) to: (result at: 16).
	self addAllFirst: ((nodes at: 1) at: 17) to: (result at: 17).
	self addAllFirst: ((nodes at: 1) at: 18) to: (result at: 18).
	self addAllFirst: ((nodes at: 1) at: 19) to: (result at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForexpression8: nodes [
	| result |
	result := nodes at: 2.
	self addFirst: (nodes at: 1) to: (result at: 7).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForexpressionList1: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 8).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 8) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 9) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 2) at: 12) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 13) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 2) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 2) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 2) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 2) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 2) at: 19) to: (result at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForfieldDecl2: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self add: (nodes at: 3) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForfieldDecl4: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self add: (nodes at: 2) to: (result at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForforClause2: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self add: (nodes at: 3) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForforClause3: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 2) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 2) at: 12) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 13) to: (result at: 14).
	self addAll: ((nodes at: 2) at: 14) to: (result at: 15).
	self addAll: ((nodes at: 2) at: 15) to: (result at: 16).
	self addAll: ((nodes at: 2) at: 16) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 2) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 2) at: 19) to: (result at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForforClause4: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 2) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 2) at: 12) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 13) to: (result at: 14).
	self addAll: ((nodes at: 2) at: 14) to: (result at: 15).
	self addAll: ((nodes at: 2) at: 15) to: (result at: 16).
	self addAll: ((nodes at: 2) at: 16) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 2) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 2) at: 19) to: (result at: 19).
	self add: (nodes at: 4) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForforClause5: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForforClause6: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 17).
	self add: (nodes at: 4) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForforClause7: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 17).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 3) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 12) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 13) to: (result at: 14).
	self addAll: ((nodes at: 3) at: 14) to: (result at: 15).
	self addAll: ((nodes at: 3) at: 15) to: (result at: 16).
	self addAll: ((nodes at: 3) at: 16) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 3) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 3) at: 19) to: (result at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForforClause8: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 17).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 3) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 12) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 13) to: (result at: 14).
	self addAll: ((nodes at: 3) at: 14) to: (result at: 15).
	self addAll: ((nodes at: 3) at: 15) to: (result at: 16).
	self addAll: ((nodes at: 3) at: 16) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 3) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 3) at: 19) to: (result at: 19).
	self add: (nodes at: 5) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForforStmt3: nodes [
	| result |
	result := nodes at: 3.
	self addAllFirst: ((nodes at: 2) at: 1) to: (result at: 14).
	self addAllFirst: ((nodes at: 2) at: 2) to: (result at: 1).
	self addAllFirst: ((nodes at: 2) at: 3) to: (result at: 2).
	self addAllFirst: ((nodes at: 2) at: 4) to: (result at: 3).
	self addAllFirst: ((nodes at: 2) at: 5) to: (result at: 11).
	self addAllFirst: ((nodes at: 2) at: 6) to: (result at: 5).
	self addAllFirst: ((nodes at: 2) at: 7) to: (result at: 6).
	self addAllFirst: ((nodes at: 2) at: 8) to: (result at: 7).
	self addAllFirst: ((nodes at: 2) at: 9) to: (result at: 8).
	self addAllFirst: ((nodes at: 2) at: 10) to: (result at: 9).
	self addAllFirst: ((nodes at: 2) at: 11) to: (result at: 10).
	self addAllFirst: ((nodes at: 2) at: 12) to: (result at: 18).
	self addAllFirst: ((nodes at: 2) at: 13) to: (result at: 19).
	self addAllFirst: ((nodes at: 2) at: 14) to: (result at: 4).
	self addAllFirst: ((nodes at: 2) at: 15) to: (result at: 12).
	self addAllFirst: ((nodes at: 2) at: 16) to: (result at: 13).
	self addAllFirst: ((nodes at: 2) at: 17) to: (result at: 15).
	self addAllFirst: ((nodes at: 2) at: 18) to: (result at: 16).
	self addAllFirst: ((nodes at: 2) at: 19) to: (result at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForforStmt5: nodes [
	| result |
	result := nodes at: 3.
	self addAllFirst: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAllFirst: ((nodes at: 2) at: 2) to: (result at: 2).
	self addAllFirst: ((nodes at: 2) at: 3) to: (result at: 3).
	self addAllFirst: ((nodes at: 2) at: 4) to: (result at: 11).
	self addAllFirst: ((nodes at: 2) at: 5) to: (result at: 5).
	self addAllFirst: ((nodes at: 2) at: 6) to: (result at: 6).
	self addAllFirst: ((nodes at: 2) at: 7) to: (result at: 7).
	self addAllFirst: ((nodes at: 2) at: 8) to: (result at: 8).
	self addAllFirst: ((nodes at: 2) at: 9) to: (result at: 9).
	self addAllFirst: ((nodes at: 2) at: 10) to: (result at: 10).
	self addAllFirst: ((nodes at: 2) at: 11) to: (result at: 18).
	self addAllFirst: ((nodes at: 2) at: 12) to: (result at: 19).
	self addAllFirst: ((nodes at: 2) at: 13) to: (result at: 4).
	self addAllFirst: ((nodes at: 2) at: 14) to: (result at: 12).
	self addAllFirst: ((nodes at: 2) at: 15) to: (result at: 13).
	self addAllFirst: ((nodes at: 2) at: 16) to: (result at: 14).
	self addAllFirst: ((nodes at: 2) at: 17) to: (result at: 15).
	self addAllFirst: ((nodes at: 2) at: 18) to: (result at: 16).
	self addAllFirst: ((nodes at: 2) at: 19) to: (result at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForfunctionDecl1: nodes [
	| result |
	result := GoFunctionDeclNode new.
	result addObject: (nodes at: 2) to: result names.
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForfunctionDecl2: nodes [
	| result |
	result := GoFunctionDeclNode new.
	result addObject: (nodes at: 2) to: result names.
	result addTokens: ((nodes at: 4) at: 1) to: result idents.
	result addObjects: ((nodes at: 4) at: 2) to: result names.
	result addNodes: ((nodes at: 4) at: 3) to: result argses.
	result addNodes: ((nodes at: 4) at: 4) to: result typeLists.
	result addNodes: ((nodes at: 4) at: 5) to: result paramses.
	result addObjects: ((nodes at: 4) at: 6) to: result reses.
	result addTokens: ((nodes at: 4) at: 7) to: result unaryOps.
	result addTokens: ((nodes at: 4) at: 8) to: result mulOps.
	result addTokens: ((nodes at: 4) at: 9) to: result addOps.
	result addTokens: ((nodes at: 4) at: 10) to: result relOps.
	result addTokens: ((nodes at: 4) at: 11) to: result tags.
	result addNodes: ((nodes at: 4) at: 12) to: result params.
	result addObjects: ((nodes at: 4) at: 13) to: result channels.
	result addObjects: ((nodes at: 4) at: 14) to: result postStmts.
	result addObjects: ((nodes at: 4) at: 15) to: result initStmts.
	result addObjects: ((nodes at: 4) at: 16) to: result types.
	result addObjects: ((nodes at: 4) at: 17) to: result recvExprs.
	result addTokens: ((nodes at: 4) at: 18) to: result firsts.
	result addTokens: ((nodes at: 4) at: 19) to: result nexts.
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForfunctionDecl4: nodes [
	| result |
	result := GoFunctionDeclNode new.
	result addObject: (nodes at: 2) to: result names.
	result addTokens: ((nodes at: 5) at: 1) to: result idents.
	result addObjects: ((nodes at: 5) at: 2) to: result names.
	result addNodes: ((nodes at: 5) at: 3) to: result argses.
	result addNodes: ((nodes at: 5) at: 4) to: result typeLists.
	result addNodes: ((nodes at: 5) at: 5) to: result paramses.
	result addObjects: ((nodes at: 5) at: 6) to: result reses.
	result addTokens: ((nodes at: 5) at: 7) to: result unaryOps.
	result addTokens: ((nodes at: 5) at: 8) to: result mulOps.
	result addTokens: ((nodes at: 5) at: 9) to: result addOps.
	result addTokens: ((nodes at: 5) at: 10) to: result relOps.
	result addTokens: ((nodes at: 5) at: 11) to: result tags.
	result addNodes: ((nodes at: 5) at: 12) to: result params.
	result addObjects: ((nodes at: 5) at: 13) to: result channels.
	result addObjects: ((nodes at: 5) at: 14) to: result postStmts.
	result addObjects: ((nodes at: 5) at: 15) to: result initStmts.
	result addObjects: ((nodes at: 5) at: 16) to: result types.
	result addObjects: ((nodes at: 5) at: 17) to: result recvExprs.
	result addTokens: ((nodes at: 5) at: 18) to: result firsts.
	result addTokens: ((nodes at: 5) at: 19) to: result nexts.
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForfunctionLit1: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 7) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 3) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 11) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 12) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 3) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 3) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 3) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 3) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 3) at: 19) to: (result at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForidentifierList1: nodes [
	| result |
	result := GoIdentifierListNode new.
	result addToken: (nodes at: 1) to: result idents.
	result addTokens: (nodes at: 2) to: result idents.
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForifStmt1: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 12).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 8) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 9) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 10) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 11) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 12) to: (result at: 8).
	self addAll: ((nodes at: 2) at: 13) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 2) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 2) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 2) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 2) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 2) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 7) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 8) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 9) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 10) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 11) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 12) to: (result at: 14).
	self addAll: ((nodes at: 3) at: 13) to: (result at: 15).
	self addAll: ((nodes at: 3) at: 14) to: (result at: 16).
	self addAll: ((nodes at: 3) at: 15) to: (result at: 17).
	self addAll: ((nodes at: 3) at: 16) to: (result at: 18).
	self addAll: ((nodes at: 3) at: 17) to: (result at: 19).
	self addAll: ((nodes at: 3) at: 18) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 19) to: (result at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForifStmt2: nodes [
	| result |
	result := nodes at: 5.
	self addAllFirst: ((nodes at: 2) at: 1) to: (result at: 12).
	self addAllFirst: ((nodes at: 2) at: 2) to: (result at: 5).
	self addAllFirst: ((nodes at: 2) at: 3) to: (result at: 6).
	self addAllFirst: ((nodes at: 2) at: 4) to: (result at: 13).
	self addAllFirst: ((nodes at: 2) at: 5) to: (result at: 10).
	self addAllFirst: ((nodes at: 2) at: 6) to: (result at: 11).
	self addAllFirst: ((nodes at: 2) at: 7) to: (result at: 1).
	self addAllFirst: ((nodes at: 2) at: 8) to: (result at: 2).
	self addAllFirst: ((nodes at: 2) at: 9) to: (result at: 3).
	self addAllFirst: ((nodes at: 2) at: 10) to: (result at: 4).
	self addAllFirst: ((nodes at: 2) at: 11) to: (result at: 7).
	self addAllFirst: ((nodes at: 2) at: 12) to: (result at: 8).
	self addAllFirst: ((nodes at: 2) at: 13) to: (result at: 9).
	self addAllFirst: ((nodes at: 2) at: 14) to: (result at: 14).
	self addAllFirst: ((nodes at: 2) at: 15) to: (result at: 15).
	self addAllFirst: ((nodes at: 2) at: 16) to: (result at: 16).
	self addAllFirst: ((nodes at: 2) at: 17) to: (result at: 17).
	self addAllFirst: ((nodes at: 2) at: 18) to: (result at: 18).
	self addAllFirst: ((nodes at: 2) at: 19) to: (result at: 19).
	self addAllFirst: ((nodes at: 3) at: 1) to: (result at: 12).
	self addAllFirst: ((nodes at: 3) at: 2) to: (result at: 5).
	self addAllFirst: ((nodes at: 3) at: 3) to: (result at: 6).
	self addAllFirst: ((nodes at: 3) at: 4) to: (result at: 9).
	self addAllFirst: ((nodes at: 3) at: 5) to: (result at: 10).
	self addAllFirst: ((nodes at: 3) at: 6) to: (result at: 11).
	self addAllFirst: ((nodes at: 3) at: 7) to: (result at: 1).
	self addAllFirst: ((nodes at: 3) at: 8) to: (result at: 2).
	self addAllFirst: ((nodes at: 3) at: 9) to: (result at: 3).
	self addAllFirst: ((nodes at: 3) at: 10) to: (result at: 4).
	self addAllFirst: ((nodes at: 3) at: 11) to: (result at: 13).
	self addAllFirst: ((nodes at: 3) at: 12) to: (result at: 14).
	self addAllFirst: ((nodes at: 3) at: 13) to: (result at: 15).
	self addAllFirst: ((nodes at: 3) at: 14) to: (result at: 16).
	self addAllFirst: ((nodes at: 3) at: 15) to: (result at: 17).
	self addAllFirst: ((nodes at: 3) at: 16) to: (result at: 18).
	self addAllFirst: ((nodes at: 3) at: 17) to: (result at: 19).
	self addAllFirst: ((nodes at: 3) at: 18) to: (result at: 7).
	self addAllFirst: ((nodes at: 3) at: 19) to: (result at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForifStmt3: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 12).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 8) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 9) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 10) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 11) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 12) to: (result at: 8).
	self addAll: ((nodes at: 2) at: 13) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 2) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 2) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 2) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 2) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 2) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 7) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 8) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 9) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 10) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 11) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 12) to: (result at: 14).
	self addAll: ((nodes at: 3) at: 13) to: (result at: 15).
	self addAll: ((nodes at: 3) at: 14) to: (result at: 16).
	self addAll: ((nodes at: 3) at: 15) to: (result at: 17).
	self addAll: ((nodes at: 3) at: 16) to: (result at: 18).
	self addAll: ((nodes at: 3) at: 17) to: (result at: 19).
	self addAll: ((nodes at: 3) at: 18) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 19) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 12).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 6).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 5) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 11).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 1).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 2).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 3).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 4).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 13).
	self addAll: ((nodes at: 5) at: 12) to: (result at: 14).
	self addAll: ((nodes at: 5) at: 13) to: (result at: 15).
	self addAll: ((nodes at: 5) at: 14) to: (result at: 16).
	self addAll: ((nodes at: 5) at: 15) to: (result at: 17).
	self addAll: ((nodes at: 5) at: 16) to: (result at: 18).
	self addAll: ((nodes at: 5) at: 17) to: (result at: 19).
	self addAll: ((nodes at: 5) at: 18) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 19) to: (result at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForifStmt4: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 7) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 8) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 9) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 10) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 11) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 12) to: (result at: 8).
	self addAll: ((nodes at: 3) at: 13) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 3) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 3) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 3) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 3) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 3) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 12).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 8) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 9) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 10) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 11) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 12) to: (result at: 14).
	self addAll: ((nodes at: 4) at: 13) to: (result at: 15).
	self addAll: ((nodes at: 4) at: 14) to: (result at: 16).
	self addAll: ((nodes at: 4) at: 15) to: (result at: 17).
	self addAll: ((nodes at: 4) at: 16) to: (result at: 18).
	self addAll: ((nodes at: 4) at: 17) to: (result at: 19).
	self addAll: ((nodes at: 4) at: 18) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 19) to: (result at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForifStmt5: nodes [
	| result |
	result := nodes at: 6.
	self addAllFirst: ((nodes at: 3) at: 1) to: (result at: 12).
	self addAllFirst: ((nodes at: 3) at: 2) to: (result at: 5).
	self addAllFirst: ((nodes at: 3) at: 3) to: (result at: 6).
	self addAllFirst: ((nodes at: 3) at: 4) to: (result at: 13).
	self addAllFirst: ((nodes at: 3) at: 5) to: (result at: 10).
	self addAllFirst: ((nodes at: 3) at: 6) to: (result at: 11).
	self addAllFirst: ((nodes at: 3) at: 7) to: (result at: 1).
	self addAllFirst: ((nodes at: 3) at: 8) to: (result at: 2).
	self addAllFirst: ((nodes at: 3) at: 9) to: (result at: 3).
	self addAllFirst: ((nodes at: 3) at: 10) to: (result at: 4).
	self addAllFirst: ((nodes at: 3) at: 11) to: (result at: 7).
	self addAllFirst: ((nodes at: 3) at: 12) to: (result at: 8).
	self addAllFirst: ((nodes at: 3) at: 13) to: (result at: 9).
	self addAllFirst: ((nodes at: 3) at: 14) to: (result at: 14).
	self addAllFirst: ((nodes at: 3) at: 15) to: (result at: 15).
	self addAllFirst: ((nodes at: 3) at: 16) to: (result at: 16).
	self addAllFirst: ((nodes at: 3) at: 17) to: (result at: 17).
	self addAllFirst: ((nodes at: 3) at: 18) to: (result at: 18).
	self addAllFirst: ((nodes at: 3) at: 19) to: (result at: 19).
	self addAllFirst: ((nodes at: 4) at: 1) to: (result at: 12).
	self addAllFirst: ((nodes at: 4) at: 2) to: (result at: 5).
	self addAllFirst: ((nodes at: 4) at: 3) to: (result at: 6).
	self addAllFirst: ((nodes at: 4) at: 4) to: (result at: 9).
	self addAllFirst: ((nodes at: 4) at: 5) to: (result at: 10).
	self addAllFirst: ((nodes at: 4) at: 6) to: (result at: 11).
	self addAllFirst: ((nodes at: 4) at: 7) to: (result at: 1).
	self addAllFirst: ((nodes at: 4) at: 8) to: (result at: 2).
	self addAllFirst: ((nodes at: 4) at: 9) to: (result at: 3).
	self addAllFirst: ((nodes at: 4) at: 10) to: (result at: 4).
	self addAllFirst: ((nodes at: 4) at: 11) to: (result at: 13).
	self addAllFirst: ((nodes at: 4) at: 12) to: (result at: 14).
	self addAllFirst: ((nodes at: 4) at: 13) to: (result at: 15).
	self addAllFirst: ((nodes at: 4) at: 14) to: (result at: 16).
	self addAllFirst: ((nodes at: 4) at: 15) to: (result at: 17).
	self addAllFirst: ((nodes at: 4) at: 16) to: (result at: 18).
	self addAllFirst: ((nodes at: 4) at: 17) to: (result at: 19).
	self addAllFirst: ((nodes at: 4) at: 18) to: (result at: 7).
	self addAllFirst: ((nodes at: 4) at: 19) to: (result at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForifStmt6: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 7) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 8) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 9) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 10) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 11) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 12) to: (result at: 8).
	self addAll: ((nodes at: 3) at: 13) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 3) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 3) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 3) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 3) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 3) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 12).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 8) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 9) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 10) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 11) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 12) to: (result at: 14).
	self addAll: ((nodes at: 4) at: 13) to: (result at: 15).
	self addAll: ((nodes at: 4) at: 14) to: (result at: 16).
	self addAll: ((nodes at: 4) at: 15) to: (result at: 17).
	self addAll: ((nodes at: 4) at: 16) to: (result at: 18).
	self addAll: ((nodes at: 4) at: 17) to: (result at: 19).
	self addAll: ((nodes at: 4) at: 18) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 19) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 12).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 6).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 5) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 6) to: (result at: 11).
	self addAll: ((nodes at: 6) at: 7) to: (result at: 1).
	self addAll: ((nodes at: 6) at: 8) to: (result at: 2).
	self addAll: ((nodes at: 6) at: 9) to: (result at: 3).
	self addAll: ((nodes at: 6) at: 10) to: (result at: 4).
	self addAll: ((nodes at: 6) at: 11) to: (result at: 13).
	self addAll: ((nodes at: 6) at: 12) to: (result at: 14).
	self addAll: ((nodes at: 6) at: 13) to: (result at: 15).
	self addAll: ((nodes at: 6) at: 14) to: (result at: 16).
	self addAll: ((nodes at: 6) at: 15) to: (result at: 17).
	self addAll: ((nodes at: 6) at: 16) to: (result at: 18).
	self addAll: ((nodes at: 6) at: 17) to: (result at: 19).
	self addAll: ((nodes at: 6) at: 18) to: (result at: 7).
	self addAll: ((nodes at: 6) at: 19) to: (result at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForifStmt7: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 15).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 12).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 8) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 9) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 10) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 11) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 12) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 13) to: (result at: 8).
	self addAll: ((nodes at: 2) at: 14) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 15) to: (result at: 14).
	self addAll: ((nodes at: 2) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 2) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 2) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 2) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 12).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 8) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 9) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 10) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 11) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 12) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 13) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 4) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 4) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 4) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 4) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 4) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 12).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 6).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 5) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 11).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 1).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 2).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 3).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 4).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 13).
	self addAll: ((nodes at: 5) at: 12) to: (result at: 14).
	self addAll: ((nodes at: 5) at: 13) to: (result at: 15).
	self addAll: ((nodes at: 5) at: 14) to: (result at: 16).
	self addAll: ((nodes at: 5) at: 15) to: (result at: 17).
	self addAll: ((nodes at: 5) at: 16) to: (result at: 18).
	self addAll: ((nodes at: 5) at: 17) to: (result at: 19).
	self addAll: ((nodes at: 5) at: 18) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 19) to: (result at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForifStmt8: nodes [
	| result |
	result := nodes at: 7.
	self addAllFirst: ((nodes at: 2) at: 1) to: (result at: 15).
	self addAllFirst: ((nodes at: 2) at: 2) to: (result at: 12).
	self addAllFirst: ((nodes at: 2) at: 3) to: (result at: 5).
	self addAllFirst: ((nodes at: 2) at: 4) to: (result at: 6).
	self addAllFirst: ((nodes at: 2) at: 5) to: (result at: 13).
	self addAllFirst: ((nodes at: 2) at: 6) to: (result at: 10).
	self addAllFirst: ((nodes at: 2) at: 7) to: (result at: 11).
	self addAllFirst: ((nodes at: 2) at: 8) to: (result at: 1).
	self addAllFirst: ((nodes at: 2) at: 9) to: (result at: 2).
	self addAllFirst: ((nodes at: 2) at: 10) to: (result at: 3).
	self addAllFirst: ((nodes at: 2) at: 11) to: (result at: 4).
	self addAllFirst: ((nodes at: 2) at: 12) to: (result at: 7).
	self addAllFirst: ((nodes at: 2) at: 13) to: (result at: 8).
	self addAllFirst: ((nodes at: 2) at: 14) to: (result at: 9).
	self addAllFirst: ((nodes at: 2) at: 15) to: (result at: 14).
	self addAllFirst: ((nodes at: 2) at: 16) to: (result at: 16).
	self addAllFirst: ((nodes at: 2) at: 17) to: (result at: 17).
	self addAllFirst: ((nodes at: 2) at: 18) to: (result at: 18).
	self addAllFirst: ((nodes at: 2) at: 19) to: (result at: 19).
	self addAllFirst: ((nodes at: 4) at: 1) to: (result at: 12).
	self addAllFirst: ((nodes at: 4) at: 2) to: (result at: 5).
	self addAllFirst: ((nodes at: 4) at: 3) to: (result at: 6).
	self addAllFirst: ((nodes at: 4) at: 4) to: (result at: 13).
	self addAllFirst: ((nodes at: 4) at: 5) to: (result at: 10).
	self addAllFirst: ((nodes at: 4) at: 6) to: (result at: 11).
	self addAllFirst: ((nodes at: 4) at: 7) to: (result at: 1).
	self addAllFirst: ((nodes at: 4) at: 8) to: (result at: 2).
	self addAllFirst: ((nodes at: 4) at: 9) to: (result at: 3).
	self addAllFirst: ((nodes at: 4) at: 10) to: (result at: 4).
	self addAllFirst: ((nodes at: 4) at: 11) to: (result at: 7).
	self addAllFirst: ((nodes at: 4) at: 12) to: (result at: 8).
	self addAllFirst: ((nodes at: 4) at: 13) to: (result at: 9).
	self addAllFirst: ((nodes at: 4) at: 14) to: (result at: 14).
	self addAllFirst: ((nodes at: 4) at: 15) to: (result at: 15).
	self addAllFirst: ((nodes at: 4) at: 16) to: (result at: 16).
	self addAllFirst: ((nodes at: 4) at: 17) to: (result at: 17).
	self addAllFirst: ((nodes at: 4) at: 18) to: (result at: 18).
	self addAllFirst: ((nodes at: 4) at: 19) to: (result at: 19).
	self addAllFirst: ((nodes at: 5) at: 1) to: (result at: 12).
	self addAllFirst: ((nodes at: 5) at: 2) to: (result at: 5).
	self addAllFirst: ((nodes at: 5) at: 3) to: (result at: 6).
	self addAllFirst: ((nodes at: 5) at: 4) to: (result at: 9).
	self addAllFirst: ((nodes at: 5) at: 5) to: (result at: 10).
	self addAllFirst: ((nodes at: 5) at: 6) to: (result at: 11).
	self addAllFirst: ((nodes at: 5) at: 7) to: (result at: 1).
	self addAllFirst: ((nodes at: 5) at: 8) to: (result at: 2).
	self addAllFirst: ((nodes at: 5) at: 9) to: (result at: 3).
	self addAllFirst: ((nodes at: 5) at: 10) to: (result at: 4).
	self addAllFirst: ((nodes at: 5) at: 11) to: (result at: 13).
	self addAllFirst: ((nodes at: 5) at: 12) to: (result at: 14).
	self addAllFirst: ((nodes at: 5) at: 13) to: (result at: 15).
	self addAllFirst: ((nodes at: 5) at: 14) to: (result at: 16).
	self addAllFirst: ((nodes at: 5) at: 15) to: (result at: 17).
	self addAllFirst: ((nodes at: 5) at: 16) to: (result at: 18).
	self addAllFirst: ((nodes at: 5) at: 17) to: (result at: 19).
	self addAllFirst: ((nodes at: 5) at: 18) to: (result at: 7).
	self addAllFirst: ((nodes at: 5) at: 19) to: (result at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForifStmt9: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 15).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 12).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 8) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 9) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 10) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 11) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 12) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 13) to: (result at: 8).
	self addAll: ((nodes at: 2) at: 14) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 15) to: (result at: 14).
	self addAll: ((nodes at: 2) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 2) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 2) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 2) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 12).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 8) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 9) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 10) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 11) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 12) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 13) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 4) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 4) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 4) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 4) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 4) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 12).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 6).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 5) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 11).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 1).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 2).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 3).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 4).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 13).
	self addAll: ((nodes at: 5) at: 12) to: (result at: 14).
	self addAll: ((nodes at: 5) at: 13) to: (result at: 15).
	self addAll: ((nodes at: 5) at: 14) to: (result at: 16).
	self addAll: ((nodes at: 5) at: 15) to: (result at: 17).
	self addAll: ((nodes at: 5) at: 16) to: (result at: 18).
	self addAll: ((nodes at: 5) at: 17) to: (result at: 19).
	self addAll: ((nodes at: 5) at: 18) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 19) to: (result at: 8).
	self addAll: ((nodes at: 7) at: 1) to: (result at: 12).
	self addAll: ((nodes at: 7) at: 2) to: (result at: 5).
	self addAll: ((nodes at: 7) at: 3) to: (result at: 6).
	self addAll: ((nodes at: 7) at: 4) to: (result at: 9).
	self addAll: ((nodes at: 7) at: 5) to: (result at: 10).
	self addAll: ((nodes at: 7) at: 6) to: (result at: 11).
	self addAll: ((nodes at: 7) at: 7) to: (result at: 1).
	self addAll: ((nodes at: 7) at: 8) to: (result at: 2).
	self addAll: ((nodes at: 7) at: 9) to: (result at: 3).
	self addAll: ((nodes at: 7) at: 10) to: (result at: 4).
	self addAll: ((nodes at: 7) at: 11) to: (result at: 13).
	self addAll: ((nodes at: 7) at: 12) to: (result at: 14).
	self addAll: ((nodes at: 7) at: 13) to: (result at: 15).
	self addAll: ((nodes at: 7) at: 14) to: (result at: 16).
	self addAll: ((nodes at: 7) at: 15) to: (result at: 17).
	self addAll: ((nodes at: 7) at: 16) to: (result at: 18).
	self addAll: ((nodes at: 7) at: 17) to: (result at: 19).
	self addAll: ((nodes at: 7) at: 18) to: (result at: 7).
	self addAll: ((nodes at: 7) at: 19) to: (result at: 8).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForimportDecl1: nodes [
	| result |
	result := GoImportDeclNode new.
	result addNode: (nodes at: 2) to: result imports.
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForimportDecl2: nodes [
	| result |
	result := GoImportDeclNode new.
	result addNodes: (nodes at: 4) to: result imports.
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForimportPath1: nodes [
	| result |
	result := GoImportPathNode new.
	result string: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForimportSpec1: nodes [
	| result |
	result := GoImportSpecNode new.
	result path: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForimportSpec3: nodes [
	| result |
	result := GoImportSpecNode new.
	result name: (nodes at: 1).
	result path: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForlabeledStmt2: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 7) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 3) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 11) to: (result at: 18).
	self addAll: ((nodes at: 3) at: 12) to: (result at: 19).
	self addAll: ((nodes at: 3) at: 13) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 14) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 15) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 16) to: (result at: 14).
	self addAll: ((nodes at: 3) at: 17) to: (result at: 15).
	self addAll: ((nodes at: 3) at: 18) to: (result at: 16).
	self addAll: ((nodes at: 3) at: 19) to: (result at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForliteral3: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 11).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).
	self addAll: ((nodes at: 1) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 1) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 11) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 12) to: (result at: 12).
	self addAll: ((nodes at: 1) at: 13) to: (result at: 15).
	self addAll: ((nodes at: 1) at: 14) to: (result at: 16).
	self addAll: ((nodes at: 1) at: 15) to: (result at: 17).
	self addAll: ((nodes at: 1) at: 16) to: (result at: 18).
	self addAll: ((nodes at: 1) at: 17) to: (result at: 19).
	self addAll: ((nodes at: 1) at: 18) to: (result at: 13).
	self addAll: ((nodes at: 1) at: 19) to: (result at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionFormethodDecl1: nodes [
	| result |
	result := GoMethodDeclNode new.
	result receiver: (nodes at: 2).
	result addObject: (nodes at: 3) to: result names.
	result signature: (nodes at: 4).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionFormethodDecl2: nodes [
	| result |
	result := GoMethodDeclNode new.
	result receiver: (nodes at: 2).
	result addObject: (nodes at: 3) to: result names.
	result signature: (nodes at: 4).
	result addTokens: ((nodes at: 5) at: 1) to: result idents.
	result addObjects: ((nodes at: 5) at: 2) to: result names.
	result addNodes: ((nodes at: 5) at: 3) to: result argses.
	result addNodes: ((nodes at: 5) at: 4) to: result typeLists.
	result addNodes: ((nodes at: 5) at: 5) to: result paramses.
	result addObjects: ((nodes at: 5) at: 6) to: result reses.
	result addTokens: ((nodes at: 5) at: 7) to: result unaryOps.
	result addTokens: ((nodes at: 5) at: 8) to: result mulOps.
	result addTokens: ((nodes at: 5) at: 9) to: result addOps.
	result addTokens: ((nodes at: 5) at: 10) to: result relOps.
	result addTokens: ((nodes at: 5) at: 11) to: result tags.
	result addNodes: ((nodes at: 5) at: 12) to: result params.
	result addObjects: ((nodes at: 5) at: 13) to: result channels.
	result addObjects: ((nodes at: 5) at: 14) to: result postStmts.
	result addObjects: ((nodes at: 5) at: 15) to: result initStmts.
	result addObjects: ((nodes at: 5) at: 16) to: result types.
	result addObjects: ((nodes at: 5) at: 17) to: result recvExprs.
	result addTokens: ((nodes at: 5) at: 18) to: result firsts.
	result addTokens: ((nodes at: 5) at: 19) to: result nexts.
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForpackageClause1: nodes [
	| result |
	result := GoPackageClauseNode new.
	result packageName: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForparameterDecl1: nodes [
	| result |
	result := GoParameterDeclNode new.
	result type: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForparameterDecl2: nodes [
	| result |
	result := GoParameterDeclNode new.
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForparameterDecl3: nodes [
	| result |
	result := GoParameterDeclNode new.
	result identifiers: (nodes at: 1).
	result type: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForparameterDecl4: nodes [
	| result |
	result := GoParameterDeclNode new.
	result identifiers: (nodes at: 1).
	result type: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForparameters1: nodes [
	| result |
	result := GoParametersNode new.
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForparameters2: nodes [
	| result |
	result := GoParametersNode new.
	result addNode: (nodes at: 2) to: result params.
	result addNodes: (nodes at: 3) to: result params.
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForprimaryExpr2: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 11).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 12).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 13).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 8) to: (result at: 7).
	self addAll: ((nodes at: 1) at: 9) to: (result at: 8).
	self addAll: ((nodes at: 1) at: 10) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 11) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 12) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 13) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 1) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 1) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 1) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 1) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 1) at: 19) to: (result at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForprimaryExpr5: nodes [
	| result |
	result := nodes at: 2.
	self addAllFirst: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAllFirst: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAllFirst: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAllFirst: ((nodes at: 1) at: 4) to: (result at: 4).
	self addAllFirst: ((nodes at: 1) at: 5) to: (result at: 5).
	self addAllFirst: ((nodes at: 1) at: 6) to: (result at: 6).
	self addAllFirst: ((nodes at: 1) at: 7) to: (result at: 7).
	self addAllFirst: ((nodes at: 1) at: 8) to: (result at: 8).
	self addAllFirst: ((nodes at: 1) at: 9) to: (result at: 9).
	self addAllFirst: ((nodes at: 1) at: 10) to: (result at: 10).
	self addAllFirst: ((nodes at: 1) at: 11) to: (result at: 11).
	self addAllFirst: ((nodes at: 1) at: 12) to: (result at: 12).
	self addAllFirst: ((nodes at: 1) at: 13) to: (result at: 13).
	self addAllFirst: ((nodes at: 1) at: 14) to: (result at: 14).
	self addAllFirst: ((nodes at: 1) at: 15) to: (result at: 15).
	self addAllFirst: ((nodes at: 1) at: 16) to: (result at: 16).
	self addAllFirst: ((nodes at: 1) at: 17) to: (result at: 17).
	self addAllFirst: ((nodes at: 1) at: 18) to: (result at: 18).
	self addAllFirst: ((nodes at: 1) at: 19) to: (result at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForqualifiedIdent1: nodes [
	| result |
	result := GoQualifiedIdentNode new.
	result first: (nodes at: 1).
	result next: (nodes at: 3).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForrangeClause2: nodes [
	| result |
	result := nodes at: 4.
	self addAllFirst: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAllFirst: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAllFirst: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAllFirst: ((nodes at: 1) at: 4) to: (result at: 4).
	self addAllFirst: ((nodes at: 1) at: 5) to: (result at: 5).
	self addAllFirst: ((nodes at: 1) at: 6) to: (result at: 6).
	self addAllFirst: ((nodes at: 1) at: 7) to: (result at: 7).
	self addAllFirst: ((nodes at: 1) at: 8) to: (result at: 8).
	self addAllFirst: ((nodes at: 1) at: 9) to: (result at: 9).
	self addAllFirst: ((nodes at: 1) at: 10) to: (result at: 10).
	self addAllFirst: ((nodes at: 1) at: 11) to: (result at: 11).
	self addAllFirst: ((nodes at: 1) at: 12) to: (result at: 12).
	self addAllFirst: ((nodes at: 1) at: 13) to: (result at: 13).
	self addAllFirst: ((nodes at: 1) at: 14) to: (result at: 14).
	self addAllFirst: ((nodes at: 1) at: 15) to: (result at: 15).
	self addAllFirst: ((nodes at: 1) at: 16) to: (result at: 16).
	self addAllFirst: ((nodes at: 1) at: 17) to: (result at: 17).
	self addAllFirst: ((nodes at: 1) at: 18) to: (result at: 18).
	self addAllFirst: ((nodes at: 1) at: 19) to: (result at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForrecvStmt1: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForrecvStmt2: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 1) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 1) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 1) at: 12) to: (result at: 13).
	self addAll: ((nodes at: 1) at: 13) to: (result at: 14).
	self addAll: ((nodes at: 1) at: 14) to: (result at: 15).
	self addAll: ((nodes at: 1) at: 15) to: (result at: 16).
	self addAll: ((nodes at: 1) at: 16) to: (result at: 17).
	self addAll: ((nodes at: 1) at: 17) to: (result at: 18).
	self addAll: ((nodes at: 1) at: 18) to: (result at: 19).
	self addAll: ((nodes at: 1) at: 19) to: (result at: 1).
	self add: (nodes at: 3) to: (result at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForsendStmt1: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self add: (nodes at: 1) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 3) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 12) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 13) to: (result at: 14).
	self addAll: ((nodes at: 3) at: 14) to: (result at: 15).
	self addAll: ((nodes at: 3) at: 15) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 3) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 3) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 3) at: 19) to: (result at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForsignature1: nodes [
	| result |
	result := GoSignatureNode new.
	result params: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForsignature2: nodes [
	| result |
	result := GoSignatureNode new.
	result params: (nodes at: 1).
	result res: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForsimpleStmt4: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 1) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 1) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 1) at: 12) to: (result at: 13).
	self addAll: ((nodes at: 1) at: 13) to: (result at: 14).
	self addAll: ((nodes at: 1) at: 14) to: (result at: 15).
	self addAll: ((nodes at: 1) at: 15) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 1) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 1) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 1) at: 19) to: (result at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForslice_4: nodes [
	| result |
	result := nodes at: 4.
	self addAllFirst: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAllFirst: ((nodes at: 2) at: 2) to: (result at: 2).
	self addAllFirst: ((nodes at: 2) at: 3) to: (result at: 3).
	self addAllFirst: ((nodes at: 2) at: 4) to: (result at: 4).
	self addAllFirst: ((nodes at: 2) at: 5) to: (result at: 5).
	self addAllFirst: ((nodes at: 2) at: 6) to: (result at: 6).
	self addAllFirst: ((nodes at: 2) at: 7) to: (result at: 7).
	self addAllFirst: ((nodes at: 2) at: 8) to: (result at: 8).
	self addAllFirst: ((nodes at: 2) at: 9) to: (result at: 9).
	self addAllFirst: ((nodes at: 2) at: 10) to: (result at: 10).
	self addAllFirst: ((nodes at: 2) at: 11) to: (result at: 11).
	self addAllFirst: ((nodes at: 2) at: 12) to: (result at: 12).
	self addAllFirst: ((nodes at: 2) at: 13) to: (result at: 13).
	self addAllFirst: ((nodes at: 2) at: 14) to: (result at: 14).
	self addAllFirst: ((nodes at: 2) at: 15) to: (result at: 15).
	self addAllFirst: ((nodes at: 2) at: 16) to: (result at: 16).
	self addAllFirst: ((nodes at: 2) at: 17) to: (result at: 17).
	self addAllFirst: ((nodes at: 2) at: 18) to: (result at: 18).
	self addAllFirst: ((nodes at: 2) at: 19) to: (result at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForslice_5: nodes [
	| result |
	result := nodes at: 5.
	self addAllFirst: ((nodes at: 3) at: 1) to: (result at: 1).
	self addAllFirst: ((nodes at: 3) at: 2) to: (result at: 2).
	self addAllFirst: ((nodes at: 3) at: 3) to: (result at: 3).
	self addAllFirst: ((nodes at: 3) at: 4) to: (result at: 4).
	self addAllFirst: ((nodes at: 3) at: 5) to: (result at: 5).
	self addAllFirst: ((nodes at: 3) at: 6) to: (result at: 6).
	self addAllFirst: ((nodes at: 3) at: 7) to: (result at: 7).
	self addAllFirst: ((nodes at: 3) at: 8) to: (result at: 8).
	self addAllFirst: ((nodes at: 3) at: 9) to: (result at: 9).
	self addAllFirst: ((nodes at: 3) at: 10) to: (result at: 10).
	self addAllFirst: ((nodes at: 3) at: 11) to: (result at: 11).
	self addAllFirst: ((nodes at: 3) at: 12) to: (result at: 12).
	self addAllFirst: ((nodes at: 3) at: 13) to: (result at: 13).
	self addAllFirst: ((nodes at: 3) at: 14) to: (result at: 14).
	self addAllFirst: ((nodes at: 3) at: 15) to: (result at: 15).
	self addAllFirst: ((nodes at: 3) at: 16) to: (result at: 16).
	self addAllFirst: ((nodes at: 3) at: 17) to: (result at: 17).
	self addAllFirst: ((nodes at: 3) at: 18) to: (result at: 18).
	self addAllFirst: ((nodes at: 3) at: 19) to: (result at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForslice_6: nodes [
	| result |
	result := nodes at: 6.
	self addAllFirst: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAllFirst: ((nodes at: 2) at: 2) to: (result at: 2).
	self addAllFirst: ((nodes at: 2) at: 3) to: (result at: 3).
	self addAllFirst: ((nodes at: 2) at: 4) to: (result at: 4).
	self addAllFirst: ((nodes at: 2) at: 5) to: (result at: 5).
	self addAllFirst: ((nodes at: 2) at: 6) to: (result at: 6).
	self addAllFirst: ((nodes at: 2) at: 7) to: (result at: 7).
	self addAllFirst: ((nodes at: 2) at: 8) to: (result at: 8).
	self addAllFirst: ((nodes at: 2) at: 9) to: (result at: 9).
	self addAllFirst: ((nodes at: 2) at: 10) to: (result at: 10).
	self addAllFirst: ((nodes at: 2) at: 11) to: (result at: 11).
	self addAllFirst: ((nodes at: 2) at: 12) to: (result at: 12).
	self addAllFirst: ((nodes at: 2) at: 13) to: (result at: 13).
	self addAllFirst: ((nodes at: 2) at: 14) to: (result at: 14).
	self addAllFirst: ((nodes at: 2) at: 15) to: (result at: 15).
	self addAllFirst: ((nodes at: 2) at: 16) to: (result at: 16).
	self addAllFirst: ((nodes at: 2) at: 17) to: (result at: 17).
	self addAllFirst: ((nodes at: 2) at: 18) to: (result at: 18).
	self addAllFirst: ((nodes at: 2) at: 19) to: (result at: 19).
	self addAllFirst: ((nodes at: 4) at: 1) to: (result at: 1).
	self addAllFirst: ((nodes at: 4) at: 2) to: (result at: 2).
	self addAllFirst: ((nodes at: 4) at: 3) to: (result at: 3).
	self addAllFirst: ((nodes at: 4) at: 4) to: (result at: 4).
	self addAllFirst: ((nodes at: 4) at: 5) to: (result at: 5).
	self addAllFirst: ((nodes at: 4) at: 6) to: (result at: 6).
	self addAllFirst: ((nodes at: 4) at: 7) to: (result at: 7).
	self addAllFirst: ((nodes at: 4) at: 8) to: (result at: 8).
	self addAllFirst: ((nodes at: 4) at: 9) to: (result at: 9).
	self addAllFirst: ((nodes at: 4) at: 10) to: (result at: 10).
	self addAllFirst: ((nodes at: 4) at: 11) to: (result at: 11).
	self addAllFirst: ((nodes at: 4) at: 12) to: (result at: 12).
	self addAllFirst: ((nodes at: 4) at: 13) to: (result at: 13).
	self addAllFirst: ((nodes at: 4) at: 14) to: (result at: 14).
	self addAllFirst: ((nodes at: 4) at: 15) to: (result at: 15).
	self addAllFirst: ((nodes at: 4) at: 16) to: (result at: 16).
	self addAllFirst: ((nodes at: 4) at: 17) to: (result at: 17).
	self addAllFirst: ((nodes at: 4) at: 18) to: (result at: 18).
	self addAllFirst: ((nodes at: 4) at: 19) to: (result at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForsourceFile1: nodes [
	| result |
	result := GoSourceFileNode new.
	result package: (nodes at: 1).
	result addNodes: (nodes at: 3) to: result imports.
	result addNodes: ((nodes at: 4) at: 1) to: result functionDeclarations.
	result addNodes: ((nodes at: 4) at: 2) to: result methodDeclarations.
	result addTokens: ((nodes at: 4) at: 3) to: result idents.
	result addObjects: ((nodes at: 4) at: 4) to: result names.
	result addNodes: ((nodes at: 4) at: 5) to: result argses.
	result addTokens: ((nodes at: 4) at: 6) to: result unaryOps.
	result addTokens: ((nodes at: 4) at: 7) to: result mulOps.
	result addTokens: ((nodes at: 4) at: 8) to: result addOps.
	result addTokens: ((nodes at: 4) at: 9) to: result relOps.
	result addNodes: ((nodes at: 4) at: 10) to: result typeLists.
	result addNodes: ((nodes at: 4) at: 11) to: result paramses.
	result addObjects: ((nodes at: 4) at: 12) to: result reses.
	result addTokens: ((nodes at: 4) at: 13) to: result tags.
	result addNodes: ((nodes at: 4) at: 14) to: result params.
	result addTokens: ((nodes at: 4) at: 15) to: result firsts.
	result addTokens: ((nodes at: 4) at: 16) to: result nexts.
	result addObjects: ((nodes at: 4) at: 17) to: result channels.
	result addObjects: ((nodes at: 4) at: 18) to: result postStmts.
	result addObjects: ((nodes at: 4) at: 19) to: result initStmts.
	result addObjects: ((nodes at: 4) at: 20) to: result types.
	result addObjects: ((nodes at: 4) at: 21) to: result recvExprs.
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForstatement10: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 13).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).
	self addAll: ((nodes at: 1) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 1) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 11) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 12) to: (result at: 14).
	self addAll: ((nodes at: 1) at: 13) to: (result at: 15).
	self addAll: ((nodes at: 1) at: 14) to: (result at: 16).
	self addAll: ((nodes at: 1) at: 15) to: (result at: 17).
	self addAll: ((nodes at: 1) at: 16) to: (result at: 18).
	self addAll: ((nodes at: 1) at: 17) to: (result at: 19).
	self addAll: ((nodes at: 1) at: 18) to: (result at: 11).
	self addAll: ((nodes at: 1) at: 19) to: (result at: 12).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForstatement11: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 8).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 11).
	self addAll: ((nodes at: 1) at: 8) to: (result at: 12).
	self addAll: ((nodes at: 1) at: 9) to: (result at: 13).
	self addAll: ((nodes at: 1) at: 10) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 11) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 12) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 13) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 14) to: (result at: 14).
	self addAll: ((nodes at: 1) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 1) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 1) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 1) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 1) at: 19) to: (result at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForstatement12: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 7).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 8).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 13).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 8) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 9) to: (result at: 15).
	self addAll: ((nodes at: 1) at: 10) to: (result at: 16).
	self addAll: ((nodes at: 1) at: 11) to: (result at: 17).
	self addAll: ((nodes at: 1) at: 12) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 13) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 14) to: (result at: 11).
	self addAll: ((nodes at: 1) at: 15) to: (result at: 12).
	self addAll: ((nodes at: 1) at: 16) to: (result at: 18).
	self addAll: ((nodes at: 1) at: 17) to: (result at: 19).
	self addAll: ((nodes at: 1) at: 18) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 19) to: (result at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForstatement13: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 15).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 19).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 7).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 8).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 8) to: (result at: 13).
	self addAll: ((nodes at: 1) at: 9) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 10) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 11) to: (result at: 16).
	self addAll: ((nodes at: 1) at: 12) to: (result at: 17).
	self addAll: ((nodes at: 1) at: 13) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 14) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 15) to: (result at: 18).
	self addAll: ((nodes at: 1) at: 16) to: (result at: 11).
	self addAll: ((nodes at: 1) at: 17) to: (result at: 12).
	self addAll: ((nodes at: 1) at: 18) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 19) to: (result at: 14).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForstatement3: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 15).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 8) to: (result at: 7).
	self addAll: ((nodes at: 1) at: 9) to: (result at: 8).
	self addAll: ((nodes at: 1) at: 10) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 11) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 12) to: (result at: 11).
	self addAll: ((nodes at: 1) at: 13) to: (result at: 12).
	self addAll: ((nodes at: 1) at: 14) to: (result at: 13).
	self addAll: ((nodes at: 1) at: 15) to: (result at: 14).
	self addAll: ((nodes at: 1) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 1) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 1) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 1) at: 19) to: (result at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForswitchStmt2: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 8).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 7).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 18).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 12).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 13).
	self addAll: ((nodes at: 1) at: 8) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 9) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 10) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 11) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 12) to: (result at: 14).
	self addAll: ((nodes at: 1) at: 13) to: (result at: 15).
	self addAll: ((nodes at: 1) at: 14) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 15) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 16) to: (result at: 11).
	self addAll: ((nodes at: 1) at: 17) to: (result at: 19).
	self addAll: ((nodes at: 1) at: 18) to: (result at: 16).
	self addAll: ((nodes at: 1) at: 19) to: (result at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionFortypeArgs1: nodes [
	| result |
	result := GoTypeArgsNode new.
	result typeList: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionFortypeCaseClause2: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 3) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 12) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 13) to: (result at: 14).
	self addAll: ((nodes at: 3) at: 14) to: (result at: 15).
	self addAll: ((nodes at: 3) at: 15) to: (result at: 16).
	self addAll: ((nodes at: 3) at: 16) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 3) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 3) at: 19) to: (result at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionFortypeCaseClause_2: nodes [
	| result |
	result := nodes at: 1.
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 12).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 14).
	self addAll: ((nodes at: 2) at: 8) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 9) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 10) to: (result at: 8).
	self addAll: ((nodes at: 2) at: 11) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 12) to: (result at: 18).
	self addAll: ((nodes at: 2) at: 13) to: (result at: 19).
	self addAll: ((nodes at: 2) at: 14) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 15) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 16) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 17) to: (result at: 15).
	self addAll: ((nodes at: 2) at: 18) to: (result at: 16).
	self addAll: ((nodes at: 2) at: 19) to: (result at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionFortypeList1: nodes [
	| result |
	result := GoTypeListNode new.
	result addObject: (nodes at: 1) to: result types.
	result addObjects: (nodes at: 2) to: result types.
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionFortypeList2: nodes [
	| result |
	result := GoTypeListNode new.
	result addObjects: (nodes at: 2) to: result types.
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionFortypeLit2: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 1) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 1) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 1) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 1) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 1) at: 5) to: (result at: 5).
	self addAll: ((nodes at: 1) at: 6) to: (result at: 6).
	self addAll: ((nodes at: 1) at: 7) to: (result at: 7).
	self addAll: ((nodes at: 1) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 1) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 1) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 1) at: 11) to: (result at: 13).
	self addAll: ((nodes at: 1) at: 12) to: (result at: 14).
	self addAll: ((nodes at: 1) at: 13) to: (result at: 11).
	self addAll: ((nodes at: 1) at: 14) to: (result at: 12).
	self addAll: ((nodes at: 1) at: 15) to: (result at: 15).
	self addAll: ((nodes at: 1) at: 16) to: (result at: 16).
	self addAll: ((nodes at: 1) at: 17) to: (result at: 17).
	self addAll: ((nodes at: 1) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 1) at: 19) to: (result at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionFortypeName2: nodes [
	| result |
	result := GoTypeNameNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionFortypeSwitchStmt1: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 2) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 2) at: 12) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 13) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 14) to: (result at: 17).
	self addAll: ((nodes at: 2) at: 15) to: (result at: 14).
	self addAll: ((nodes at: 2) at: 16) to: (result at: 15).
	self addAll: ((nodes at: 2) at: 17) to: (result at: 16).
	self addAll: ((nodes at: 2) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 2) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 18).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 14).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 8) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 9) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 10) to: (result at: 15).
	self addAll: ((nodes at: 4) at: 11) to: (result at: 16).
	self addAll: ((nodes at: 4) at: 12) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 13) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 14) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 15) to: (result at: 19).
	self addAll: ((nodes at: 4) at: 16) to: (result at: 12).
	self addAll: ((nodes at: 4) at: 17) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 18) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 19) to: (result at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionFortypeSwitchStmt2: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 3) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 12) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 13) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 14) to: (result at: 17).
	self addAll: ((nodes at: 3) at: 15) to: (result at: 14).
	self addAll: ((nodes at: 3) at: 16) to: (result at: 15).
	self addAll: ((nodes at: 3) at: 17) to: (result at: 16).
	self addAll: ((nodes at: 3) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 3) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 5) at: 1) to: (result at: 18).
	self addAll: ((nodes at: 5) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 5) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 5) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 5) at: 5) to: (result at: 14).
	self addAll: ((nodes at: 5) at: 6) to: (result at: 8).
	self addAll: ((nodes at: 5) at: 7) to: (result at: 9).
	self addAll: ((nodes at: 5) at: 8) to: (result at: 10).
	self addAll: ((nodes at: 5) at: 9) to: (result at: 11).
	self addAll: ((nodes at: 5) at: 10) to: (result at: 15).
	self addAll: ((nodes at: 5) at: 11) to: (result at: 16).
	self addAll: ((nodes at: 5) at: 12) to: (result at: 5).
	self addAll: ((nodes at: 5) at: 13) to: (result at: 6).
	self addAll: ((nodes at: 5) at: 14) to: (result at: 7).
	self addAll: ((nodes at: 5) at: 15) to: (result at: 19).
	self addAll: ((nodes at: 5) at: 16) to: (result at: 12).
	self addAll: ((nodes at: 5) at: 17) to: (result at: 13).
	self addAll: ((nodes at: 5) at: 18) to: (result at: 4).
	self addAll: ((nodes at: 5) at: 19) to: (result at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionFortypeSwitchStmt3: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 14).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 8) to: (result at: 8).
	self addAll: ((nodes at: 2) at: 9) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 10) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 11) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 12) to: (result at: 12).
	self addAll: ((nodes at: 2) at: 13) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 14) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 15) to: (result at: 17).
	self addAll: ((nodes at: 2) at: 16) to: (result at: 15).
	self addAll: ((nodes at: 2) at: 17) to: (result at: 16).
	self addAll: ((nodes at: 2) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 2) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 4) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 4) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 4) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 4) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 4) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 4) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 4) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 4) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 4) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 4) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 4) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 4) at: 12) to: (result at: 13).
	self addAll: ((nodes at: 4) at: 13) to: (result at: 5).
	self addAll: ((nodes at: 4) at: 14) to: (result at: 17).
	self addAll: ((nodes at: 4) at: 15) to: (result at: 14).
	self addAll: ((nodes at: 4) at: 16) to: (result at: 15).
	self addAll: ((nodes at: 4) at: 17) to: (result at: 16).
	self addAll: ((nodes at: 4) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 4) at: 19) to: (result at: 19).
	self addAll: ((nodes at: 6) at: 1) to: (result at: 18).
	self addAll: ((nodes at: 6) at: 2) to: (result at: 1).
	self addAll: ((nodes at: 6) at: 3) to: (result at: 2).
	self addAll: ((nodes at: 6) at: 4) to: (result at: 3).
	self addAll: ((nodes at: 6) at: 5) to: (result at: 14).
	self addAll: ((nodes at: 6) at: 6) to: (result at: 8).
	self addAll: ((nodes at: 6) at: 7) to: (result at: 9).
	self addAll: ((nodes at: 6) at: 8) to: (result at: 10).
	self addAll: ((nodes at: 6) at: 9) to: (result at: 11).
	self addAll: ((nodes at: 6) at: 10) to: (result at: 15).
	self addAll: ((nodes at: 6) at: 11) to: (result at: 16).
	self addAll: ((nodes at: 6) at: 12) to: (result at: 5).
	self addAll: ((nodes at: 6) at: 13) to: (result at: 6).
	self addAll: ((nodes at: 6) at: 14) to: (result at: 7).
	self addAll: ((nodes at: 6) at: 15) to: (result at: 19).
	self addAll: ((nodes at: 6) at: 16) to: (result at: 12).
	self addAll: ((nodes at: 6) at: 17) to: (result at: 13).
	self addAll: ((nodes at: 6) at: 18) to: (result at: 4).
	self addAll: ((nodes at: 6) at: 19) to: (result at: 17).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionFortype_1: nodes [
	| result |
	result := GoTypeNode new.
	result name: (nodes at: 1).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionFortype_2: nodes [
	| result |
	result := GoTypeNode new.
	result name: (nodes at: 1).
	result args: (nodes at: 2).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForvarDecl1: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 2) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 2) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 2) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 2) at: 4) to: (result at: 4).
	self addAll: ((nodes at: 2) at: 5) to: (result at: 6).
	self addAll: ((nodes at: 2) at: 6) to: (result at: 7).
	self addAll: ((nodes at: 2) at: 7) to: (result at: 8).
	self addAll: ((nodes at: 2) at: 8) to: (result at: 9).
	self addAll: ((nodes at: 2) at: 9) to: (result at: 10).
	self addAll: ((nodes at: 2) at: 10) to: (result at: 11).
	self addAll: ((nodes at: 2) at: 11) to: (result at: 12).
	self addAll: ((nodes at: 2) at: 12) to: (result at: 13).
	self addAll: ((nodes at: 2) at: 13) to: (result at: 5).
	self addAll: ((nodes at: 2) at: 14) to: (result at: 17).
	self addAll: ((nodes at: 2) at: 15) to: (result at: 14).
	self addAll: ((nodes at: 2) at: 16) to: (result at: 15).
	self addAll: ((nodes at: 2) at: 17) to: (result at: 16).
	self addAll: ((nodes at: 2) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 2) at: 19) to: (result at: 19).
	^ result
]

{ #category : #'generated-reduction actions' }
GoParser >> reduceActionForvarDecl2: nodes [
	| result |
	result := Array new: 19.
	result at: 1 put: (OrderedCollection new: 2).
	result at: 2 put: (OrderedCollection new: 2).
	result at: 3 put: (OrderedCollection new: 2).
	result at: 4 put: (OrderedCollection new: 2).
	result at: 5 put: (OrderedCollection new: 2).
	result at: 6 put: (OrderedCollection new: 2).
	result at: 7 put: (OrderedCollection new: 2).
	result at: 8 put: (OrderedCollection new: 2).
	result at: 9 put: (OrderedCollection new: 2).
	result at: 10 put: (OrderedCollection new: 2).
	result at: 11 put: (OrderedCollection new: 2).
	result at: 12 put: (OrderedCollection new: 2).
	result at: 13 put: (OrderedCollection new: 2).
	result at: 14 put: (OrderedCollection new: 2).
	result at: 15 put: (OrderedCollection new: 2).
	result at: 16 put: (OrderedCollection new: 2).
	result at: 17 put: (OrderedCollection new: 2).
	result at: 18 put: (OrderedCollection new: 2).
	result at: 19 put: (OrderedCollection new: 2).
	self addAll: ((nodes at: 3) at: 1) to: (result at: 1).
	self addAll: ((nodes at: 3) at: 2) to: (result at: 2).
	self addAll: ((nodes at: 3) at: 3) to: (result at: 3).
	self addAll: ((nodes at: 3) at: 4) to: (result at: 8).
	self addAll: ((nodes at: 3) at: 5) to: (result at: 9).
	self addAll: ((nodes at: 3) at: 6) to: (result at: 10).
	self addAll: ((nodes at: 3) at: 7) to: (result at: 11).
	self addAll: ((nodes at: 3) at: 8) to: (result at: 6).
	self addAll: ((nodes at: 3) at: 9) to: (result at: 7).
	self addAll: ((nodes at: 3) at: 10) to: (result at: 5).
	self addAll: ((nodes at: 3) at: 11) to: (result at: 4).
	self addAll: ((nodes at: 3) at: 12) to: (result at: 17).
	self addAll: ((nodes at: 3) at: 13) to: (result at: 12).
	self addAll: ((nodes at: 3) at: 14) to: (result at: 13).
	self addAll: ((nodes at: 3) at: 15) to: (result at: 14).
	self addAll: ((nodes at: 3) at: 16) to: (result at: 15).
	self addAll: ((nodes at: 3) at: 17) to: (result at: 16).
	self addAll: ((nodes at: 3) at: 18) to: (result at: 18).
	self addAll: ((nodes at: 3) at: 19) to: (result at: 19).
	^ result
]
